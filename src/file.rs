/* automatically generated by rust-bindgen */

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl <T> __BindgenUnionField<T> {
    #[inline]
    pub fn new() -> Self { __BindgenUnionField(::std::marker::PhantomData) }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T { ::std::mem::transmute(self) }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T { ::std::mem::transmute(self) }
}
impl <T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self { Self::new() }
}
impl <T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self { Self::new() }
}
impl <T> ::std::marker::Copy for __BindgenUnionField<T> { }
impl <T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
pub const _GLIBCXX_VECTOR: ::std::os::raw::c_uint = 1;
pub const _STL_ALGOBASE_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_CXX_CONFIG_H: ::std::os::raw::c_uint = 1;
pub const __GLIBCXX__: ::std::os::raw::c_uint = 20170406;
pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_DEPRECATED: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_EXTERN_TEMPLATE: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_DUAL_ABI: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_CXX11_ABI: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_INLINE_VERSION: ::std::os::raw::c_uint = 0;
pub const _GLIBCXX_USE_ALLOCATOR_NEW: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_OS_DEFINES: ::std::os::raw::c_uint = 1;
pub const __NO_CTYPE: ::std::os::raw::c_uint = 1;
pub const _FEATURES_H: ::std::os::raw::c_uint = 1;
pub const _ISOC95_SOURCE: ::std::os::raw::c_uint = 1;
pub const _ISOC99_SOURCE: ::std::os::raw::c_uint = 1;
pub const _ISOC11_SOURCE: ::std::os::raw::c_uint = 1;
pub const _POSIX_SOURCE: ::std::os::raw::c_uint = 1;
pub const _POSIX_C_SOURCE: ::std::os::raw::c_uint = 200809;
pub const _XOPEN_SOURCE: ::std::os::raw::c_uint = 700;
pub const _XOPEN_SOURCE_EXTENDED: ::std::os::raw::c_uint = 1;
pub const _LARGEFILE64_SOURCE: ::std::os::raw::c_uint = 1;
pub const _DEFAULT_SOURCE: ::std::os::raw::c_uint = 1;
pub const _ATFILE_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC11: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC99: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC95: ::std::os::raw::c_uint = 1;
pub const __USE_ISOCXX11: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX2: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199309: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199506: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K8: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN_EXTENDED: ::std::os::raw::c_uint = 1;
pub const __USE_UNIX98: ::std::os::raw::c_uint = 1;
pub const _LARGEFILE_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K8XSI: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2KXSI: ::std::os::raw::c_uint = 1;
pub const __USE_LARGEFILE: ::std::os::raw::c_uint = 1;
pub const __USE_LARGEFILE64: ::std::os::raw::c_uint = 1;
pub const __USE_MISC: ::std::os::raw::c_uint = 1;
pub const __USE_ATFILE: ::std::os::raw::c_uint = 1;
pub const __USE_GNU: ::std::os::raw::c_uint = 1;
pub const __USE_FORTIFY_LEVEL: ::std::os::raw::c_uint = 0;
pub const _STDC_PREDEF_H: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559__: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559_COMPLEX__: ::std::os::raw::c_uint = 1;
pub const __STDC_ISO_10646__: ::std::os::raw::c_uint = 201605;
pub const __STDC_NO_THREADS__: ::std::os::raw::c_uint = 1;
pub const __GNU_LIBRARY__: ::std::os::raw::c_uint = 6;
pub const __GLIBC__: ::std::os::raw::c_uint = 2;
pub const __GLIBC_MINOR__: ::std::os::raw::c_uint = 24;
pub const _SYS_CDEFS_H: ::std::os::raw::c_uint = 1;
pub const __WORDSIZE: ::std::os::raw::c_uint = 64;
pub const __WORDSIZE_TIME64_COMPAT32: ::std::os::raw::c_uint = 1;
pub const __SYSCALL_WORDSIZE: ::std::os::raw::c_uint = 64;
pub const _GLIBCXX_CPU_DEFINES: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_FAST_MATH: ::std::os::raw::c_uint = 0;
pub const _GLIBCXX_HAVE_ACOSF: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_ACOSL: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_ASINF: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_ASINL: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_ATAN2F: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_ATAN2L: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_ATANF: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_ATANL: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_CEILF: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_CEILL: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_COMPLEX_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_COSF: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_COSHF: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_COSHL: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_COSL: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_DIRENT_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_DLFCN_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_EBADMSG: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_ECANCELED: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_ECHILD: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_EIDRM: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_ENDIAN_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_ENODATA: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_ENOLINK: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_ENOSPC: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_ENOSR: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_ENOSTR: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_ENOTRECOVERABLE: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_ENOTSUP: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_EOVERFLOW: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_EOWNERDEAD: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_EPERM: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_EPROTO: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_ETIME: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_ETIMEDOUT: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_ETXTBSY: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_EWOULDBLOCK: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_EXECINFO_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_EXPF: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_EXPL: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_FABSF: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_FABSL: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_FCNTL_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_FENV_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_FINITE: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_FINITEF: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_FINITEL: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_FLOAT_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_FLOORF: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_FLOORL: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_FMODF: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_FMODL: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_FREXPF: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_FREXPL: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_GETIPINFO: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_GETS: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_HYPOT: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_HYPOTF: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_HYPOTL: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_ICONV: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_INT64_T: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_INT64_T_LONG: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_INTTYPES_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_ISINFF: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_ISINFL: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_ISNANF: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_ISNANL: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_ISWBLANK: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_LC_MESSAGES: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_LDEXPF: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_LDEXPL: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_LIBINTL_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_LIMIT_AS: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_LIMIT_DATA: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_LIMIT_FSIZE: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_LIMIT_RSS: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_LIMIT_VMEM: ::std::os::raw::c_uint = 0;
pub const _GLIBCXX_HAVE_LINUX_FUTEX: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_LOCALE_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_LOG10F: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_LOG10L: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_LOGF: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_LOGL: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_MBSTATE_T: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_MEMORY_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_MODF: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_MODFF: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_MODFL: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_POLL: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_POWF: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_POWL: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_QUICK_EXIT: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_SETENV: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_SINCOS: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_SINCOSF: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_SINCOSL: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_SINF: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_SINHF: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_SINHL: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_SINL: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_SQRTF: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_SQRTL: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_STDALIGN_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_STDBOOL_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_STDINT_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_STDLIB_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_STRERROR_L: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_STRERROR_R: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_STRINGS_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_STRING_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_STRTOF: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_STRTOLD: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_STRXFRM_L: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT:
          ::std::os::raw::c_uint =
    1;
pub const _GLIBCXX_HAVE_SYS_IOCTL_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_SYS_IPC_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_SYS_PARAM_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_SYS_SDT_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_SYS_SEM_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_SYS_STATVFS_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_SYS_STAT_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_SYS_TIME_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_SYS_TYPES_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_SYS_UIO_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_S_ISREG: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_TANF: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_TANHF: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_TANHL: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_TANL: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_TGMATH_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_TLS: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_UCHAR_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_UNISTD_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_UTIME_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_VFWSCANF: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_VSWSCANF: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_VWSCANF: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_WCHAR_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_WCSTOF: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_WCTYPE_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE_WRITEV: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: ::std::os::raw::c_uint = 1;
pub const LT_OBJDIR: &'static [u8; 7usize] = b".libs/\x00";
pub const _GLIBCXX_PACKAGE_BUGREPORT: &'static [u8; 1usize] = b"\x00";
pub const _GLIBCXX_PACKAGE_NAME: &'static [u8; 15usize] =
    b"package-unused\x00";
pub const _GLIBCXX_PACKAGE_STRING: &'static [u8; 30usize] =
    b"package-unused version-unused\x00";
pub const _GLIBCXX_PACKAGE_TARNAME: &'static [u8; 10usize] = b"libstdc++\x00";
pub const _GLIBCXX_PACKAGE_URL: &'static [u8; 1usize] = b"\x00";
pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &'static [u8; 15usize] =
    b"version-unused\x00";
pub const STDC_HEADERS: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX11_USE_C99_COMPLEX: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX11_USE_C99_MATH: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX11_USE_C99_STDIO: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX11_USE_C99_STDLIB: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX11_USE_C99_WCHAR: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX98_USE_C99_COMPLEX: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX98_USE_C99_MATH: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX98_USE_C99_STDIO: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX98_USE_C99_STDLIB: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX98_USE_C99_WCHAR: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_ATOMIC_BUILTINS: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_FULLY_DYNAMIC_STRING: ::std::os::raw::c_uint = 0;
pub const _GLIBCXX_HAS_GTHREADS: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_HOSTED: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_RES_LIMITS: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_STDIO_EOF: ::std::os::raw::c_int = -1;
pub const _GLIBCXX_STDIO_SEEK_CUR: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_STDIO_SEEK_END: ::std::os::raw::c_uint = 2;
pub const _GLIBCXX_SYMVER: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_SYMVER_GNU: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_C11_UCHAR_CXX11: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_C99: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_C99_COMPLEX_TR1: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_C99_CTYPE_TR1: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_C99_FENV_TR1: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_TR1: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_C99_MATH_TR1: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_C99_STDINT_TR1: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_CLOCK_MONOTONIC: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_CLOCK_REALTIME: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_DECIMAL_FLOAT: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_FCHMOD: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_FCHMODAT: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_FLOAT128: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_GETTIMEOFDAY: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_GET_NPROCS: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_INT128: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_LFS: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_LONG_LONG: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_NANOSLEEP: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_NLS: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_RANDOM_TR1: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_REALPATH: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_SCHED_YIELD: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_SENDFILE: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_ST_MTIM: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_TMPNAM: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_UTIMENSAT: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_USE_WCHAR_T: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_VERBOSE: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_X86_RDRAND: ::std::os::raw::c_uint = 1;
pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: ::std::os::raw::c_uint = 1;
pub const _FUNCTEXCEPT_H: ::std::os::raw::c_uint = 1;
pub const _EXCEPTION_DEFINES_H: ::std::os::raw::c_uint = 1;
pub const _CPP_TYPE_TRAITS_H: ::std::os::raw::c_uint = 1;
pub const _EXT_TYPE_TRAITS: ::std::os::raw::c_uint = 1;
pub const _EXT_NUMERIC_TRAITS: ::std::os::raw::c_uint = 1;
pub const _STL_PAIR_H: ::std::os::raw::c_uint = 1;
pub const _MOVE_H: ::std::os::raw::c_uint = 1;
pub const _CONCEPT_CHECK_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_TYPE_TRAITS: ::std::os::raw::c_uint = 1;
pub const __cpp_lib_integral_constant_callable: ::std::os::raw::c_uint =
    201304;
pub const __cpp_lib_bool_constant: ::std::os::raw::c_uint = 201505;
pub const __cpp_lib_logical_traits: ::std::os::raw::c_uint = 201510;
pub const __cpp_lib_is_null_pointer: ::std::os::raw::c_uint = 201309;
pub const __cpp_lib_is_final: ::std::os::raw::c_uint = 201402;
pub const __cpp_lib_transformation_trait_aliases: ::std::os::raw::c_uint =
    201304;
pub const __cpp_lib_result_of_sfinae: ::std::os::raw::c_uint = 201210;
pub const __cpp_lib_void_t: ::std::os::raw::c_uint = 201411;
pub const _STL_ITERATOR_BASE_TYPES_H: ::std::os::raw::c_uint = 1;
pub const _STL_ITERATOR_BASE_FUNCS_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_DEBUG_ASSERTIONS_H: ::std::os::raw::c_uint = 1;
pub const _STL_ITERATOR_H: ::std::os::raw::c_uint = 1;
pub const _PTR_TRAITS_H: ::std::os::raw::c_uint = 1;
pub const __cpp_lib_make_reverse_iterator: ::std::os::raw::c_uint = 201402;
pub const _GLIBCXX_DEBUG_MACRO_SWITCH_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_PREDEFINED_OPS_H: ::std::os::raw::c_uint = 1;
pub const __cpp_lib_robust_nonmodifying_seq_ops: ::std::os::raw::c_uint =
    201304;
pub const _ALLOCATOR_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_CXX_ALLOCATOR_H: ::std::os::raw::c_uint = 1;
pub const _NEW_ALLOCATOR_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_ATOMIC_LOCK_FREE_H: ::std::os::raw::c_uint = 1;
pub const __cpp_lib_uncaught_exceptions: ::std::os::raw::c_uint = 201411;
pub const _GLIBCXX_NESTED_EXCEPTION_H: ::std::os::raw::c_uint = 1;
pub const _MEMORYFWD_H: ::std::os::raw::c_uint = 1;
pub const __cpp_lib_incomplete_container_elements: ::std::os::raw::c_uint =
    201505;
pub const __cpp_lib_allocator_is_always_equal: ::std::os::raw::c_uint =
    201411;
pub const _STL_CONSTRUCT_H: ::std::os::raw::c_uint = 1;
pub const _EXT_ALLOC_TRAITS_H: ::std::os::raw::c_uint = 1;
pub const _ALLOC_TRAITS_H: ::std::os::raw::c_uint = 1;
pub const __cpp_lib_allocator_traits_is_always_equal: ::std::os::raw::c_uint =
    201411;
pub const _STL_UNINITIALIZED_H: ::std::os::raw::c_uint = 1;
pub const _STL_VECTOR_H: ::std::os::raw::c_uint = 1;
pub const _STL_BVECTOR_H: ::std::os::raw::c_uint = 1;
pub const _FUNCTIONAL_HASH_H: ::std::os::raw::c_uint = 1;
pub const _HASH_BYTES_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_RANGE_ACCESS_H: ::std::os::raw::c_uint = 1;
pub const __cpp_lib_nonmember_container_access: ::std::os::raw::c_uint =
    201411;
pub const _VECTOR_TCC: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_MEMORY: ::std::os::raw::c_uint = 1;
pub const _STL_TEMPBUF_H: ::std::os::raw::c_uint = 1;
pub const _STL_RAW_STORAGE_ITERATOR_H: ::std::os::raw::c_uint = 1;
pub const __GXX_MERGED_TYPEINFO_NAMES: ::std::os::raw::c_uint = 0;
pub const __GXX_TYPEINFO_EQUALITY_INLINE: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_IOSFWD: ::std::os::raw::c_uint = 1;
pub const _STRINGFWD_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_POSTYPES_H: ::std::os::raw::c_uint = 1;
pub const _WCHAR_H: ::std::os::raw::c_uint = 1;
pub const __FILE_defined: ::std::os::raw::c_uint = 1;
pub const ____FILE_defined: ::std::os::raw::c_uint = 1;
pub const __GNUC_VA_LIST: ::std::os::raw::c_uint = 1;
pub const _BITS_WCHAR_H: ::std::os::raw::c_uint = 1;
pub const ____mbstate_t_defined: ::std::os::raw::c_uint = 1;
pub const __mbstate_t_defined: ::std::os::raw::c_uint = 1;
pub const WEOF: ::std::os::raw::c_uint = 4294967295;
pub const _XLOCALE_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_CWCHAR: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_ATOMICITY_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_GTHREAD_USE_WEAK: ::std::os::raw::c_uint = 1;
pub const __GTHREADS: ::std::os::raw::c_uint = 1;
pub const __GTHREADS_CXX0X: ::std::os::raw::c_uint = 1;
pub const _PTHREAD_H: ::std::os::raw::c_uint = 1;
pub const _ENDIAN_H: ::std::os::raw::c_uint = 1;
pub const __LITTLE_ENDIAN: ::std::os::raw::c_uint = 1234;
pub const __BIG_ENDIAN: ::std::os::raw::c_uint = 4321;
pub const __PDP_ENDIAN: ::std::os::raw::c_uint = 3412;
pub const __BYTE_ORDER: ::std::os::raw::c_uint = 1234;
pub const __FLOAT_WORD_ORDER: ::std::os::raw::c_uint = 1234;
pub const LITTLE_ENDIAN: ::std::os::raw::c_uint = 1234;
pub const BIG_ENDIAN: ::std::os::raw::c_uint = 4321;
pub const PDP_ENDIAN: ::std::os::raw::c_uint = 3412;
pub const BYTE_ORDER: ::std::os::raw::c_uint = 1234;
pub const _BITS_BYTESWAP_H: ::std::os::raw::c_uint = 1;
pub const _BITS_TYPES_H: ::std::os::raw::c_uint = 1;
pub const _BITS_TYPESIZES_H: ::std::os::raw::c_uint = 1;
pub const __OFF_T_MATCHES_OFF64_T: ::std::os::raw::c_uint = 1;
pub const __INO_T_MATCHES_INO64_T: ::std::os::raw::c_uint = 1;
pub const __FD_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const _SCHED_H: ::std::os::raw::c_uint = 1;
pub const __time_t_defined: ::std::os::raw::c_uint = 1;
pub const __timespec_defined: ::std::os::raw::c_uint = 1;
pub const SCHED_OTHER: ::std::os::raw::c_uint = 0;
pub const SCHED_FIFO: ::std::os::raw::c_uint = 1;
pub const SCHED_RR: ::std::os::raw::c_uint = 2;
pub const SCHED_BATCH: ::std::os::raw::c_uint = 3;
pub const SCHED_IDLE: ::std::os::raw::c_uint = 5;
pub const SCHED_RESET_ON_FORK: ::std::os::raw::c_uint = 1073741824;
pub const CSIGNAL: ::std::os::raw::c_uint = 255;
pub const CLONE_VM: ::std::os::raw::c_uint = 256;
pub const CLONE_FS: ::std::os::raw::c_uint = 512;
pub const CLONE_FILES: ::std::os::raw::c_uint = 1024;
pub const CLONE_SIGHAND: ::std::os::raw::c_uint = 2048;
pub const CLONE_PTRACE: ::std::os::raw::c_uint = 8192;
pub const CLONE_VFORK: ::std::os::raw::c_uint = 16384;
pub const CLONE_PARENT: ::std::os::raw::c_uint = 32768;
pub const CLONE_THREAD: ::std::os::raw::c_uint = 65536;
pub const CLONE_NEWNS: ::std::os::raw::c_uint = 131072;
pub const CLONE_SYSVSEM: ::std::os::raw::c_uint = 262144;
pub const CLONE_SETTLS: ::std::os::raw::c_uint = 524288;
pub const CLONE_PARENT_SETTID: ::std::os::raw::c_uint = 1048576;
pub const CLONE_CHILD_CLEARTID: ::std::os::raw::c_uint = 2097152;
pub const CLONE_DETACHED: ::std::os::raw::c_uint = 4194304;
pub const CLONE_UNTRACED: ::std::os::raw::c_uint = 8388608;
pub const CLONE_CHILD_SETTID: ::std::os::raw::c_uint = 16777216;
pub const CLONE_NEWCGROUP: ::std::os::raw::c_uint = 33554432;
pub const CLONE_NEWUTS: ::std::os::raw::c_uint = 67108864;
pub const CLONE_NEWIPC: ::std::os::raw::c_uint = 134217728;
pub const CLONE_NEWUSER: ::std::os::raw::c_uint = 268435456;
pub const CLONE_NEWPID: ::std::os::raw::c_uint = 536870912;
pub const CLONE_NEWNET: ::std::os::raw::c_uint = 1073741824;
pub const CLONE_IO: ::std::os::raw::c_uint = 2147483648;
pub const __defined_schedparam: ::std::os::raw::c_uint = 1;
pub const __CPU_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const CPU_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const _TIME_H: ::std::os::raw::c_uint = 1;
pub const _STRUCT_TIMEVAL: ::std::os::raw::c_uint = 1;
pub const _BITS_TIME_H: ::std::os::raw::c_uint = 1;
pub const CLOCK_REALTIME: ::std::os::raw::c_uint = 0;
pub const CLOCK_MONOTONIC: ::std::os::raw::c_uint = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: ::std::os::raw::c_uint = 2;
pub const CLOCK_THREAD_CPUTIME_ID: ::std::os::raw::c_uint = 3;
pub const CLOCK_MONOTONIC_RAW: ::std::os::raw::c_uint = 4;
pub const CLOCK_REALTIME_COARSE: ::std::os::raw::c_uint = 5;
pub const CLOCK_MONOTONIC_COARSE: ::std::os::raw::c_uint = 6;
pub const CLOCK_BOOTTIME: ::std::os::raw::c_uint = 7;
pub const CLOCK_REALTIME_ALARM: ::std::os::raw::c_uint = 8;
pub const CLOCK_BOOTTIME_ALARM: ::std::os::raw::c_uint = 9;
pub const CLOCK_TAI: ::std::os::raw::c_uint = 11;
pub const TIMER_ABSTIME: ::std::os::raw::c_uint = 1;
pub const _BITS_TIMEX_H: ::std::os::raw::c_uint = 1;
pub const ADJ_OFFSET: ::std::os::raw::c_uint = 1;
pub const ADJ_FREQUENCY: ::std::os::raw::c_uint = 2;
pub const ADJ_MAXERROR: ::std::os::raw::c_uint = 4;
pub const ADJ_ESTERROR: ::std::os::raw::c_uint = 8;
pub const ADJ_STATUS: ::std::os::raw::c_uint = 16;
pub const ADJ_TIMECONST: ::std::os::raw::c_uint = 32;
pub const ADJ_TAI: ::std::os::raw::c_uint = 128;
pub const ADJ_SETOFFSET: ::std::os::raw::c_uint = 256;
pub const ADJ_MICRO: ::std::os::raw::c_uint = 4096;
pub const ADJ_NANO: ::std::os::raw::c_uint = 8192;
pub const ADJ_TICK: ::std::os::raw::c_uint = 16384;
pub const ADJ_OFFSET_SINGLESHOT: ::std::os::raw::c_uint = 32769;
pub const ADJ_OFFSET_SS_READ: ::std::os::raw::c_uint = 40961;
pub const MOD_OFFSET: ::std::os::raw::c_uint = 1;
pub const MOD_FREQUENCY: ::std::os::raw::c_uint = 2;
pub const MOD_MAXERROR: ::std::os::raw::c_uint = 4;
pub const MOD_ESTERROR: ::std::os::raw::c_uint = 8;
pub const MOD_STATUS: ::std::os::raw::c_uint = 16;
pub const MOD_TIMECONST: ::std::os::raw::c_uint = 32;
pub const MOD_CLKB: ::std::os::raw::c_uint = 16384;
pub const MOD_CLKA: ::std::os::raw::c_uint = 32769;
pub const MOD_TAI: ::std::os::raw::c_uint = 128;
pub const MOD_MICRO: ::std::os::raw::c_uint = 4096;
pub const MOD_NANO: ::std::os::raw::c_uint = 8192;
pub const STA_PLL: ::std::os::raw::c_uint = 1;
pub const STA_PPSFREQ: ::std::os::raw::c_uint = 2;
pub const STA_PPSTIME: ::std::os::raw::c_uint = 4;
pub const STA_FLL: ::std::os::raw::c_uint = 8;
pub const STA_INS: ::std::os::raw::c_uint = 16;
pub const STA_DEL: ::std::os::raw::c_uint = 32;
pub const STA_UNSYNC: ::std::os::raw::c_uint = 64;
pub const STA_FREQHOLD: ::std::os::raw::c_uint = 128;
pub const STA_PPSSIGNAL: ::std::os::raw::c_uint = 256;
pub const STA_PPSJITTER: ::std::os::raw::c_uint = 512;
pub const STA_PPSWANDER: ::std::os::raw::c_uint = 1024;
pub const STA_PPSERROR: ::std::os::raw::c_uint = 2048;
pub const STA_CLOCKERR: ::std::os::raw::c_uint = 4096;
pub const STA_NANO: ::std::os::raw::c_uint = 8192;
pub const STA_MODE: ::std::os::raw::c_uint = 16384;
pub const STA_CLK: ::std::os::raw::c_uint = 32768;
pub const STA_RONLY: ::std::os::raw::c_uint = 65280;
pub const __clock_t_defined: ::std::os::raw::c_uint = 1;
pub const __clockid_t_defined: ::std::os::raw::c_uint = 1;
pub const __timer_t_defined: ::std::os::raw::c_uint = 1;
pub const TIME_UTC: ::std::os::raw::c_uint = 1;
pub const _BITS_PTHREADTYPES_H: ::std::os::raw::c_uint = 1;
pub const __SIZEOF_PTHREAD_ATTR_T: ::std::os::raw::c_uint = 56;
pub const __SIZEOF_PTHREAD_MUTEX_T: ::std::os::raw::c_uint = 40;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_PTHREAD_COND_T: ::std::os::raw::c_uint = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_PTHREAD_RWLOCK_T: ::std::os::raw::c_uint = 56;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_PTHREAD_BARRIER_T: ::std::os::raw::c_uint = 32;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: ::std::os::raw::c_uint = 4;
pub const __have_pthread_attr_t: ::std::os::raw::c_uint = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: ::std::os::raw::c_uint = 1;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: ::std::os::raw::c_uint = 1;
pub const _BITS_SETJMP_H: ::std::os::raw::c_uint = 1;
pub const PTHREAD_ONCE_INIT: ::std::os::raw::c_uint = 0;
pub const PTHREAD_BARRIER_SERIAL_THREAD: ::std::os::raw::c_int = -1;
pub const __GTHREAD_HAS_COND: ::std::os::raw::c_uint = 1;
pub const __GTHREAD_ONCE_INIT: ::std::os::raw::c_uint = 0;
pub const _GLIBCXX_ATOMIC_WORD_H: ::std::os::raw::c_uint = 1;
pub const _CONCURRENCE_H: ::std::os::raw::c_uint = 1;
pub const _STL_FUNCTION_H: ::std::os::raw::c_uint = 1;
pub const __cpp_lib_transparent_operators: ::std::os::raw::c_uint = 201210;
pub const _BACKWARD_BINDERS_H: ::std::os::raw::c_uint = 1;
pub const _USES_ALLOCATOR_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_FUNCTIONAL: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_TUPLE: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_UTILITY: ::std::os::raw::c_uint = 1;
pub const _STL_RELOPS_H: ::std::os::raw::c_uint = 1;
pub const __cpp_lib_tuple_element_t: ::std::os::raw::c_uint = 201402;
pub const __cpp_lib_tuples_by_type: ::std::os::raw::c_uint = 201304;
pub const __cpp_lib_exchange_function: ::std::os::raw::c_uint = 201304;
pub const __cpp_lib_integer_sequence: ::std::os::raw::c_uint = 201304;
pub const _GLIBCXX_ARRAY: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_STDEXCEPT: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_STRING: ::std::os::raw::c_uint = 1;
pub const _CHAR_TRAITS_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_CSTDINT: ::std::os::raw::c_uint = 1;
pub const _STDINT_H: ::std::os::raw::c_uint = 1;
pub const INT8_MIN: ::std::os::raw::c_int = -128;
pub const INT16_MIN: ::std::os::raw::c_int = -32768;
pub const INT32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT8_MAX: ::std::os::raw::c_uint = 127;
pub const INT16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_LEAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_LEAST16_MIN: ::std::os::raw::c_int = -32768;
pub const INT_LEAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_LEAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_LEAST16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT_LEAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT_LEAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_LEAST16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT_LEAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_FAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_FAST16_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST32_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_FAST16_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const INT_FAST32_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINT_FAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_FAST16_MAX: ::std::os::raw::c_int = -1;
pub const UINT_FAST32_MAX: ::std::os::raw::c_int = -1;
pub const INTPTR_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INTPTR_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINTPTR_MAX: ::std::os::raw::c_int = -1;
pub const PTRDIFF_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const PTRDIFF_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const SIG_ATOMIC_MIN: ::std::os::raw::c_int = -2147483648;
pub const SIG_ATOMIC_MAX: ::std::os::raw::c_uint = 2147483647;
pub const SIZE_MAX: ::std::os::raw::c_int = -1;
pub const WINT_MIN: ::std::os::raw::c_uint = 0;
pub const WINT_MAX: ::std::os::raw::c_uint = 4294967295;
pub const _LOCALE_FWD_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_CXX_LOCALE_H: ::std::os::raw::c_uint = 1;
pub const _LOCALE_H: ::std::os::raw::c_uint = 1;
pub const _BITS_LOCALE_H: ::std::os::raw::c_uint = 1;
pub const __LC_CTYPE: ::std::os::raw::c_uint = 0;
pub const __LC_NUMERIC: ::std::os::raw::c_uint = 1;
pub const __LC_TIME: ::std::os::raw::c_uint = 2;
pub const __LC_COLLATE: ::std::os::raw::c_uint = 3;
pub const __LC_MONETARY: ::std::os::raw::c_uint = 4;
pub const __LC_MESSAGES: ::std::os::raw::c_uint = 5;
pub const __LC_ALL: ::std::os::raw::c_uint = 6;
pub const __LC_PAPER: ::std::os::raw::c_uint = 7;
pub const __LC_NAME: ::std::os::raw::c_uint = 8;
pub const __LC_ADDRESS: ::std::os::raw::c_uint = 9;
pub const __LC_TELEPHONE: ::std::os::raw::c_uint = 10;
pub const __LC_MEASUREMENT: ::std::os::raw::c_uint = 11;
pub const __LC_IDENTIFICATION: ::std::os::raw::c_uint = 12;
pub const LC_CTYPE: ::std::os::raw::c_uint = 0;
pub const LC_NUMERIC: ::std::os::raw::c_uint = 1;
pub const LC_TIME: ::std::os::raw::c_uint = 2;
pub const LC_COLLATE: ::std::os::raw::c_uint = 3;
pub const LC_MONETARY: ::std::os::raw::c_uint = 4;
pub const LC_MESSAGES: ::std::os::raw::c_uint = 5;
pub const LC_ALL: ::std::os::raw::c_uint = 6;
pub const LC_PAPER: ::std::os::raw::c_uint = 7;
pub const LC_NAME: ::std::os::raw::c_uint = 8;
pub const LC_ADDRESS: ::std::os::raw::c_uint = 9;
pub const LC_TELEPHONE: ::std::os::raw::c_uint = 10;
pub const LC_MEASUREMENT: ::std::os::raw::c_uint = 11;
pub const LC_IDENTIFICATION: ::std::os::raw::c_uint = 12;
pub const LC_CTYPE_MASK: ::std::os::raw::c_uint = 1;
pub const LC_NUMERIC_MASK: ::std::os::raw::c_uint = 2;
pub const LC_TIME_MASK: ::std::os::raw::c_uint = 4;
pub const LC_COLLATE_MASK: ::std::os::raw::c_uint = 8;
pub const LC_MONETARY_MASK: ::std::os::raw::c_uint = 16;
pub const LC_MESSAGES_MASK: ::std::os::raw::c_uint = 32;
pub const LC_PAPER_MASK: ::std::os::raw::c_uint = 128;
pub const LC_NAME_MASK: ::std::os::raw::c_uint = 256;
pub const LC_ADDRESS_MASK: ::std::os::raw::c_uint = 512;
pub const LC_TELEPHONE_MASK: ::std::os::raw::c_uint = 1024;
pub const LC_MEASUREMENT_MASK: ::std::os::raw::c_uint = 2048;
pub const LC_IDENTIFICATION_MASK: ::std::os::raw::c_uint = 4096;
pub const LC_ALL_MASK: ::std::os::raw::c_uint = 8127;
pub const _GLIBCXX_CLOCALE: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_C_LOCALE_GNU: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_NUM_CATEGORIES: ::std::os::raw::c_uint = 6;
pub const _CTYPE_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_CCTYPE: ::std::os::raw::c_uint = 1;
pub const _OSTREAM_INSERT_H: ::std::os::raw::c_uint = 1;
pub const _CXXABI_FORCED_H: ::std::os::raw::c_uint = 1;
pub const _BASIC_STRING_H: ::std::os::raw::c_uint = 1;
pub const _STRING_CONVERSIONS_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_CSTDLIB: ::std::os::raw::c_uint = 1;
pub const _STDLIB_H: ::std::os::raw::c_uint = 1;
pub const WNOHANG: ::std::os::raw::c_uint = 1;
pub const WUNTRACED: ::std::os::raw::c_uint = 2;
pub const WSTOPPED: ::std::os::raw::c_uint = 2;
pub const WEXITED: ::std::os::raw::c_uint = 4;
pub const WCONTINUED: ::std::os::raw::c_uint = 8;
pub const WNOWAIT: ::std::os::raw::c_uint = 16777216;
pub const __WNOTHREAD: ::std::os::raw::c_uint = 536870912;
pub const __WALL: ::std::os::raw::c_uint = 1073741824;
pub const __WCLONE: ::std::os::raw::c_uint = 2147483648;
pub const __ENUM_IDTYPE_T: ::std::os::raw::c_uint = 1;
pub const __W_CONTINUED: ::std::os::raw::c_uint = 65535;
pub const __WCOREFLAG: ::std::os::raw::c_uint = 128;
pub const __ldiv_t_defined: ::std::os::raw::c_uint = 1;
pub const __lldiv_t_defined: ::std::os::raw::c_uint = 1;
pub const RAND_MAX: ::std::os::raw::c_uint = 2147483647;
pub const EXIT_FAILURE: ::std::os::raw::c_uint = 1;
pub const EXIT_SUCCESS: ::std::os::raw::c_uint = 0;
pub const _SYS_TYPES_H: ::std::os::raw::c_uint = 1;
pub const __BIT_TYPES_DEFINED__: ::std::os::raw::c_uint = 1;
pub const _SYS_SELECT_H: ::std::os::raw::c_uint = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\x00";
pub const _SIGSET_H_types: ::std::os::raw::c_uint = 1;
pub const FD_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const _SYS_SYSMACROS_H: ::std::os::raw::c_uint = 1;
pub const _ALLOCA_H: ::std::os::raw::c_uint = 1;
pub const _STDIO_H: ::std::os::raw::c_uint = 1;
pub const _G_config_h: ::std::os::raw::c_uint = 1;
pub const _G_HAVE_MMAP: ::std::os::raw::c_uint = 1;
pub const _G_HAVE_MREMAP: ::std::os::raw::c_uint = 1;
pub const _G_IO_IO_FILE_VERSION: ::std::os::raw::c_uint = 131073;
pub const _G_BUFSIZ: ::std::os::raw::c_uint = 8192;
pub const _IO_BUFSIZ: ::std::os::raw::c_uint = 8192;
pub const _IO_UNIFIED_JUMPTABLES: ::std::os::raw::c_uint = 1;
pub const EOF: ::std::os::raw::c_int = -1;
pub const _IOS_INPUT: ::std::os::raw::c_uint = 1;
pub const _IOS_OUTPUT: ::std::os::raw::c_uint = 2;
pub const _IOS_ATEND: ::std::os::raw::c_uint = 4;
pub const _IOS_APPEND: ::std::os::raw::c_uint = 8;
pub const _IOS_TRUNC: ::std::os::raw::c_uint = 16;
pub const _IOS_NOCREATE: ::std::os::raw::c_uint = 32;
pub const _IOS_NOREPLACE: ::std::os::raw::c_uint = 64;
pub const _IOS_BIN: ::std::os::raw::c_uint = 128;
pub const _IO_MAGIC: ::std::os::raw::c_uint = 4222418944;
pub const _OLD_STDIO_MAGIC: ::std::os::raw::c_uint = 4206624768;
pub const _IO_MAGIC_MASK: ::std::os::raw::c_uint = 4294901760;
pub const _IO_USER_BUF: ::std::os::raw::c_uint = 1;
pub const _IO_UNBUFFERED: ::std::os::raw::c_uint = 2;
pub const _IO_NO_READS: ::std::os::raw::c_uint = 4;
pub const _IO_NO_WRITES: ::std::os::raw::c_uint = 8;
pub const _IO_EOF_SEEN: ::std::os::raw::c_uint = 16;
pub const _IO_ERR_SEEN: ::std::os::raw::c_uint = 32;
pub const _IO_DELETE_DONT_CLOSE: ::std::os::raw::c_uint = 64;
pub const _IO_LINKED: ::std::os::raw::c_uint = 128;
pub const _IO_IN_BACKUP: ::std::os::raw::c_uint = 256;
pub const _IO_LINE_BUF: ::std::os::raw::c_uint = 512;
pub const _IO_TIED_PUT_GET: ::std::os::raw::c_uint = 1024;
pub const _IO_CURRENTLY_PUTTING: ::std::os::raw::c_uint = 2048;
pub const _IO_IS_APPENDING: ::std::os::raw::c_uint = 4096;
pub const _IO_IS_FILEBUF: ::std::os::raw::c_uint = 8192;
pub const _IO_BAD_SEEN: ::std::os::raw::c_uint = 16384;
pub const _IO_USER_LOCK: ::std::os::raw::c_uint = 32768;
pub const _IO_FLAGS2_MMAP: ::std::os::raw::c_uint = 1;
pub const _IO_FLAGS2_NOTCANCEL: ::std::os::raw::c_uint = 2;
pub const _IO_FLAGS2_USER_WBUF: ::std::os::raw::c_uint = 8;
pub const _IO_SKIPWS: ::std::os::raw::c_uint = 1;
pub const _IO_LEFT: ::std::os::raw::c_uint = 2;
pub const _IO_RIGHT: ::std::os::raw::c_uint = 4;
pub const _IO_INTERNAL: ::std::os::raw::c_uint = 8;
pub const _IO_DEC: ::std::os::raw::c_uint = 16;
pub const _IO_OCT: ::std::os::raw::c_uint = 32;
pub const _IO_HEX: ::std::os::raw::c_uint = 64;
pub const _IO_SHOWBASE: ::std::os::raw::c_uint = 128;
pub const _IO_SHOWPOINT: ::std::os::raw::c_uint = 256;
pub const _IO_UPPERCASE: ::std::os::raw::c_uint = 512;
pub const _IO_SHOWPOS: ::std::os::raw::c_uint = 1024;
pub const _IO_SCIENTIFIC: ::std::os::raw::c_uint = 2048;
pub const _IO_FIXED: ::std::os::raw::c_uint = 4096;
pub const _IO_UNITBUF: ::std::os::raw::c_uint = 8192;
pub const _IO_STDIO: ::std::os::raw::c_uint = 16384;
pub const _IO_DONT_CLOSE: ::std::os::raw::c_uint = 32768;
pub const _IO_BOOLALPHA: ::std::os::raw::c_uint = 65536;
pub const _IOFBF: ::std::os::raw::c_uint = 0;
pub const _IOLBF: ::std::os::raw::c_uint = 1;
pub const _IONBF: ::std::os::raw::c_uint = 2;
pub const BUFSIZ: ::std::os::raw::c_uint = 8192;
pub const SEEK_SET: ::std::os::raw::c_uint = 0;
pub const SEEK_CUR: ::std::os::raw::c_uint = 1;
pub const SEEK_END: ::std::os::raw::c_uint = 2;
pub const SEEK_DATA: ::std::os::raw::c_uint = 3;
pub const SEEK_HOLE: ::std::os::raw::c_uint = 4;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\x00";
pub const L_tmpnam: ::std::os::raw::c_uint = 20;
pub const TMP_MAX: ::std::os::raw::c_uint = 238328;
pub const FILENAME_MAX: ::std::os::raw::c_uint = 4096;
pub const L_ctermid: ::std::os::raw::c_uint = 9;
pub const L_cuserid: ::std::os::raw::c_uint = 9;
pub const FOPEN_MAX: ::std::os::raw::c_uint = 16;
pub const _GLIBCXX_CSTDIO: ::std::os::raw::c_uint = 1;
pub const _ERRNO_H: ::std::os::raw::c_uint = 1;
pub const EPERM: ::std::os::raw::c_uint = 1;
pub const ENOENT: ::std::os::raw::c_uint = 2;
pub const ESRCH: ::std::os::raw::c_uint = 3;
pub const EINTR: ::std::os::raw::c_uint = 4;
pub const EIO: ::std::os::raw::c_uint = 5;
pub const ENXIO: ::std::os::raw::c_uint = 6;
pub const E2BIG: ::std::os::raw::c_uint = 7;
pub const ENOEXEC: ::std::os::raw::c_uint = 8;
pub const EBADF: ::std::os::raw::c_uint = 9;
pub const ECHILD: ::std::os::raw::c_uint = 10;
pub const EAGAIN: ::std::os::raw::c_uint = 11;
pub const ENOMEM: ::std::os::raw::c_uint = 12;
pub const EACCES: ::std::os::raw::c_uint = 13;
pub const EFAULT: ::std::os::raw::c_uint = 14;
pub const ENOTBLK: ::std::os::raw::c_uint = 15;
pub const EBUSY: ::std::os::raw::c_uint = 16;
pub const EEXIST: ::std::os::raw::c_uint = 17;
pub const EXDEV: ::std::os::raw::c_uint = 18;
pub const ENODEV: ::std::os::raw::c_uint = 19;
pub const ENOTDIR: ::std::os::raw::c_uint = 20;
pub const EISDIR: ::std::os::raw::c_uint = 21;
pub const EINVAL: ::std::os::raw::c_uint = 22;
pub const ENFILE: ::std::os::raw::c_uint = 23;
pub const EMFILE: ::std::os::raw::c_uint = 24;
pub const ENOTTY: ::std::os::raw::c_uint = 25;
pub const ETXTBSY: ::std::os::raw::c_uint = 26;
pub const EFBIG: ::std::os::raw::c_uint = 27;
pub const ENOSPC: ::std::os::raw::c_uint = 28;
pub const ESPIPE: ::std::os::raw::c_uint = 29;
pub const EROFS: ::std::os::raw::c_uint = 30;
pub const EMLINK: ::std::os::raw::c_uint = 31;
pub const EPIPE: ::std::os::raw::c_uint = 32;
pub const EDOM: ::std::os::raw::c_uint = 33;
pub const ERANGE: ::std::os::raw::c_uint = 34;
pub const EDEADLK: ::std::os::raw::c_uint = 35;
pub const ENAMETOOLONG: ::std::os::raw::c_uint = 36;
pub const ENOLCK: ::std::os::raw::c_uint = 37;
pub const ENOSYS: ::std::os::raw::c_uint = 38;
pub const ENOTEMPTY: ::std::os::raw::c_uint = 39;
pub const ELOOP: ::std::os::raw::c_uint = 40;
pub const EWOULDBLOCK: ::std::os::raw::c_uint = 11;
pub const ENOMSG: ::std::os::raw::c_uint = 42;
pub const EIDRM: ::std::os::raw::c_uint = 43;
pub const ECHRNG: ::std::os::raw::c_uint = 44;
pub const EL2NSYNC: ::std::os::raw::c_uint = 45;
pub const EL3HLT: ::std::os::raw::c_uint = 46;
pub const EL3RST: ::std::os::raw::c_uint = 47;
pub const ELNRNG: ::std::os::raw::c_uint = 48;
pub const EUNATCH: ::std::os::raw::c_uint = 49;
pub const ENOCSI: ::std::os::raw::c_uint = 50;
pub const EL2HLT: ::std::os::raw::c_uint = 51;
pub const EBADE: ::std::os::raw::c_uint = 52;
pub const EBADR: ::std::os::raw::c_uint = 53;
pub const EXFULL: ::std::os::raw::c_uint = 54;
pub const ENOANO: ::std::os::raw::c_uint = 55;
pub const EBADRQC: ::std::os::raw::c_uint = 56;
pub const EBADSLT: ::std::os::raw::c_uint = 57;
pub const EDEADLOCK: ::std::os::raw::c_uint = 35;
pub const EBFONT: ::std::os::raw::c_uint = 59;
pub const ENOSTR: ::std::os::raw::c_uint = 60;
pub const ENODATA: ::std::os::raw::c_uint = 61;
pub const ETIME: ::std::os::raw::c_uint = 62;
pub const ENOSR: ::std::os::raw::c_uint = 63;
pub const ENONET: ::std::os::raw::c_uint = 64;
pub const ENOPKG: ::std::os::raw::c_uint = 65;
pub const EREMOTE: ::std::os::raw::c_uint = 66;
pub const ENOLINK: ::std::os::raw::c_uint = 67;
pub const EADV: ::std::os::raw::c_uint = 68;
pub const ESRMNT: ::std::os::raw::c_uint = 69;
pub const ECOMM: ::std::os::raw::c_uint = 70;
pub const EPROTO: ::std::os::raw::c_uint = 71;
pub const EMULTIHOP: ::std::os::raw::c_uint = 72;
pub const EDOTDOT: ::std::os::raw::c_uint = 73;
pub const EBADMSG: ::std::os::raw::c_uint = 74;
pub const EOVERFLOW: ::std::os::raw::c_uint = 75;
pub const ENOTUNIQ: ::std::os::raw::c_uint = 76;
pub const EBADFD: ::std::os::raw::c_uint = 77;
pub const EREMCHG: ::std::os::raw::c_uint = 78;
pub const ELIBACC: ::std::os::raw::c_uint = 79;
pub const ELIBBAD: ::std::os::raw::c_uint = 80;
pub const ELIBSCN: ::std::os::raw::c_uint = 81;
pub const ELIBMAX: ::std::os::raw::c_uint = 82;
pub const ELIBEXEC: ::std::os::raw::c_uint = 83;
pub const EILSEQ: ::std::os::raw::c_uint = 84;
pub const ERESTART: ::std::os::raw::c_uint = 85;
pub const ESTRPIPE: ::std::os::raw::c_uint = 86;
pub const EUSERS: ::std::os::raw::c_uint = 87;
pub const ENOTSOCK: ::std::os::raw::c_uint = 88;
pub const EDESTADDRREQ: ::std::os::raw::c_uint = 89;
pub const EMSGSIZE: ::std::os::raw::c_uint = 90;
pub const EPROTOTYPE: ::std::os::raw::c_uint = 91;
pub const ENOPROTOOPT: ::std::os::raw::c_uint = 92;
pub const EPROTONOSUPPORT: ::std::os::raw::c_uint = 93;
pub const ESOCKTNOSUPPORT: ::std::os::raw::c_uint = 94;
pub const EOPNOTSUPP: ::std::os::raw::c_uint = 95;
pub const EPFNOSUPPORT: ::std::os::raw::c_uint = 96;
pub const EAFNOSUPPORT: ::std::os::raw::c_uint = 97;
pub const EADDRINUSE: ::std::os::raw::c_uint = 98;
pub const EADDRNOTAVAIL: ::std::os::raw::c_uint = 99;
pub const ENETDOWN: ::std::os::raw::c_uint = 100;
pub const ENETUNREACH: ::std::os::raw::c_uint = 101;
pub const ENETRESET: ::std::os::raw::c_uint = 102;
pub const ECONNABORTED: ::std::os::raw::c_uint = 103;
pub const ECONNRESET: ::std::os::raw::c_uint = 104;
pub const ENOBUFS: ::std::os::raw::c_uint = 105;
pub const EISCONN: ::std::os::raw::c_uint = 106;
pub const ENOTCONN: ::std::os::raw::c_uint = 107;
pub const ESHUTDOWN: ::std::os::raw::c_uint = 108;
pub const ETOOMANYREFS: ::std::os::raw::c_uint = 109;
pub const ETIMEDOUT: ::std::os::raw::c_uint = 110;
pub const ECONNREFUSED: ::std::os::raw::c_uint = 111;
pub const EHOSTDOWN: ::std::os::raw::c_uint = 112;
pub const EHOSTUNREACH: ::std::os::raw::c_uint = 113;
pub const EALREADY: ::std::os::raw::c_uint = 114;
pub const EINPROGRESS: ::std::os::raw::c_uint = 115;
pub const ESTALE: ::std::os::raw::c_uint = 116;
pub const EUCLEAN: ::std::os::raw::c_uint = 117;
pub const ENOTNAM: ::std::os::raw::c_uint = 118;
pub const ENAVAIL: ::std::os::raw::c_uint = 119;
pub const EISNAM: ::std::os::raw::c_uint = 120;
pub const EREMOTEIO: ::std::os::raw::c_uint = 121;
pub const EDQUOT: ::std::os::raw::c_uint = 122;
pub const ENOMEDIUM: ::std::os::raw::c_uint = 123;
pub const EMEDIUMTYPE: ::std::os::raw::c_uint = 124;
pub const ECANCELED: ::std::os::raw::c_uint = 125;
pub const ENOKEY: ::std::os::raw::c_uint = 126;
pub const EKEYEXPIRED: ::std::os::raw::c_uint = 127;
pub const EKEYREVOKED: ::std::os::raw::c_uint = 128;
pub const EKEYREJECTED: ::std::os::raw::c_uint = 129;
pub const EOWNERDEAD: ::std::os::raw::c_uint = 130;
pub const ENOTRECOVERABLE: ::std::os::raw::c_uint = 131;
pub const ERFKILL: ::std::os::raw::c_uint = 132;
pub const EHWPOISON: ::std::os::raw::c_uint = 133;
pub const ENOTSUP: ::std::os::raw::c_uint = 95;
pub const __error_t_defined: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_CERRNO: ::std::os::raw::c_uint = 1;
pub const __cpp_lib_string_udls: ::std::os::raw::c_uint = 201304;
pub const _BASIC_STRING_TCC: ::std::os::raw::c_uint = 1;
pub const __cpp_lib_invoke: ::std::os::raw::c_uint = 201411;
pub const _UNIQUE_PTR_H: ::std::os::raw::c_uint = 1;
pub const __cpp_lib_make_unique: ::std::os::raw::c_uint = 201304;
pub const _SHARED_PTR_H: ::std::os::raw::c_uint = 1;
pub const _SHARED_PTR_BASE_H: ::std::os::raw::c_uint = 1;
pub const _ALLOCATED_PTR_H: ::std::os::raw::c_uint = 1;
pub const _ALIGNED_BUFFER_H: ::std::os::raw::c_uint = 1;
pub const _SHARED_PTR_ATOMIC_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_ATOMIC_BASE_H: ::std::os::raw::c_uint = 1;
pub const _BACKWARD_AUTO_PTR_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_EXPERIMENTAL_FILESYSTEM: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_EXPERIMENTAL_FS_FWD_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_SYSTEM_ERROR: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_ERROR_CONSTANTS: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_CHRONO: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_RATIO: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_NUMERIC_LIMITS: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_CTIME: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_PARSE_NUMBERS_H: ::std::os::raw::c_uint = 1;
pub const __cpp_lib_chrono_udls: ::std::os::raw::c_uint = 201304;
pub const _GLIBCXX_EXPERIMENTAL_FS_PATH_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_LOCALE: ::std::os::raw::c_uint = 1;
pub const _LOCALE_CLASSES_H: ::std::os::raw::c_uint = 1;
pub const _LOCALE_CLASSES_TCC: ::std::os::raw::c_uint = 1;
pub const _LOCALE_FACETS_H: ::std::os::raw::c_uint = 1;
pub const _WCTYPE_H: ::std::os::raw::c_uint = 1;
pub const __iswxxx_defined: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_CWCTYPE: ::std::os::raw::c_uint = 1;
pub const _IOS_BASE_H: ::std::os::raw::c_uint = 1;
pub const _GLIBXX_STREAMBUF: ::std::os::raw::c_uint = 1;
pub const _STREAMBUF_TCC: ::std::os::raw::c_uint = 1;
pub const _STREAMBUF_ITERATOR_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_NUM_FACETS: ::std::os::raw::c_uint = 28;
pub const _GLIBCXX_NUM_CXX11_FACETS: ::std::os::raw::c_uint = 16;
pub const _GLIBCXX_NUM_UNICODE_FACETS: ::std::os::raw::c_uint = 2;
pub const _LOCALE_FACETS_TCC: ::std::os::raw::c_uint = 1;
pub const _LOCALE_FACETS_NONIO_H: ::std::os::raw::c_uint = 1;
pub const _LIBINTL_H: ::std::os::raw::c_uint = 1;
pub const __USE_GNU_GETTEXT: ::std::os::raw::c_uint = 1;
pub const _CODECVT_H: ::std::os::raw::c_uint = 1;
pub const _LOCALE_FACETS_NONIO_TCC: ::std::os::raw::c_uint = 1;
pub const _LOCALE_CONV_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_CODECVT: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_QUOTED_STRING_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_SSTREAM: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_ISTREAM: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_IOS: ::std::os::raw::c_uint = 1;
pub const _BASIC_IOS_H: ::std::os::raw::c_uint = 1;
pub const _BASIC_IOS_TCC: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_OSTREAM: ::std::os::raw::c_uint = 1;
pub const _OSTREAM_TCC: ::std::os::raw::c_uint = 1;
pub const _ISTREAM_TCC: ::std::os::raw::c_uint = 1;
pub const _SSTREAM_TCC: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_EXPERIMENTAL_STRING_VIEW: ::std::os::raw::c_uint = 1;
pub const __cpp_lib_experimental_string_view: ::std::os::raw::c_uint = 201411;
pub const _GLIBCXX_EXPERIMENTAL_STRING_VIEW_TCC: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_EXPERIMENTAL_FS_DIR_H: ::std::os::raw::c_uint = 1;
pub const _GLIBCXX_EXPERIMENTAL_FS_OPS_H: ::std::os::raw::c_uint = 1;
pub const __cpp_lib_experimental_filesystem: ::std::os::raw::c_uint = 201406;
pub type std_nullptr_t = *const ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_string<_CharT> {
    pub _M_dataplus: std_basic_string__Alloc_hider,
    pub _M_string_length: std_basic_string_size_type,
    pub __bindgen_anon_1: std_basic_string__bindgen_ty_2<_CharT>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type std_basic_string__Char_alloc_type = __gnu_cxx___alloc_traits;
pub type std_basic_string__Alloc_traits = __gnu_cxx___alloc_traits;
pub type std_basic_string_traits_type<_Traits> = _Traits;
pub type std_basic_string_value_type = [u8; 0usize];
pub type std_basic_string_allocator_type = std_basic_string__Char_alloc_type;
pub type std_basic_string_size_type = std_basic_string__Alloc_traits;
pub type std_basic_string_difference_type = std_basic_string__Alloc_traits;
pub type std_basic_string_reference = std_basic_string__Alloc_traits;
pub type std_basic_string_const_reference = std_basic_string__Alloc_traits;
pub type std_basic_string_pointer = std_basic_string__Alloc_traits;
pub type std_basic_string_const_pointer = std_basic_string__Alloc_traits;
pub type std_basic_string_iterator =
    __gnu_cxx___normal_iterator<std_basic_string_pointer>;
pub type std_basic_string_const_iterator =
    __gnu_cxx___normal_iterator<std_basic_string_const_pointer>;
pub type std_basic_string_const_reverse_iterator =
    std_reverse_iterator<std_basic_string_const_iterator>;
pub type std_basic_string_reverse_iterator =
    std_reverse_iterator<std_basic_string_iterator>;
pub type std_basic_string___const_iterator = std_basic_string_const_iterator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_string__Alloc_hider {
    pub _M_p: std_basic_string_pointer,
}
pub const std_basic_string__S_local_capacity: std_basic_string__bindgen_ty_1 =
    std_basic_string__bindgen_ty_1::_S_local_capacity;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std_basic_string__bindgen_ty_1 { _S_local_capacity = 0, }
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_string__bindgen_ty_2<_CharT> {
    pub _M_local_buf: __BindgenUnionField<*mut _CharT>,
    pub _M_allocated_capacity: __BindgenUnionField<std_basic_string_size_type>,
    pub bindgen_union_field: u64,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type std_string = std_basic_string<::std::os::raw::c_char>;
pub type std_wstring = std_basic_string<u16>;
pub type std_u16string = std_basic_string<u16>;
pub type std_u32string = std_basic_string<u32>;
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_stringbuf<_CharT> {
    pub _base: std_basic_streambuf<_CharT>,
    pub _M_mode: std_ios_base_openmode,
    pub _M_string: std_basic_stringbuf___string_type<_CharT>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
#[repr(C)]
pub struct std_basic_stringbuf___xfer_bufptrs<_CharT> {
    pub _M_to: *mut std_basic_stringbuf<_CharT>,
    pub _M_goff: [std_basic_stringbuf_off_type; 3usize],
    pub _M_poff: [std_basic_stringbuf_off_type; 3usize],
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type std_basic_stringbuf_char_type<_CharT> = _CharT;
pub type std_basic_stringbuf_traits_type<_Traits> = _Traits;
pub type std_basic_stringbuf_allocator_type<_Alloc> = _Alloc;
pub type std_basic_stringbuf_int_type = [u8; 0usize];
pub type std_basic_stringbuf_pos_type = [u8; 0usize];
pub type std_basic_stringbuf_off_type = [u8; 0usize];
pub type std_basic_stringbuf___streambuf_type<_CharT> =
    std_basic_streambuf<std_basic_stringbuf_char_type<_CharT>>;
pub type std_basic_stringbuf___string_type<_CharT> =
    std_basic_string<std_basic_stringbuf_char_type<_CharT>>;
pub type std_basic_stringbuf___size_type<_CharT> =
    std_basic_stringbuf___string_type<_CharT>;
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_istringstream<_CharT> {
    pub _base: std_basic_istream<_CharT>,
    pub _M_stringbuf: std_basic_istringstream___stringbuf_type<_CharT>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type std_basic_istringstream_char_type<_CharT> = _CharT;
pub type std_basic_istringstream_traits_type<_Traits> = _Traits;
pub type std_basic_istringstream_allocator_type<_Alloc> = _Alloc;
pub type std_basic_istringstream_int_type = [u8; 0usize];
pub type std_basic_istringstream_pos_type = [u8; 0usize];
pub type std_basic_istringstream_off_type = [u8; 0usize];
pub type std_basic_istringstream___string_type<_CharT> =
    std_basic_string<_CharT>;
pub type std_basic_istringstream___stringbuf_type<_CharT> =
    std_basic_stringbuf<_CharT>;
pub type std_basic_istringstream___istream_type<_CharT> =
    std_basic_istream<std_basic_istringstream_char_type<_CharT>>;
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_ostringstream<_CharT> {
    pub _base: std_basic_ostream<_CharT>,
    pub _M_stringbuf: std_basic_ostringstream___stringbuf_type<_CharT>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type std_basic_ostringstream_char_type<_CharT> = _CharT;
pub type std_basic_ostringstream_traits_type<_Traits> = _Traits;
pub type std_basic_ostringstream_allocator_type<_Alloc> = _Alloc;
pub type std_basic_ostringstream_int_type = [u8; 0usize];
pub type std_basic_ostringstream_pos_type = [u8; 0usize];
pub type std_basic_ostringstream_off_type = [u8; 0usize];
pub type std_basic_ostringstream___string_type<_CharT> =
    std_basic_string<_CharT>;
pub type std_basic_ostringstream___stringbuf_type<_CharT> =
    std_basic_stringbuf<_CharT>;
pub type std_basic_ostringstream___ostream_type<_CharT> =
    std_basic_ostream<std_basic_ostringstream_char_type<_CharT>>;
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_stringstream<_CharT> {
    pub _base: std_basic_iostream<_CharT>,
    pub _M_stringbuf: std_basic_stringstream___stringbuf_type<_CharT>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type std_basic_stringstream_char_type<_CharT> = _CharT;
pub type std_basic_stringstream_traits_type<_Traits> = _Traits;
pub type std_basic_stringstream_allocator_type<_Alloc> = _Alloc;
pub type std_basic_stringstream_int_type = [u8; 0usize];
pub type std_basic_stringstream_pos_type = [u8; 0usize];
pub type std_basic_stringstream_off_type = [u8; 0usize];
pub type std_basic_stringstream___string_type<_CharT> =
    std_basic_string<_CharT>;
pub type std_basic_stringstream___stringbuf_type<_CharT> =
    std_basic_stringbuf<_CharT>;
pub type std_basic_stringstream___iostream_type<_CharT> =
    std_basic_iostream<std_basic_stringstream_char_type<_CharT>>;
#[repr(C)]
#[derive(Debug)]
pub struct std_numpunct<_CharT> {
    pub _base: std_locale_facet,
    pub _M_data: *mut std_numpunct___cache_type<_CharT>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type std_numpunct_char_type<_CharT> = _CharT;
pub type std_numpunct_string_type = std_basic_string<_CharT>;
pub type std_numpunct___cache_type<_CharT> = std___numpunct_cache<_CharT>;
#[repr(C)]
#[derive(Debug)]
pub struct std_numpunct_byname<_CharT> {
    pub _base: std_numpunct<_CharT>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type std_numpunct_byname_char_type<_CharT> = _CharT;
pub type std_numpunct_byname_string_type = std_basic_string<_CharT>;
#[repr(C)]
#[derive(Debug)]
pub struct std_collate {
    pub _base: std_locale_facet,
    pub _M_c_locale_collate: std___c_locale,
}
pub type std_collate_char_type<_CharT> = _CharT;
pub type std_collate_string_type = std_basic_string<_CharT>;
#[repr(C)]
#[derive(Debug)]
pub struct std_collate_byname {
    pub _base: std_collate,
}
pub type std_collate_byname_char_type<_CharT> = _CharT;
pub type std_collate_byname_string_type = std_basic_string<_CharT>;
#[repr(C)]
#[derive(Debug)]
pub struct std_time_get {
    pub _base: std_locale_facet,
}
pub type std_time_get_char_type<_CharT> = _CharT;
pub type std_time_get_iter_type<_InIter> = _InIter;
#[repr(C)]
#[derive(Debug)]
pub struct std_time_get_byname {
    pub _base: std_time_get,
}
pub type std_time_get_byname_char_type<_CharT> = _CharT;
pub type std_time_get_byname_iter_type<_InIter> = _InIter;
#[repr(C)]
#[derive(Debug)]
pub struct std_money_get {
    pub _base: std_locale_facet,
}
pub type std_money_get_char_type<_CharT> = _CharT;
pub type std_money_get_iter_type<_InIter> = _InIter;
pub type std_money_get_string_type = std_basic_string<_CharT>;
#[repr(C)]
#[derive(Debug)]
pub struct std_money_put {
    pub _base: std_locale_facet,
}
pub type std_money_put_char_type<_CharT> = _CharT;
pub type std_money_put_iter_type<_OutIter> = _OutIter;
pub type std_money_put_string_type = std_basic_string<_CharT>;
pub type std_moneypunct_char_type<_CharT> = _CharT;
pub type std_moneypunct_string_type = std_basic_string<_CharT>;
pub type std_moneypunct___cache_type = u8;
pub type std_moneypunct_byname_char_type<_CharT> = _CharT;
pub type std_moneypunct_byname_string_type = std_basic_string<_CharT>;
#[repr(C)]
#[derive(Debug)]
pub struct std_messages {
    pub _base: std_locale_facet,
    pub _M_c_locale_messages: std___c_locale,
    pub _M_name_messages: *const ::std::os::raw::c_char,
}
pub type std_messages_char_type<_CharT> = _CharT;
pub type std_messages_string_type = std_basic_string<_CharT>;
#[repr(C)]
#[derive(Debug)]
pub struct std_messages_byname {
    pub _base: std_messages,
}
pub type std_messages_byname_char_type<_CharT> = _CharT;
pub type std_messages_byname_string_type = std_basic_string<_CharT>;
extern "C" {
    #[link_name = "id"]
    pub static mut std_id: std_locale_id;
}
extern "C" {
    #[link_name = "intl"]
    pub static std_intl: bool;
}
#[repr(C)]
pub struct std_wstring_convert<_Elem> {
    pub _M_cvt: std_unique_ptr,
    pub _M_byte_err_string: std_wstring_convert_byte_string,
    pub _M_wide_err_string: std_wstring_convert_wide_string<_Elem>,
    pub _M_state: std_wstring_convert_state_type,
    pub _M_count: usize,
    pub _M_with_cvtstate: bool,
    pub _M_with_strings: bool,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Elem>>,
}
pub type std_wstring_convert_byte_string = std_basic_string<_CharT>;
pub type std_wstring_convert_wide_string<_Elem> = std_basic_string<_Elem>;
pub type std_wstring_convert_state_type = [u8; 0usize];
pub type std_wstring_convert_int_type<_Elem> =
    std_wstring_convert_wide_string<_Elem>;
extern "C" {
    #[link_name = "_ZSt21__throw_bad_exceptionv"]
    pub fn std___throw_bad_exception();
}
extern "C" {
    #[link_name = "_ZSt17__throw_bad_allocv"]
    pub fn std___throw_bad_alloc();
}
extern "C" {
    #[link_name = "_ZSt16__throw_bad_castv"]
    pub fn std___throw_bad_cast();
}
extern "C" {
    #[link_name = "_ZSt18__throw_bad_typeidv"]
    pub fn std___throw_bad_typeid();
}
extern "C" {
    #[link_name = "_ZSt19__throw_logic_errorPKc"]
    pub fn std___throw_logic_error(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "_ZSt20__throw_domain_errorPKc"]
    pub fn std___throw_domain_error(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "_ZSt24__throw_invalid_argumentPKc"]
    pub fn std___throw_invalid_argument(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "_ZSt20__throw_length_errorPKc"]
    pub fn std___throw_length_error(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "_ZSt20__throw_out_of_rangePKc"]
    pub fn std___throw_out_of_range(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "_ZSt24__throw_out_of_range_fmtPKcz"]
    pub fn std___throw_out_of_range_fmt(arg1:
                                            *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "_ZSt21__throw_runtime_errorPKc"]
    pub fn std___throw_runtime_error(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "_ZSt19__throw_range_errorPKc"]
    pub fn std___throw_range_error(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "_ZSt22__throw_overflow_errorPKc"]
    pub fn std___throw_overflow_error(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "_ZSt23__throw_underflow_errorPKc"]
    pub fn std___throw_underflow_error(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "_ZSt19__throw_ios_failurePKc"]
    pub fn std___throw_ios_failure(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "_ZSt20__throw_system_errori"]
    pub fn std___throw_system_error(arg1: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "_ZSt20__throw_future_errori"]
    pub fn std___throw_future_error(arg1: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "_ZSt25__throw_bad_function_callv"]
    pub fn std___throw_bad_function_call();
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___true_type {
    pub _address: u8,
}
impl Clone for std___true_type {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___false_type {
    pub _address: u8,
}
impl Clone for std___false_type {
    fn clone(&self) -> Self { *self }
}
pub type std___truth_type___type = std___false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___traitor {
    pub _address: u8,
}
pub const std___traitor___value: std___traitor__bindgen_ty_1 =
    std___traitor__bindgen_ty_1::__value;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std___traitor__bindgen_ty_1 { __value = 0, }
pub type std___traitor___type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___are_same {
    pub _address: u8,
}
pub const std___are_same___value: std___are_same__bindgen_ty_1 =
    std___are_same__bindgen_ty_1::__value;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std___are_same__bindgen_ty_1 { __value = 0, }
pub type std___are_same___type = std___false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_void {
    pub _address: u8,
}
pub const std___is_void___value: std___is_void__bindgen_ty_1 =
    std___is_void__bindgen_ty_1::__value;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std___is_void__bindgen_ty_1 { __value = 0, }
pub type std___is_void___type = std___false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_integer {
    pub _address: u8,
}
pub const std___is_integer___value: std___is_integer__bindgen_ty_1 =
    std___is_integer__bindgen_ty_1::__value;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std___is_integer__bindgen_ty_1 { __value = 0, }
pub type std___is_integer___type = std___false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_floating {
    pub _address: u8,
}
pub const std___is_floating___value: std___is_floating__bindgen_ty_1 =
    std___is_floating__bindgen_ty_1::__value;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std___is_floating__bindgen_ty_1 { __value = 0, }
pub type std___is_floating___type = std___false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_pointer {
    pub _address: u8,
}
pub const std___is_pointer___value: std___is_pointer__bindgen_ty_1 =
    std___is_pointer__bindgen_ty_1::__value;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std___is_pointer__bindgen_ty_1 { __value = 0, }
pub type std___is_pointer___type = std___false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_arithmetic {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_scalar {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_char {
    pub _address: u8,
}
pub const std___is_char___value: std___is_char__bindgen_ty_1 =
    std___is_char__bindgen_ty_1::__value;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std___is_char__bindgen_ty_1 { __value = 0, }
pub type std___is_char___type = std___false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_byte {
    pub _address: u8,
}
pub const std___is_byte___value: std___is_byte__bindgen_ty_1 =
    std___is_byte__bindgen_ty_1::__value;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std___is_byte__bindgen_ty_1 { __value = 0, }
pub type std___is_byte___type = std___false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_move_iterator {
    pub _address: u8,
}
pub const std___is_move_iterator___value: std___is_move_iterator__bindgen_ty_1
          =
    std___is_move_iterator__bindgen_ty_1::__value;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std___is_move_iterator__bindgen_ty_1 { __value = 0, }
pub type std___is_move_iterator___type = std___false_type;
pub type std_uint_least16_t = ::std::os::raw::c_ushort;
pub type std_uint_least32_t = ::std::os::raw::c_uint;
pub type std_integral_constant_value_type<_Tp> = _Tp;
pub type std_integral_constant_type = u8;
extern "C" {
    #[link_name = "value"]
    pub static std_value: _Tp;
}
pub type std_true_type = u8;
pub type std_false_type = u8;
pub type std___bool_constant = u8;
pub type std_bool_constant = u8;
pub type std_conditional_type<_Iftrue> = _Iftrue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___or_ {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___and_ {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___not_ {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std___nonesuch {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_conjunction {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_disjunction {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_negation {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___success_type {
    pub _address: u8,
}
pub type std___success_type_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___failure_type {
    pub _address: u8,
}
impl Clone for std___failure_type {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_cv {
    pub _address: u8,
}
pub type std_remove_cv_type = std_remove_const;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_void_helper {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_void {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_integral_helper {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_integral {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_floating_point_helper {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_floating_point {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_array {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_pointer_helper {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_lvalue_reference {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_rvalue_reference {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_function {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_member_object_pointer_helper {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_member_object_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_member_function_pointer_helper {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_member_function_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_enum {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_union {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_class {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_null_pointer_helper {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_null_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nullptr_t {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_reference {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_arithmetic {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_fundamental {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_object {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_member_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_scalar {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_compound {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_member_pointer_helper {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_referenceable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_const {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_volatile {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivial {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_copyable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_standard_layout {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_pod {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_literal_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_empty {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_polymorphic {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_final {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_abstract {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_signed {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_unsigned {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_rvalue_reference {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_all_extents {
    pub _address: u8,
}
pub type std_remove_all_extents_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_array_known_bounds {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_array_unknown_bounds {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___do_is_destructible_impl {
    pub _address: u8,
}
impl Clone for std___do_is_destructible_impl {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_destructible_impl {
    pub _address: u8,
}
pub type std___is_destructible_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_destructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___do_is_nt_destructible_impl {
    pub _address: u8,
}
impl Clone for std___do_is_nt_destructible_impl {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nt_destructible_impl {
    pub _address: u8,
}
pub type std___is_nt_destructible_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_destructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___do_is_default_constructible_impl {
    pub _address: u8,
}
impl Clone for std___do_is_default_constructible_impl {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_default_constructible_impl {
    pub _address: u8,
}
pub type std___is_default_constructible_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_default_constructible_atom {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_default_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___do_is_static_castable_impl {
    pub _address: u8,
}
impl Clone for std___do_is_static_castable_impl {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_static_castable_impl {
    pub _address: u8,
}
pub type std___is_static_castable_impl_type<_From> = _From;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_static_castable_safe {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_static_castable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___do_is_direct_constructible_impl {
    pub _address: u8,
}
impl Clone for std___do_is_direct_constructible_impl {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_direct_constructible_impl {
    pub _address: u8,
}
pub type std___is_direct_constructible_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_direct_constructible_new_safe {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_same {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_base_of {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_reference {
    pub _address: u8,
}
pub type std_remove_reference_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_direct_constructible_ref_cast {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_direct_constructible_new {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_direct_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___do_is_nary_constructible_impl {
    pub _address: u8,
}
impl Clone for std___do_is_nary_constructible_impl {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nary_constructible_impl {
    pub _address: u8,
}
pub type std___is_nary_constructible_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nary_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_constructible_impl {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_copy_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_move_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nt_default_constructible_atom {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_default_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nt_constructible_impl {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_copy_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_move_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_assignable_helper {
    pub _address: u8,
}
pub type std___is_assignable_helper_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_copy_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_move_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nt_assignable_impl {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_copy_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_move_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_default_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___do_is_implicitly_default_constructible_impl {
    pub _address: u8,
}
extern "C" {
    #[link_name =
          "_ZNSt45__do_is_implicitly_default_constructible_impl6__testEz"]
    pub fn std___do_is_implicitly_default_constructible_impl___test()
     -> std_false_type;
}
impl Clone for std___do_is_implicitly_default_constructible_impl {
    fn clone(&self) -> Self { *self }
}
impl std___do_is_implicitly_default_constructible_impl {
    #[inline]
    pub unsafe fn __test() -> std_false_type {
        std___do_is_implicitly_default_constructible_impl___test()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_implicitly_default_constructible_impl {
    pub _address: u8,
}
pub type std___is_implicitly_default_constructible_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_implicitly_default_constructible_safe {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_implicitly_default_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_copy_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_move_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_copy_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_move_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_destructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_has_trivial_default_constructor {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_has_trivial_copy_constructor {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_has_trivial_copy_assign {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_has_virtual_destructor {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_alignment_of {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_rank {
    pub _address: u8,
}
pub type std___is_convertible_helper_type = std_is_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_convertible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_const {
    pub _address: u8,
}
pub type std_remove_const_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_volatile {
    pub _address: u8,
}
pub type std_remove_volatile_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_const {
    pub _address: u8,
}
pub type std_add_const_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_volatile {
    pub _address: u8,
}
pub type std_add_volatile_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_cv {
    pub _address: u8,
}
pub type std_add_cv_type = std_add_const;
pub type std_remove_const_t = std_remove_const;
pub type std_remove_volatile_t = std_remove_volatile;
pub type std_remove_cv_t = std_remove_cv;
pub type std_add_const_t = std_add_const;
pub type std_add_volatile_t = std_add_volatile;
pub type std_add_cv_t = std_add_cv;
pub type std___add_lvalue_reference_helper_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_lvalue_reference {
    pub _address: u8,
}
pub type std___add_rvalue_reference_helper_type<_Tp> = _Tp;
pub type std_remove_reference_t = std_remove_reference;
pub type std_add_lvalue_reference_t = std_add_lvalue_reference;
pub type std_add_rvalue_reference_t = std_add_rvalue_reference;
pub type std___match_cv_qualifiers___match = u8;
pub type std___match_cv_qualifiers___type = std___match_cv_qualifiers___match;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___make_unsigned {
    pub _address: u8,
}
pub type std___make_unsigned___type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_make_unsigned {
    pub _address: u8,
}
pub type std_make_unsigned_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___make_signed {
    pub _address: u8,
}
pub type std___make_signed___type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_make_signed {
    pub _address: u8,
}
pub type std_make_signed_type = u8;
pub type std_make_signed_t = std_make_signed;
pub type std_make_unsigned_t = std_make_unsigned;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_extent {
    pub _address: u8,
}
pub type std_remove_extent_type<_Tp> = _Tp;
pub type std_remove_extent_t = std_remove_extent;
pub type std_remove_all_extents_t = std_remove_all_extents;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___remove_pointer_helper {
    pub _address: u8,
}
pub type std___remove_pointer_helper_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_pointer {
    pub _address: u8,
}
pub type std___add_pointer_helper_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_pointer {
    pub _address: u8,
}
pub type std_remove_pointer_t = std_remove_pointer;
pub type std_add_pointer_t = std_add_pointer;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___aligned_storage_msa___type {
    pub __data: __BindgenUnionField<*mut ::std::os::raw::c_uchar>,
    pub __align: __BindgenUnionField<std___aligned_storage_msa___type__bindgen_ty_1>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___aligned_storage_msa___type__bindgen_ty_1 {
    pub _address: u8,
}
impl Clone for std___aligned_storage_msa___type__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
impl Clone for std___aligned_storage_msa___type {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std_aligned_storage_type {
    pub __data: __BindgenUnionField<*mut ::std::os::raw::c_uchar>,
    pub __align: __BindgenUnionField<std_aligned_storage_type__bindgen_ty_1>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std_aligned_storage_type__bindgen_ty_1 {
    pub _address: u8,
}
impl Clone for std_aligned_storage_type__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
impl Clone for std_aligned_storage_type {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___strictest_alignment {
    pub _address: u8,
}
pub type std_aligned_union___strictest = std___strictest_alignment;
pub type std_aligned_union_type = u8;
extern "C" {
    #[link_name = "alignment_value"]
    pub static std_alignment_value: usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_decay {
    pub _address: u8,
}
pub type std_decay___remove_type = std_remove_reference;
pub type std_decay_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_reference_wrapper<_Tp> {
    pub _M_data: *mut _Tp,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
}
pub type std_reference_wrapper_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___strip_reference_wrapper {
    pub _address: u8,
}
pub type std___strip_reference_wrapper___type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___decay_and_strip {
    pub _address: u8,
}
pub type std___decay_and_strip___type = std___strip_reference_wrapper;
pub type std__Require = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_common_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___do_common_type_impl {
    pub _address: u8,
}
impl Clone for std___do_common_type_impl {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___common_type_impl {
    pub _address: u8,
}
pub type std___common_type_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___do_member_type_wrapper {
    pub _address: u8,
}
impl Clone for std___do_member_type_wrapper {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___member_type_wrapper {
    pub _address: u8,
}
pub type std___member_type_wrapper_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___expanded_common_type_wrapper {
    pub _address: u8,
}
pub type std___expanded_common_type_wrapper_type = std_common_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_underlying_type {
    pub _address: u8,
}
pub type std_underlying_type_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___declval_protector {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_result_of {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___invoke_memfun_ref {
    pub _address: u8,
}
impl Clone for std___invoke_memfun_ref {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___invoke_memfun_deref {
    pub _address: u8,
}
impl Clone for std___invoke_memfun_deref {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___invoke_memobj_ref {
    pub _address: u8,
}
impl Clone for std___invoke_memobj_ref {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___invoke_memobj_deref {
    pub _address: u8,
}
impl Clone for std___invoke_memobj_deref {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___invoke_other {
    pub _address: u8,
}
impl Clone for std___invoke_other {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_success {
    pub _address: u8,
}
pub type std___result_of_success___invoke_type<_Tag> = _Tag;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___result_of_memfun_ref_impl {
    pub _address: u8,
}
impl Clone for std___result_of_memfun_ref_impl {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memfun_ref {
    pub _address: u8,
}
pub type std___result_of_memfun_ref_type<_MemPtr> = _MemPtr;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___result_of_memfun_deref_impl {
    pub _address: u8,
}
impl Clone for std___result_of_memfun_deref_impl {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memfun_deref {
    pub _address: u8,
}
pub type std___result_of_memfun_deref_type<_MemPtr> = _MemPtr;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___result_of_memobj_ref_impl {
    pub _address: u8,
}
impl Clone for std___result_of_memobj_ref_impl {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memobj_ref {
    pub _address: u8,
}
pub type std___result_of_memobj_ref_type<_MemPtr> = _MemPtr;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___result_of_memobj_deref_impl {
    pub _address: u8,
}
impl Clone for std___result_of_memobj_deref_impl {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memobj_deref {
    pub _address: u8,
}
pub type std___result_of_memobj_deref_type<_MemPtr> = _MemPtr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memobj {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memfun {
    pub _address: u8,
}
pub type std___result_of_impl_type = std___failure_type;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___result_of_other_impl {
    pub _address: u8,
}
impl Clone for std___result_of_other_impl {
    fn clone(&self) -> Self { *self }
}
pub type std_aligned_storage_t = u8;
pub type std_aligned_union_t = u8;
pub type std_decay_t = std_decay;
pub type std_enable_if_t = u8;
pub type std_conditional_t = u8;
pub type std_common_type_t = std_common_type;
pub type std_underlying_type_t = std_underlying_type;
pub type std_result_of_t = std_result_of;
pub type std___void_t = ::std::os::raw::c_void;
pub type std_void_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detector {
    pub _address: u8,
}
pub type std___detector_value_t = std_false_type;
pub type std___detector_type<_Default> = _Default;
pub type std___detected_or = std___detector;
pub type std___detected_or_t = std___detected_or;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_swappable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nothrow_swappable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___swappable_details___do_is_swappable_impl {
    pub _address: u8,
}
impl Clone for std___swappable_details___do_is_swappable_impl {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___swappable_details___do_is_nothrow_swappable_impl {
    pub _address: u8,
}
impl Clone for std___swappable_details___do_is_nothrow_swappable_impl {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_swappable_impl {
    pub _address: u8,
}
pub type std___is_swappable_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nothrow_swappable_impl {
    pub _address: u8,
}
pub type std___is_nothrow_swappable_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___move_if_noexcept_cond {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std_piecewise_construct_t {
    pub _address: u8,
}
impl Clone for std_piecewise_construct_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "_ZStL19piecewise_construct"]
    pub static std_piecewise_construct: std_piecewise_construct_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_tuple {
    pub _address: u8,
}
pub type std_tuple__Inherited = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_tuple__TC2 {
    pub _address: u8,
}
pub type std_tuple__TCC = std___and_;
pub type std_tuple__TMC = std___and_;
pub type std_tuple__TNTC = std___and_;
#[repr(C)]
#[derive(Debug)]
pub struct std___wrap_nonesuch {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pair<_T1, _T2> {
    pub first: _T1,
    pub second: _T2,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_T1>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_T2>>,
}
pub type std_pair_first_type<_T1> = _T1;
pub type std_pair_second_type<_T2> = _T2;
pub type std_pair__PCCP = u8;
pub type std_pair__PCCFP = u8;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std_input_iterator_tag {
    pub _address: u8,
}
impl Clone for std_input_iterator_tag {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std_output_iterator_tag {
    pub _address: u8,
}
impl Clone for std_output_iterator_tag {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std_forward_iterator_tag {
    pub _address: u8,
}
impl Clone for std_forward_iterator_tag {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std_bidirectional_iterator_tag {
    pub _address: u8,
}
impl Clone for std_bidirectional_iterator_tag {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std_random_access_iterator_tag {
    pub _address: u8,
}
impl Clone for std_random_access_iterator_tag {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_iterator {
    pub _address: u8,
}
pub type std_iterator_iterator_category<_Category> = _Category;
pub type std_iterator_value_type<_Tp> = _Tp;
pub type std_iterator_difference_type<_Distance> = _Distance;
pub type std_iterator_pointer<_Pointer> = _Pointer;
pub type std_iterator_reference<_Reference> = _Reference;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___iterator_traits {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_iterator_traits {
    pub _address: u8,
}
pub type std__RequireInputIter = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__List_iterator {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__List_const_iterator {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___undefined {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___get_first_arg {
    pub _address: u8,
}
pub type std___get_first_arg_type = std___undefined;
pub type std___get_first_arg_t = std___get_first_arg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___replace_first_arg {
    pub _address: u8,
}
pub type std___replace_first_arg_t = std___replace_first_arg;
pub type std___make_not_void = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pointer_traits {
    pub _address: u8,
}
pub type std_pointer_traits___element_type = [u8; 0usize];
pub type std_pointer_traits___difference_type = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pointer_traits___rebind {
    pub _address: u8,
}
pub type std_pointer_traits_pointer<_Ptr> = _Ptr;
pub type std_pointer_traits_element_type = std___detected_or_t;
pub type std_pointer_traits_difference_type = std___detected_or_t;
pub type std_pointer_traits_rebind = std_pointer_traits___rebind;
pub type std___ptr_rebind = std_pointer_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_reverse_iterator<_Iterator> {
    pub current: _Iterator,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
}
pub type std_reverse_iterator___traits_type = std_iterator_traits;
pub type std_reverse_iterator_iterator_type<_Iterator> = _Iterator;
pub type std_reverse_iterator_difference_type =
    std_reverse_iterator___traits_type;
pub type std_reverse_iterator_pointer = std_reverse_iterator___traits_type;
pub type std_reverse_iterator_reference = std_reverse_iterator___traits_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_back_insert_iterator<_Container> {
    pub container: *mut _Container,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
}
pub type std_back_insert_iterator_container_type<_Container> = _Container;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_front_insert_iterator<_Container> {
    pub container: *mut _Container,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
}
pub type std_front_insert_iterator_container_type<_Container> = _Container;
#[repr(C)]
pub struct std_insert_iterator<_Container> {
    pub container: *mut _Container,
    pub iter: [u8; 0usize],
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
}
pub type std_insert_iterator_container_type<_Container> = _Container;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_move_iterator<_Iterator> {
    pub _M_current: _Iterator,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
}
pub type std_move_iterator___traits_type = std_iterator_traits;
pub type std_move_iterator___base_ref = std_move_iterator___traits_type;
pub type std_move_iterator_iterator_type<_Iterator> = _Iterator;
pub type std_move_iterator_iterator_category =
    std_move_iterator___traits_type;
pub type std_move_iterator_value_type = std_move_iterator___traits_type;
pub type std_move_iterator_difference_type = std_move_iterator___traits_type;
pub type std_move_iterator_pointer<_Iterator> = _Iterator;
pub type std_move_iterator_reference = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_char_traits {
    pub _address: u8,
}
#[repr(C)]
pub struct std_istreambuf_iterator<_CharT> {
    pub _M_sbuf: *mut std_istreambuf_iterator_streambuf_type<_CharT>,
    pub _M_c: std_istreambuf_iterator_int_type,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type std_istreambuf_iterator_char_type<_CharT> = _CharT;
pub type std_istreambuf_iterator_traits_type<_Traits> = _Traits;
pub type std_istreambuf_iterator_int_type = [u8; 0usize];
pub type std_istreambuf_iterator_streambuf_type<_CharT> =
    std_basic_streambuf<_CharT>;
pub type std_istreambuf_iterator_istream_type<_CharT> =
    std_basic_istream<_CharT>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ostreambuf_iterator<_CharT> {
    pub _M_sbuf: *mut std_ostreambuf_iterator_streambuf_type<_CharT>,
    pub _M_failed: bool,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type std_ostreambuf_iterator_char_type<_CharT> = _CharT;
pub type std_ostreambuf_iterator_traits_type<_Traits> = _Traits;
pub type std_ostreambuf_iterator_streambuf_type<_CharT> =
    std_basic_streambuf<_CharT>;
pub type std_ostreambuf_iterator_ostream_type<_CharT> =
    std_basic_ostream<_CharT>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___lc_rai {
    pub _address: u8,
}
#[repr(C)]
pub struct std_exception__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_exception {
    pub vtable_: *const std_exception__bindgen_vtable,
}
extern "C" {
    #[link_name = "_ZNSt9exceptionD0Ev"]
    pub fn std_exception_exception_destructor(this: *mut std_exception);
}
extern "C" {
    #[link_name = "_ZNKSt9exception4whatEv"]
    pub fn std_exception_what(this: *mut ::std::os::raw::c_void)
     -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_exception {
    pub _base: std_exception,
}
extern "C" {
    #[link_name = "_ZNSt13bad_exceptionD0Ev"]
    pub fn std_bad_exception_bad_exception_destructor(this:
                                                          *mut std_bad_exception);
}
extern "C" {
    #[link_name = "_ZNKSt13bad_exception4whatEv"]
    pub fn std_bad_exception_what(this: *mut ::std::os::raw::c_void)
     -> *const ::std::os::raw::c_char;
}
pub type std_terminate_handler =
    ::std::option::Option<unsafe extern "C" fn()>;
pub type std_unexpected_handler =
    ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    #[link_name = "_ZSt13set_terminatePFvvE"]
    pub fn std_set_terminate(arg1: std_terminate_handler)
     -> std_terminate_handler;
}
extern "C" {
    #[link_name = "_ZSt13get_terminatev"]
    pub fn std_get_terminate() -> std_terminate_handler;
}
extern "C" {
    #[link_name = "_ZSt9terminatev"]
    pub fn std_terminate();
}
extern "C" {
    #[link_name = "_ZSt14set_unexpectedPFvvE"]
    pub fn std_set_unexpected(arg1: std_unexpected_handler)
     -> std_unexpected_handler;
}
extern "C" {
    #[link_name = "_ZSt14get_unexpectedv"]
    pub fn std_get_unexpected() -> std_unexpected_handler;
}
extern "C" {
    #[link_name = "_ZSt10unexpectedv"]
    pub fn std_unexpected();
}
extern "C" {
    #[link_name = "_ZSt18uncaught_exceptionv"]
    pub fn std_uncaught_exception() -> bool;
}
extern "C" {
    #[link_name = "_ZSt19uncaught_exceptionsv"]
    pub fn std_uncaught_exceptions() -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct std_type_info__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_type_info {
    pub vtable_: *const std_type_info__bindgen_vtable,
    pub __name: *const ::std::os::raw::c_char,
}
extern "C" {
    #[link_name = "_ZNSt9type_infoD0Ev"]
    pub fn std_type_info_type_info_destructor(this: *mut std_type_info);
}
extern "C" {
    #[link_name = "_ZNKSt9type_info14__is_pointer_pEv"]
    pub fn std_type_info___is_pointer_p(this: *mut ::std::os::raw::c_void)
     -> bool;
}
extern "C" {
    #[link_name = "_ZNKSt9type_info15__is_function_pEv"]
    pub fn std_type_info___is_function_p(this: *mut ::std::os::raw::c_void)
     -> bool;
}
extern "C" {
    #[link_name = "_ZNKSt9type_info10__do_catchEPKS_PPvj"]
    pub fn std_type_info___do_catch(this: *mut ::std::os::raw::c_void,
                                    __thr_type: *const std_type_info,
                                    __thr_obj:
                                        *mut *mut ::std::os::raw::c_void,
                                    __outer: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    #[link_name =
          "_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv"]
    pub fn std_type_info___do_upcast(this: *mut ::std::os::raw::c_void,
                                     __target:
                                         *const __cxxabiv1___class_type_info,
                                     __obj_ptr:
                                         *mut *mut ::std::os::raw::c_void)
     -> bool;
}
#[repr(C)]
#[derive(Debug)]
pub struct std___exception_ptr_exception_ptr {
    pub _M_exception_object: *mut ::std::os::raw::c_void,
}
extern "C" {
    #[link_name = "_ZNSt15__exception_ptr13exception_ptr4swapERS0_"]
    pub fn std___exception_ptr_exception_ptr_swap(this:
                                                      *mut std___exception_ptr_exception_ptr,
                                                  arg1:
                                                      *mut std___exception_ptr_exception_ptr);
}
extern "C" {
    #[link_name =
          "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv"]
    pub fn std___exception_ptr_exception_ptr___cxa_exception_type(this:
                                                                      *const std___exception_ptr_exception_ptr)
     -> *const std_type_info;
}
extern "C" {
    #[link_name = "_ZNSt15__exception_ptr13exception_ptrC1Ev"]
    pub fn std___exception_ptr_exception_ptr_exception_ptr(this:
                                                               *mut std___exception_ptr_exception_ptr);
}
extern "C" {
    #[link_name = "_ZNSt15__exception_ptr13exception_ptrC1ERKS0_"]
    pub fn std___exception_ptr_exception_ptr_exception_ptr1(this:
                                                                *mut std___exception_ptr_exception_ptr,
                                                            arg1:
                                                                *const std___exception_ptr_exception_ptr);
}
extern "C" {
    #[link_name = "_ZNSt15__exception_ptr13exception_ptrD1Ev"]
    pub fn std___exception_ptr_exception_ptr_exception_ptr_destructor(this:
                                                                          *mut std___exception_ptr_exception_ptr);
}
impl std___exception_ptr_exception_ptr {
    #[inline]
    pub unsafe fn swap(&mut self,
                       arg1: *mut std___exception_ptr_exception_ptr) {
        std___exception_ptr_exception_ptr_swap(self, arg1)
    }
    #[inline]
    pub unsafe fn __cxa_exception_type(&self) -> *const std_type_info {
        std___exception_ptr_exception_ptr___cxa_exception_type(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std___exception_ptr_exception_ptr_exception_ptr(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(arg1: *const std___exception_ptr_exception_ptr)
     -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std___exception_ptr_exception_ptr_exception_ptr1(&mut __bindgen_tmp,
                                                         arg1);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std___exception_ptr_exception_ptr_exception_ptr_destructor(self)
    }
}
extern "C" {
    #[link_name = "_ZSt17current_exceptionv"]
    pub fn std_current_exception() -> std___exception_ptr_exception_ptr;
}
extern "C" {
    #[link_name =
          "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE"]
    pub fn std_rethrow_exception(arg1: std___exception_ptr_exception_ptr);
}
#[repr(C)]
pub struct std_nested_exception__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_nested_exception {
    pub vtable_: *const std_nested_exception__bindgen_vtable,
    pub _M_ptr: std___exception_ptr_exception_ptr,
}
extern "C" {
    #[link_name = "_ZNSt16nested_exceptionD0Ev"]
    pub fn std_nested_exception_nested_exception_destructor(this:
                                                                *mut std_nested_exception);
}
#[repr(C)]
#[derive(Debug)]
pub struct std__Nested_exception<_Except> {
    pub _base: _Except,
    pub _base_1: std_nested_exception,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Except>>,
}
pub type std___rethrow_if_nested_cond = u8;
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_alloc {
    pub _base: std_exception,
}
extern "C" {
    #[link_name = "_ZNSt9bad_allocD0Ev"]
    pub fn std_bad_alloc_bad_alloc_destructor(this: *mut std_bad_alloc);
}
extern "C" {
    #[link_name = "_ZNKSt9bad_alloc4whatEv"]
    pub fn std_bad_alloc_what(this: *mut ::std::os::raw::c_void)
     -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_array_new_length {
    pub _base: std_bad_alloc,
}
extern "C" {
    #[link_name = "_ZNSt20bad_array_new_lengthD0Ev"]
    pub fn std_bad_array_new_length_bad_array_new_length_destructor(this:
                                                                        *mut std_bad_array_new_length);
}
extern "C" {
    #[link_name = "_ZNKSt20bad_array_new_length4whatEv"]
    pub fn std_bad_array_new_length_what(this: *mut ::std::os::raw::c_void)
     -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std_nothrow_t {
    pub _address: u8,
}
impl Clone for std_nothrow_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "_ZSt7nothrow"]
    pub static std_nothrow: std_nothrow_t;
}
pub type std_new_handler = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    #[link_name = "_ZSt15set_new_handlerPFvvE"]
    pub fn std_set_new_handler(arg1: std_new_handler) -> std_new_handler;
}
extern "C" {
    #[link_name = "_ZSt15get_new_handlerv"]
    pub fn std_get_new_handler() -> std_new_handler;
}
pub type std___allocator_base = __gnu_cxx_new_allocator;
#[repr(C)]
#[derive(Debug)]
pub struct std_allocator {
    pub _address: u8,
}
pub type std_allocator_size_type = usize;
pub type std_allocator_difference_type = isize;
pub type std_allocator_pointer<_Tp> = *mut _Tp;
pub type std_allocator_const_pointer<_Tp> = *mut _Tp;
pub type std_allocator_reference<_Tp> = *mut _Tp;
pub type std_allocator_const_reference<_Tp> = *mut _Tp;
pub type std_allocator_value_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_rebind {
    pub _address: u8,
}
pub type std_allocator_rebind_other = std_allocator;
pub type std_allocator_propagate_on_container_move_assignment = std_true_type;
pub type std_allocator_is_always_equal = std_true_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_uses_allocator {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___allocator_traits_base {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___allocator_traits_base___rebind {
    pub _address: u8,
}
pub type std___allocator_traits_base___pointer = [u8; 0usize];
pub type std___allocator_traits_base___c_pointer = [u8; 0usize];
pub type std___allocator_traits_base___v_pointer = [u8; 0usize];
pub type std___allocator_traits_base___cv_pointer = [u8; 0usize];
pub type std___allocator_traits_base___pocca = [u8; 0usize];
pub type std___allocator_traits_base___pocma = [u8; 0usize];
pub type std___allocator_traits_base___pocs = [u8; 0usize];
pub type std___allocator_traits_base___equal = [u8; 0usize];
impl Clone for std___allocator_traits_base {
    fn clone(&self) -> Self { *self }
}
pub type std___alloc_rebind = std___allocator_traits_base;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits {
    pub _address: u8,
}
pub type std_allocator_traits_allocator_type<_Alloc> = _Alloc;
pub type std_allocator_traits_value_type = [u8; 0usize];
pub type std_allocator_traits_pointer = std___detected_or_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits__Ptr {
    pub _address: u8,
}
pub type std_allocator_traits__Ptr_type = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits__Diff {
    pub _address: u8,
}
pub type std_allocator_traits__Diff_type = std_pointer_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits__Size {
    pub _address: u8,
}
pub type std_allocator_traits_const_pointer = [u8; 0usize];
pub type std_allocator_traits_void_pointer = std_allocator_traits__Ptr;
pub type std_allocator_traits_const_void_pointer = std_allocator_traits__Ptr;
pub type std_allocator_traits_difference_type = [u8; 0usize];
pub type std_allocator_traits_size_type = [u8; 0usize];
pub type std_allocator_traits_propagate_on_container_copy_assignment =
    std___detected_or_t;
pub type std_allocator_traits_propagate_on_container_move_assignment =
    std___detected_or_t;
pub type std_allocator_traits_propagate_on_container_swap =
    std___detected_or_t;
pub type std_allocator_traits_is_always_equal = std___detected_or_t;
pub type std_allocator_traits_rebind_alloc = std___alloc_rebind;
pub type std_allocator_traits_rebind_traits = std_allocator_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits___construct_helper {
    pub _address: u8,
}
pub type std_allocator_traits___construct_helper_type<_Alloc> = _Alloc;
pub type std_allocator_traits___has_construct =
    std_allocator_traits___construct_helper;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_copy_insertable_impl {
    pub _address: u8,
}
pub type std___is_copy_insertable_impl__Traits = std_allocator_traits;
pub type std___is_copy_insertable_impl_type<_Alloc> = _Alloc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_copy_insertable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_initializer_list<_E> {
    pub _M_array: std_initializer_list_iterator<_E>,
    pub _M_len: std_initializer_list_size_type,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_E>>,
}
pub type std_initializer_list_value_type<_E> = _E;
pub type std_initializer_list_reference<_E> = *mut _E;
pub type std_initializer_list_const_reference<_E> = *mut _E;
pub type std_initializer_list_size_type = usize;
pub type std_initializer_list_iterator<_E> = *mut _E;
pub type std_initializer_list_const_iterator<_E> = *mut _E;
#[repr(C)]
#[derive(Debug)]
pub struct std__Vector_base {
    pub _M_impl: std__Vector_base__Vector_impl,
}
pub type std__Vector_base__Tp_alloc_type = __gnu_cxx___alloc_traits;
pub type std__Vector_base_pointer = __gnu_cxx___alloc_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Vector_base__Vector_impl {
    pub _M_start: std__Vector_base_pointer,
    pub _M_finish: std__Vector_base_pointer,
    pub _M_end_of_storage: std__Vector_base_pointer,
}
pub type std__Vector_base_allocator_type<_Alloc> = _Alloc;
#[repr(C)]
#[derive(Debug)]
pub struct std_vector {
    pub _base: std__Vector_base,
}
pub type std_vector__Alloc_value_type = [u8; 0usize];
pub type std_vector__Base = std__Vector_base;
pub type std_vector__Tp_alloc_type = std_vector__Base;
pub type std_vector__Alloc_traits = __gnu_cxx___alloc_traits;
pub type std_vector_value_type<_Tp> = _Tp;
pub type std_vector_pointer = std_vector__Base;
pub type std_vector_const_pointer = std_vector__Alloc_traits;
pub type std_vector_reference = std_vector__Alloc_traits;
pub type std_vector_const_reference = std_vector__Alloc_traits;
pub type std_vector_iterator =
    __gnu_cxx___normal_iterator<std_vector_pointer>;
pub type std_vector_const_iterator =
    __gnu_cxx___normal_iterator<std_vector_const_pointer>;
pub type std_vector_const_reverse_iterator =
    std_reverse_iterator<std_vector_const_iterator>;
pub type std_vector_reverse_iterator =
    std_reverse_iterator<std_vector_iterator>;
pub type std_vector_size_type = usize;
pub type std_vector_difference_type = isize;
pub type std_vector_allocator_type<_Alloc> = _Alloc;
pub type std__Bit_type = ::std::os::raw::c_ulong;
pub const _S_word_bit: std__bindgen_ty_1 = std__bindgen_ty_1::_S_word_bit;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std__bindgen_ty_1 { _S_word_bit = 64, }
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std__Bit_reference {
    pub _M_p: *mut std__Bit_type,
    pub _M_mask: std__Bit_type,
}
impl Clone for std__Bit_reference {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std__Bit_iterator_base {
    pub _M_p: *mut std__Bit_type,
    pub _M_offset: ::std::os::raw::c_uint,
}
impl Clone for std__Bit_iterator_base {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std__Bit_iterator {
    pub _base: std__Bit_iterator_base,
}
pub type std__Bit_iterator_reference = std__Bit_reference;
pub type std__Bit_iterator_pointer = *mut std__Bit_reference;
pub type std__Bit_iterator_iterator = std__Bit_iterator;
impl Clone for std__Bit_iterator {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std__Bit_const_iterator {
    pub _base: std__Bit_iterator_base,
}
pub type std__Bit_const_iterator_reference = bool;
pub type std__Bit_const_iterator_const_reference = bool;
pub type std__Bit_const_iterator_pointer = *const bool;
pub type std__Bit_const_iterator_const_iterator = std__Bit_const_iterator;
impl Clone for std__Bit_const_iterator {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug)]
pub struct std__Bvector_base {
    pub _M_impl: std__Bvector_base__Bvector_impl,
}
pub type std__Bvector_base__Bit_alloc_type = __gnu_cxx___alloc_traits;
pub type std__Bvector_base__Bit_alloc_traits = __gnu_cxx___alloc_traits;
pub type std__Bvector_base__Bit_pointer = std__Bvector_base__Bit_alloc_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Bvector_base__Bvector_impl {
    pub _M_start: std__Bit_iterator,
    pub _M_finish: std__Bit_iterator,
    pub _M_end_of_storage: std__Bvector_base__Bit_pointer,
}
pub type std__Bvector_base_allocator_type<_Alloc> = _Alloc;
extern "C" {
    #[link_name = "_ZSt11_Hash_bytesPKvmm"]
    pub fn std__Hash_bytes(__ptr: *const ::std::os::raw::c_void, __len: usize,
                           __seed: usize) -> usize;
}
extern "C" {
    #[link_name = "_ZSt15_Fnv_hash_bytesPKvmm"]
    pub fn std__Fnv_hash_bytes(__ptr: *const ::std::os::raw::c_void,
                               __len: usize, __seed: usize) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___hash_base {
    pub _address: u8,
}
pub type std___hash_base_result_type<_Result> = _Result;
pub type std___hash_base_argument_type<_Arg> = _Arg;
#[repr(C)]
#[derive(Debug)]
pub struct std_hash {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std__Hash_impl {
    pub _address: u8,
}
impl Clone for std__Hash_impl {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std__Fnv_hash_impl {
    pub _address: u8,
}
impl Clone for std__Fnv_hash_impl {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_fast_hash {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_valarray {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std__Temporary_buffer<_Tp> {
    pub _M_original_len: std__Temporary_buffer_size_type,
    pub _M_len: std__Temporary_buffer_size_type,
    pub _M_buffer: std__Temporary_buffer_pointer<_Tp>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
}
pub type std__Temporary_buffer_value_type<_Tp> = _Tp;
pub type std__Temporary_buffer_pointer<_Tp> =
    *mut std__Temporary_buffer_value_type<_Tp>;
pub type std__Temporary_buffer_iterator<_Tp> =
    std__Temporary_buffer_pointer<_Tp>;
pub type std__Temporary_buffer_size_type = isize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_raw_storage_iterator<_OutputIterator> {
    pub _M_iter: _OutputIterator,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_OutputIterator>>,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_cast {
    pub _base: std_exception,
}
extern "C" {
    #[link_name = "_ZNSt8bad_castD0Ev"]
    pub fn std_bad_cast_bad_cast_destructor(this: *mut std_bad_cast);
}
extern "C" {
    #[link_name = "_ZNKSt8bad_cast4whatEv"]
    pub fn std_bad_cast_what(this: *mut ::std::os::raw::c_void)
     -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_typeid {
    pub _base: std_exception,
}
extern "C" {
    #[link_name = "_ZNSt10bad_typeidD0Ev"]
    pub fn std_bad_typeid_bad_typeid_destructor(this: *mut std_bad_typeid);
}
extern "C" {
    #[link_name = "_ZNKSt10bad_typeid4whatEv"]
    pub fn std_bad_typeid_what(this: *mut ::std::os::raw::c_void)
     -> *const ::std::os::raw::c_char;
}
pub type std_streamoff = ::std::os::raw::c_long;
pub type std_streamsize = isize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_fpos<_StateT> {
    pub _M_off: std_streamoff,
    pub _M_state: _StateT,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_StateT>>,
}
pub type std_streampos = std_fpos<mbstate_t>;
pub type std_wstreampos = std_fpos<mbstate_t>;
pub type std_u16streampos = std_fpos<mbstate_t>;
pub type std_u32streampos = std_fpos<mbstate_t>;
#[repr(C)]
pub struct std_ios_base__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_ios_base {
    pub vtable_: *const std_ios_base__bindgen_vtable,
    pub _M_precision: std_streamsize,
    pub _M_width: std_streamsize,
    pub _M_flags: std_ios_base_fmtflags,
    pub _M_exception: std_ios_base_iostate,
    pub _M_streambuf_state: std_ios_base_iostate,
    pub _M_callbacks: *mut std_ios_base__Callback_list,
    pub _M_word_zero: std_ios_base__Words,
    pub _M_local_word: [std_ios_base__Words; 8usize],
    pub _M_word_size: ::std::os::raw::c_int,
    pub _M_word: *mut std_ios_base__Words,
    pub _M_ios_locale: std_locale,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_ios_base_failure {
    pub _base: std_system_error,
}
extern "C" {
    #[link_name =
          "_ZNSt8ios_base7failureB5cxx11C1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_ios_base_failure_failure(this: *mut std_ios_base_failure,
                                        __str: *const std_string);
}
extern "C" {
    #[link_name =
          "_ZNSt8ios_base7failureB5cxx11C1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt10error_code"]
    pub fn std_ios_base_failure_failure1(this: *mut std_ios_base_failure,
                                         arg1: *const std_string,
                                         arg2: *const std_error_code);
}
extern "C" {
    #[link_name = "_ZNSt8ios_base7failureB5cxx11C1EPKcRKSt10error_code"]
    pub fn std_ios_base_failure_failure2(this: *mut std_ios_base_failure,
                                         arg1: *const ::std::os::raw::c_char,
                                         arg2: *const std_error_code);
}
impl std_ios_base_failure {
    #[inline]
    pub unsafe fn new(__str: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_ios_base_failure_failure(&mut __bindgen_tmp, __str);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(arg1: *const std_string, arg2: *const std_error_code)
     -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_ios_base_failure_failure1(&mut __bindgen_tmp, arg1, arg2);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new2(arg1: *const ::std::os::raw::c_char,
                       arg2: *const std_error_code) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_ios_base_failure_failure2(&mut __bindgen_tmp, arg1, arg2);
        __bindgen_tmp
    }
}
pub use self::std__Ios_Fmtflags as std_ios_base_fmtflags;
pub use self::std__Ios_Iostate as std_ios_base_iostate;
pub use self::std__Ios_Openmode as std_ios_base_openmode;
pub use self::std__Ios_Seekdir as std_ios_base_seekdir;
pub type std_ios_base_io_state = ::std::os::raw::c_int;
pub type std_ios_base_open_mode = ::std::os::raw::c_int;
pub type std_ios_base_seek_dir = ::std::os::raw::c_int;
pub type std_ios_base_streampos = std_streampos;
pub type std_ios_base_streamoff = std_streamoff;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std_ios_base_event {
    erase_event = 0,
    imbue_event = 1,
    copyfmt_event = 2,
}
pub type std_ios_base_event_callback =
    ::std::option::Option<unsafe extern "C" fn(__e: std_ios_base_event,
                                               __b: *mut std_ios_base,
                                               __i: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std_ios_base__Callback_list {
    pub _M_next: *mut std_ios_base__Callback_list,
    pub _M_fn: std_ios_base_event_callback,
    pub _M_index: ::std::os::raw::c_int,
    pub _M_refcount: std__Atomic_word,
}
impl Clone for std_ios_base__Callback_list {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std_ios_base__Words {
    pub _M_pword: *mut ::std::os::raw::c_void,
    pub _M_iword: ::std::os::raw::c_long,
}
impl Clone for std_ios_base__Words {
    fn clone(&self) -> Self { *self }
}
pub const std_ios_base__S_local_word_size: std_ios_base__bindgen_ty_1 =
    std_ios_base__bindgen_ty_1::_S_local_word_size;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std_ios_base__bindgen_ty_1 { _S_local_word_size = 8, }
#[repr(C)]
#[derive(Debug)]
pub struct std_ios_base_Init {
    pub _address: u8,
}
extern "C" {
    #[link_name = "_ZNSt8ios_base4Init11_S_refcountE"]
    pub static mut std_ios_base_Init__S_refcount: std__Atomic_word;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base4Init20_S_synced_with_stdioE"]
    pub static mut std_ios_base_Init__S_synced_with_stdio: bool;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base4InitC1Ev"]
    pub fn std_ios_base_Init_Init(this: *mut std_ios_base_Init);
}
extern "C" {
    #[link_name = "_ZNSt8ios_base4InitD1Ev"]
    pub fn std_ios_base_Init_Init_destructor(this: *mut std_ios_base_Init);
}
impl std_ios_base_Init {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_ios_base_Init_Init(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std_ios_base_Init_Init_destructor(self)
    }
}
extern "C" {
    #[link_name = "_ZNSt8ios_base9boolalphaE"]
    pub static std_ios_base_boolalpha: std_ios_base_fmtflags;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base3decE"]
    pub static std_ios_base_dec: std_ios_base_fmtflags;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base5fixedE"]
    pub static std_ios_base_fixed: std_ios_base_fmtflags;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base3hexE"]
    pub static std_ios_base_hex: std_ios_base_fmtflags;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base8internalE"]
    pub static std_ios_base_internal: std_ios_base_fmtflags;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base4leftE"]
    pub static std_ios_base_left: std_ios_base_fmtflags;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base3octE"]
    pub static std_ios_base_oct: std_ios_base_fmtflags;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base5rightE"]
    pub static std_ios_base_right: std_ios_base_fmtflags;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base10scientificE"]
    pub static std_ios_base_scientific: std_ios_base_fmtflags;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base8showbaseE"]
    pub static std_ios_base_showbase: std_ios_base_fmtflags;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base9showpointE"]
    pub static std_ios_base_showpoint: std_ios_base_fmtflags;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base7showposE"]
    pub static std_ios_base_showpos: std_ios_base_fmtflags;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base6skipwsE"]
    pub static std_ios_base_skipws: std_ios_base_fmtflags;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base7unitbufE"]
    pub static std_ios_base_unitbuf: std_ios_base_fmtflags;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base9uppercaseE"]
    pub static std_ios_base_uppercase: std_ios_base_fmtflags;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base11adjustfieldE"]
    pub static std_ios_base_adjustfield: std_ios_base_fmtflags;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base9basefieldE"]
    pub static std_ios_base_basefield: std_ios_base_fmtflags;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base10floatfieldE"]
    pub static std_ios_base_floatfield: std_ios_base_fmtflags;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base6badbitE"]
    pub static std_ios_base_badbit: std_ios_base_iostate;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base6eofbitE"]
    pub static std_ios_base_eofbit: std_ios_base_iostate;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base7failbitE"]
    pub static std_ios_base_failbit: std_ios_base_iostate;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base7goodbitE"]
    pub static std_ios_base_goodbit: std_ios_base_iostate;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base3appE"]
    pub static std_ios_base_app: std_ios_base_openmode;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base3ateE"]
    pub static std_ios_base_ate: std_ios_base_openmode;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base6binaryE"]
    pub static std_ios_base_binary: std_ios_base_openmode;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base2inE"]
    pub static std_ios_base_in: std_ios_base_openmode;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base3outE"]
    pub static std_ios_base_out: std_ios_base_openmode;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base5truncE"]
    pub static std_ios_base_trunc: std_ios_base_openmode;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base3begE"]
    pub static std_ios_base_beg: std_ios_base_seekdir;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base3curE"]
    pub static std_ios_base_cur: std_ios_base_seekdir;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base3endE"]
    pub static std_ios_base_end: std_ios_base_seekdir;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base17register_callbackEPFvNS_5eventERS_iEi"]
    pub fn std_ios_base_register_callback(this: *mut std_ios_base,
                                          __fn: std_ios_base_event_callback,
                                          __index: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "_ZNSt8ios_base17_M_call_callbacksENS_5eventE"]
    pub fn std_ios_base__M_call_callbacks(this: *mut std_ios_base,
                                          __ev: std_ios_base_event);
}
extern "C" {
    #[link_name = "_ZNSt8ios_base20_M_dispose_callbacksEv"]
    pub fn std_ios_base__M_dispose_callbacks(this: *mut std_ios_base);
}
extern "C" {
    #[link_name = "_ZNSt8ios_base13_M_grow_wordsEib"]
    pub fn std_ios_base__M_grow_words(this: *mut std_ios_base,
                                      __index: ::std::os::raw::c_int,
                                      __iword: bool)
     -> *mut std_ios_base__Words;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base7_M_initEv"]
    pub fn std_ios_base__M_init(this: *mut std_ios_base);
}
extern "C" {
    #[link_name = "_ZNSt8ios_base15sync_with_stdioEb"]
    pub fn std_ios_base_sync_with_stdio(__sync: bool) -> bool;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base5imbueERKSt6locale"]
    pub fn std_ios_base_imbue(this: *mut std_ios_base,
                              __loc: *const std_locale) -> std_locale;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base6xallocEv"]
    pub fn std_ios_base_xalloc() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "_ZNSt8ios_base7_M_moveERS_"]
    pub fn std_ios_base__M_move(this: *mut std_ios_base,
                                arg1: *mut std_ios_base);
}
extern "C" {
    #[link_name = "_ZNSt8ios_base7_M_swapERS_"]
    pub fn std_ios_base__M_swap(this: *mut std_ios_base,
                                __rhs: *mut std_ios_base);
}
extern "C" {
    #[link_name = "_ZNSt8ios_baseC1Ev"]
    pub fn std_ios_base_ios_base(this: *mut std_ios_base);
}
impl std_ios_base {
    #[inline]
    pub unsafe fn register_callback(&mut self,
                                    __fn: std_ios_base_event_callback,
                                    __index: ::std::os::raw::c_int) {
        std_ios_base_register_callback(self, __fn, __index)
    }
    #[inline]
    pub unsafe fn _M_call_callbacks(&mut self, __ev: std_ios_base_event) {
        std_ios_base__M_call_callbacks(self, __ev)
    }
    #[inline]
    pub unsafe fn _M_dispose_callbacks(&mut self) {
        std_ios_base__M_dispose_callbacks(self)
    }
    #[inline]
    pub unsafe fn _M_grow_words(&mut self, __index: ::std::os::raw::c_int,
                                __iword: bool) -> *mut std_ios_base__Words {
        std_ios_base__M_grow_words(self, __index, __iword)
    }
    #[inline]
    pub unsafe fn _M_init(&mut self) { std_ios_base__M_init(self) }
    #[inline]
    pub unsafe fn sync_with_stdio(__sync: bool) -> bool {
        std_ios_base_sync_with_stdio(__sync)
    }
    #[inline]
    pub unsafe fn imbue(&mut self, __loc: *const std_locale) -> std_locale {
        std_ios_base_imbue(self, __loc)
    }
    #[inline]
    pub unsafe fn xalloc() -> ::std::os::raw::c_int { std_ios_base_xalloc() }
    #[inline]
    pub unsafe fn _M_move(&mut self, arg1: *mut std_ios_base) {
        std_ios_base__M_move(self, arg1)
    }
    #[inline]
    pub unsafe fn _M_swap(&mut self, __rhs: *mut std_ios_base) {
        std_ios_base__M_swap(self, __rhs)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_ios_base_ios_base(&mut __bindgen_tmp);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "_ZNSt8ios_base7failureB5cxx11D0Ev"]
    pub fn std_ios_base_failure_failure_destructor(this:
                                                       *mut std_ios_base_failure);
}
extern "C" {
    #[link_name = "_ZNKSt8ios_base7failureB5cxx114whatEv"]
    pub fn std_ios_base_failure_what(this: *mut ::std::os::raw::c_void)
     -> *const ::std::os::raw::c_char;
}
pub type std__Atomic_word = ::std::os::raw::c_int;
extern "C" {
    #[link_name = "_ZNSt8ios_baseD0Ev"]
    pub fn std_ios_base_ios_base_destructor(this: *mut std_ios_base);
}
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_ios<_CharT> {
    pub _base: std_ios_base,
    pub _M_tie: *mut std_basic_ostream<_CharT>,
    pub _M_fill: std_basic_ios_char_type<_CharT>,
    pub _M_fill_init: bool,
    pub _M_streambuf: *mut std_basic_streambuf<_CharT>,
    pub _M_ctype: *const std_basic_ios___ctype_type,
    pub _M_num_put: *const std_basic_ios___num_put_type,
    pub _M_num_get: *const std_basic_ios___num_get_type,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type std_basic_ios_char_type<_CharT> = _CharT;
pub type std_basic_ios_int_type = [u8; 0usize];
pub type std_basic_ios_pos_type = [u8; 0usize];
pub type std_basic_ios_off_type = [u8; 0usize];
pub type std_basic_ios_traits_type<_Traits> = _Traits;
pub type std_basic_ios___ctype_type = std_ctype;
pub type std_basic_ios___num_put_type = std_num_put;
pub type std_basic_ios___num_get_type = std_num_get;
#[repr(C)]
pub struct std_basic_streambuf__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_streambuf<_CharT> {
    pub vtable_: *const std_basic_streambuf__bindgen_vtable,
    pub _M_in_beg: *mut std_basic_streambuf_char_type<_CharT>,
    pub _M_in_cur: *mut std_basic_streambuf_char_type<_CharT>,
    pub _M_in_end: *mut std_basic_streambuf_char_type<_CharT>,
    pub _M_out_beg: *mut std_basic_streambuf_char_type<_CharT>,
    pub _M_out_cur: *mut std_basic_streambuf_char_type<_CharT>,
    pub _M_out_end: *mut std_basic_streambuf_char_type<_CharT>,
    pub _M_buf_locale: std_locale,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type std_basic_streambuf_char_type<_CharT> = _CharT;
pub type std_basic_streambuf_traits_type<_Traits> = _Traits;
pub type std_basic_streambuf_int_type = [u8; 0usize];
pub type std_basic_streambuf_pos_type = [u8; 0usize];
pub type std_basic_streambuf_off_type = [u8; 0usize];
pub type std_basic_streambuf___streambuf_type<_CharT> =
    std_basic_streambuf<std_basic_streambuf_char_type<_CharT>>;
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_istream<_CharT> {
    pub _M_gcount: std_streamsize,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type std_basic_istream_char_type<_CharT> = _CharT;
pub type std_basic_istream_int_type = [u8; 0usize];
pub type std_basic_istream_pos_type = [u8; 0usize];
pub type std_basic_istream_off_type = [u8; 0usize];
pub type std_basic_istream_traits_type<_Traits> = _Traits;
pub type std_basic_istream___streambuf_type<_CharT> =
    std_basic_streambuf<_CharT>;
pub type std_basic_istream___ios_type<_CharT> = std_basic_ios<_CharT>;
pub type std_basic_istream___istream_type<_CharT> = std_basic_istream<_CharT>;
pub type std_basic_istream___num_get_type = std_num_get;
pub type std_basic_istream___ctype_type = std_ctype;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_istream_sentry {
    pub _M_ok: bool,
}
pub type std_basic_istream_sentry_traits_type = _Traits;
pub type std_basic_istream_sentry___streambuf_type =
    std_basic_streambuf<_CharT>;
pub type std_basic_istream_sentry___istream_type = std_basic_istream<_CharT>;
pub type std_basic_istream_sentry___ctype_type =
    std_basic_istream___ctype_type;
pub type std_basic_istream_sentry___int_type = [u8; 0usize];
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_ostream<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type std_basic_ostream_char_type<_CharT> = _CharT;
pub type std_basic_ostream_int_type = [u8; 0usize];
pub type std_basic_ostream_pos_type = [u8; 0usize];
pub type std_basic_ostream_off_type = [u8; 0usize];
pub type std_basic_ostream_traits_type<_Traits> = _Traits;
pub type std_basic_ostream___streambuf_type<_CharT> =
    std_basic_streambuf<_CharT>;
pub type std_basic_ostream___ios_type<_CharT> = std_basic_ios<_CharT>;
pub type std_basic_ostream___ostream_type<_CharT> = std_basic_ostream<_CharT>;
pub type std_basic_ostream___num_put_type = std_num_put;
pub type std_basic_ostream___ctype_type = std_ctype;
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_ostream_sentry {
    pub _M_ok: bool,
    pub _M_os: *mut std_basic_ostream<_CharT>,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_iostream<_CharT> {
    pub _base: std_basic_istream<_CharT>,
    pub _base_1: std_basic_ostream<_CharT>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type std_basic_iostream_char_type<_CharT> = _CharT;
pub type std_basic_iostream_int_type = [u8; 0usize];
pub type std_basic_iostream_pos_type = [u8; 0usize];
pub type std_basic_iostream_off_type = [u8; 0usize];
pub type std_basic_iostream_traits_type<_Traits> = _Traits;
pub type std_basic_iostream___istream_type<_CharT> =
    std_basic_istream<_CharT>;
pub type std_basic_iostream___ostream_type<_CharT> =
    std_basic_ostream<_CharT>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_filebuf {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_ifstream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_ofstream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_fstream {
    pub _address: u8,
}
pub type std_ios = std_basic_ios<::std::os::raw::c_char>;
pub type std_streambuf = std_basic_streambuf<::std::os::raw::c_char>;
pub type std_istream = std_basic_istream<::std::os::raw::c_char>;
pub type std_ostream = std_basic_ostream<::std::os::raw::c_char>;
pub type std_iostream = std_basic_iostream<::std::os::raw::c_char>;
pub type std_stringbuf = std_basic_stringbuf<::std::os::raw::c_char>;
pub type std_istringstream = std_basic_istringstream<::std::os::raw::c_char>;
pub type std_ostringstream = std_basic_ostringstream<::std::os::raw::c_char>;
pub type std_stringstream = std_basic_stringstream<::std::os::raw::c_char>;
pub type std_filebuf = std_basic_filebuf;
pub type std_ifstream = std_basic_ifstream;
pub type std_ofstream = std_basic_ofstream;
pub type std_fstream = std_basic_fstream;
pub type std_wios = std_basic_ios<u16>;
pub type std_wstreambuf = std_basic_streambuf<u16>;
pub type std_wistream = std_basic_istream<u16>;
pub type std_wostream = std_basic_ostream<u16>;
pub type std_wiostream = std_basic_iostream<u16>;
pub type std_wstringbuf = std_basic_stringbuf<u16>;
pub type std_wistringstream = std_basic_istringstream<u16>;
pub type std_wostringstream = std_basic_ostringstream<u16>;
pub type std_wstringstream = std_basic_stringstream<u16>;
pub type std_wfilebuf = std_basic_filebuf;
pub type std_wifstream = std_basic_ifstream;
pub type std_wofstream = std_basic_ofstream;
pub type std_wfstream = std_basic_fstream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_unary_function {
    pub _address: u8,
}
pub type std_unary_function_argument_type<_Arg> = _Arg;
pub type std_unary_function_result_type<_Result> = _Result;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_binary_function {
    pub _address: u8,
}
pub type std_binary_function_first_argument_type<_Arg1> = _Arg1;
pub type std_binary_function_second_argument_type<_Arg2> = _Arg2;
pub type std_binary_function_result_type<_Result> = _Result;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_transparent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_plus {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_minus {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_multiplies {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_divides {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_modulus {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_negate {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_equal_to {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_not_equal_to {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_greater {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_less {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_greater_equal {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_less_equal {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_logical_and {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_logical_or {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_logical_not {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_bit_and {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_bit_or {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_bit_xor {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_bit_not {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_unary_negate<_Predicate> {
    pub _M_pred: _Predicate,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_binary_negate<_Predicate> {
    pub _M_pred: _Predicate,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pointer_to_unary_function<_Arg, _Result> {
    pub _M_ptr: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg)
                                          -> _Result>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pointer_to_binary_function<_Arg1, _Arg2, _Result> {
    pub _M_ptr: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg1,
                                                           arg2: _Arg2)
                                          -> _Result>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg1>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg2>>,
    pub _phantom_2: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Identity {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Select1st {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Select2nd {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_mem_fun_t<_Ret> {
    pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_const_mem_fun_t<_Ret> {
    pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_mem_fun_ref_t<_Ret> {
    pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_const_mem_fun_ref_t<_Ret> {
    pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_mem_fun1_t<_Ret, _Arg> {
    pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_const_mem_fun1_t<_Ret, _Arg> {
    pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_mem_fun1_ref_t<_Ret, _Arg> {
    pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_const_mem_fun1_ref_t<_Ret, _Arg> {
    pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
}
#[repr(C)]
pub struct std_binder1st<_Operation> {
    pub op: _Operation,
    pub value: [u8; 0usize],
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation>>,
}
#[repr(C)]
pub struct std_binder2nd<_Operation> {
    pub op: _Operation,
    pub value: [u8; 0usize],
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation>>,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___erased_type {
    pub _address: u8,
}
impl Clone for std___erased_type {
    fn clone(&self) -> Self { *self }
}
pub type std___is_erased_or_convertible = std___or_;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std_allocator_arg_t {
    pub _address: u8,
}
impl Clone for std_allocator_arg_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "_ZStL13allocator_arg"]
    pub static std_allocator_arg: std_allocator_arg_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uses_allocator_helper {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___uses_alloc_base {
    pub _address: u8,
}
impl Clone for std___uses_alloc_base {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___uses_alloc0 {
    pub _M_a: std___uses_alloc0__Sink,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___uses_alloc0__Sink {
    pub _address: u8,
}
impl Clone for std___uses_alloc0__Sink {
    fn clone(&self) -> Self { *self }
}
impl Clone for std___uses_alloc0 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uses_alloc1<_Alloc> {
    pub _M_a: *mut _Alloc,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uses_alloc2<_Alloc> {
    pub _M_a: *mut _Alloc,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
}
pub type std___uses_alloc_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_tuple_size {
    pub _address: u8,
}
pub type std___tuple_element_t = u8;
pub type std_tuple_element_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_tuple_like_impl {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Itup_cat {
    pub _address: u8,
}
pub type std_integer_sequence_value_type<_Tp> = _Tp;
pub type std_make_integer_sequence = u8;
pub type std_index_sequence = u8;
pub type std_make_index_sequence = std_make_integer_sequence;
pub type std_index_sequence_for = std_make_index_sequence;
pub type std___c_locale = __locale_t;
#[repr(C)]
#[derive(Debug)]
pub struct std_locale {
    pub _M_impl: *mut std_locale__Impl,
}
pub type std_locale_category = ::std::os::raw::c_int;
#[repr(C)]
pub struct std_locale_facet__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_locale_facet {
    pub vtable_: *const std_locale_facet__bindgen_vtable,
    pub _M_refcount: std__Atomic_word,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_locale_facet___shim {
    _unused: [u8; 0],
}
extern "C" {
    #[link_name = "_ZNSt6locale5facet11_S_c_localeE"]
    pub static mut std_locale_facet__S_c_locale: std___c_locale;
}
extern "C" {
    #[link_name = "_ZNSt6locale5facet9_S_c_nameE"]
    pub static mut std_locale_facet__S_c_name:
               [::std::os::raw::c_char; 2usize];
}
extern "C" {
    #[link_name = "_ZNSt6locale5facet7_S_onceE"]
    pub static mut std_locale_facet__S_once: __gthread_once_t;
}
extern "C" {
    #[link_name =
          "_ZNSt6locale5facet18_S_create_c_localeERP15__locale_structPKcS2_"]
    pub fn std_locale_facet__S_create_c_locale(__cloc: *mut std___c_locale,
                                               __s:
                                                   *const ::std::os::raw::c_char,
                                               __old: std___c_locale);
}
extern "C" {
    #[link_name = "_ZNSt6locale5facet17_S_clone_c_localeERP15__locale_struct"]
    pub fn std_locale_facet__S_clone_c_locale(__cloc: *mut std___c_locale)
     -> std___c_locale;
}
extern "C" {
    #[link_name =
          "_ZNSt6locale5facet19_S_destroy_c_localeERP15__locale_struct"]
    pub fn std_locale_facet__S_destroy_c_locale(__cloc: *mut std___c_locale);
}
extern "C" {
    #[link_name =
          "_ZNSt6locale5facet20_S_lc_ctype_c_localeEP15__locale_structPKc"]
    pub fn std_locale_facet__S_lc_ctype_c_locale(__cloc: std___c_locale,
                                                 __s:
                                                     *const ::std::os::raw::c_char)
     -> std___c_locale;
}
extern "C" {
    #[link_name = "_ZNSt6locale5facet15_S_get_c_localeEv"]
    pub fn std_locale_facet__S_get_c_locale() -> std___c_locale;
}
extern "C" {
    #[link_name = "_ZNSt6locale5facet13_S_get_c_nameEv"]
    pub fn std_locale_facet__S_get_c_name() -> *const ::std::os::raw::c_char;
}
impl std_locale_facet {
    #[inline]
    pub unsafe fn _S_create_c_locale(__cloc: *mut std___c_locale,
                                     __s: *const ::std::os::raw::c_char,
                                     __old: std___c_locale) {
        std_locale_facet__S_create_c_locale(__cloc, __s, __old)
    }
    #[inline]
    pub unsafe fn _S_clone_c_locale(__cloc: *mut std___c_locale)
     -> std___c_locale {
        std_locale_facet__S_clone_c_locale(__cloc)
    }
    #[inline]
    pub unsafe fn _S_destroy_c_locale(__cloc: *mut std___c_locale) {
        std_locale_facet__S_destroy_c_locale(__cloc)
    }
    #[inline]
    pub unsafe fn _S_lc_ctype_c_locale(__cloc: std___c_locale,
                                       __s: *const ::std::os::raw::c_char)
     -> std___c_locale {
        std_locale_facet__S_lc_ctype_c_locale(__cloc, __s)
    }
    #[inline]
    pub unsafe fn _S_get_c_locale() -> std___c_locale {
        std_locale_facet__S_get_c_locale()
    }
    #[inline]
    pub unsafe fn _S_get_c_name() -> *const ::std::os::raw::c_char {
        std_locale_facet__S_get_c_name()
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std_locale_id {
    pub _M_index: usize,
}
extern "C" {
    #[link_name = "_ZNSt6locale2id11_S_refcountE"]
    pub static mut std_locale_id__S_refcount: std__Atomic_word;
}
extern "C" {
    #[link_name = "_ZNKSt6locale2id5_M_idEv"]
    pub fn std_locale_id__M_id(this: *const std_locale_id) -> usize;
}
impl Clone for std_locale_id {
    fn clone(&self) -> Self { *self }
}
impl std_locale_id {
    #[inline]
    pub unsafe fn _M_id(&self) -> usize { std_locale_id__M_id(self) }
}
#[repr(C)]
#[derive(Debug)]
pub struct std_locale__Impl {
    pub _M_refcount: std__Atomic_word,
    pub _M_facets: *mut *const std_locale_facet,
    pub _M_facets_size: usize,
    pub _M_caches: *mut *const std_locale_facet,
    pub _M_names: *mut *mut ::std::os::raw::c_char,
}
extern "C" {
    #[link_name = "_ZNSt6locale5_Impl11_S_id_ctypeE"]
    pub static mut std_locale__Impl__S_id_ctype:
               [*const std_locale_id; 0usize];
}
extern "C" {
    #[link_name = "_ZNSt6locale5_Impl13_S_id_numericE"]
    pub static mut std_locale__Impl__S_id_numeric:
               [*const std_locale_id; 0usize];
}
extern "C" {
    #[link_name = "_ZNSt6locale5_Impl13_S_id_collateE"]
    pub static mut std_locale__Impl__S_id_collate:
               [*const std_locale_id; 0usize];
}
extern "C" {
    #[link_name = "_ZNSt6locale5_Impl10_S_id_timeE"]
    pub static mut std_locale__Impl__S_id_time:
               [*const std_locale_id; 0usize];
}
extern "C" {
    #[link_name = "_ZNSt6locale5_Impl14_S_id_monetaryE"]
    pub static mut std_locale__Impl__S_id_monetary:
               [*const std_locale_id; 0usize];
}
extern "C" {
    #[link_name = "_ZNSt6locale5_Impl14_S_id_messagesE"]
    pub static mut std_locale__Impl__S_id_messages:
               [*const std_locale_id; 0usize];
}
extern "C" {
    #[link_name = "_ZNSt6locale5_Impl19_S_facet_categoriesE"]
    pub static mut std_locale__Impl__S_facet_categories:
               [*const *const std_locale_id; 0usize];
}
pub const std_locale__S_categories_size: std_locale__bindgen_ty_1 =
    std_locale__bindgen_ty_1::_S_categories_size;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std_locale__bindgen_ty_1 { _S_categories_size = 12, }
pub const std_locale_none: std_locale_category = 0;
pub const std_locale_ctype: std_locale_category = 1;
pub const std_locale_numeric: std_locale_category = 2;
pub const std_locale_collate: std_locale_category = 4;
pub const std_locale_time: std_locale_category = 8;
pub const std_locale_monetary: std_locale_category = 16;
pub const std_locale_messages: std_locale_category = 32;
pub const std_locale_all: std_locale_category = 63;
extern "C" {
    #[link_name = "_ZNSt6locale10_S_classicE"]
    pub static mut std_locale__S_classic: *mut std_locale__Impl;
}
extern "C" {
    #[link_name = "_ZNSt6locale9_S_globalE"]
    pub static mut std_locale__S_global: *mut std_locale__Impl;
}
extern "C" {
    #[link_name = "_ZNSt6locale13_S_categoriesE"]
    pub static std_locale__S_categories: *const *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "_ZNSt6locale7_S_onceE"]
    pub static mut std_locale__S_once: __gthread_once_t;
}
extern "C" {
    #[link_name = "_ZNSt6locale17_S_twinned_facetsE"]
    pub static mut std_locale__S_twinned_facets:
               [*const std_locale_id; 0usize];
}
extern "C" {
    #[link_name = "_ZNKSt6locale4nameB5cxx11Ev"]
    pub fn std_locale_name(this: *const std_locale) -> std_string;
}
extern "C" {
    #[link_name = "_ZNSt6locale6globalERKS_"]
    pub fn std_locale_global(__loc: *const std_locale) -> std_locale;
}
extern "C" {
    #[link_name = "_ZNSt6locale7classicEv"]
    pub fn std_locale_classic() -> *const std_locale;
}
extern "C" {
    #[link_name = "_ZNSt6localeC1Ev"]
    pub fn std_locale_locale(this: *mut std_locale);
}
extern "C" {
    #[link_name = "_ZNSt6localeC1ERKS_"]
    pub fn std_locale_locale1(this: *mut std_locale,
                              __other: *const std_locale);
}
extern "C" {
    #[link_name = "_ZNSt6localeC1EPKc"]
    pub fn std_locale_locale2(this: *mut std_locale,
                              __s: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "_ZNSt6localeC1ERKS_PKci"]
    pub fn std_locale_locale3(this: *mut std_locale,
                              __base: *const std_locale,
                              __s: *const ::std::os::raw::c_char,
                              __cat: std_locale_category);
}
extern "C" {
    #[link_name = "_ZNSt6localeC1ERKS_S1_i"]
    pub fn std_locale_locale4(this: *mut std_locale,
                              __base: *const std_locale,
                              __add: *const std_locale,
                              __cat: std_locale_category);
}
extern "C" {
    #[link_name = "_ZNSt6localeD1Ev"]
    pub fn std_locale_locale_destructor(this: *mut std_locale);
}
impl std_locale {
    #[inline]
    pub unsafe fn name(&self) -> std_string { std_locale_name(self) }
    #[inline]
    pub unsafe fn global(__loc: *const std_locale) -> std_locale {
        std_locale_global(__loc)
    }
    #[inline]
    pub unsafe fn classic() -> *const std_locale { std_locale_classic() }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_locale_locale(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(__other: *const std_locale) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_locale_locale1(&mut __bindgen_tmp, __other);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new2(__s: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_locale_locale2(&mut __bindgen_tmp, __s);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new3(__base: *const std_locale,
                       __s: *const ::std::os::raw::c_char,
                       __cat: std_locale_category) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_locale_locale3(&mut __bindgen_tmp, __base, __s, __cat);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new4(__base: *const std_locale, __add: *const std_locale,
                       __cat: std_locale_category) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_locale_locale4(&mut __bindgen_tmp, __base, __add, __cat);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn destruct(&mut self) { std_locale_locale_destructor(self) }
}
extern "C" {
    #[link_name = "_ZNSt6locale5facetD0Ev"]
    pub fn std_locale_facet_facet_destructor(this: *mut std_locale_facet);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std_ctype_base {
    pub _address: u8,
}
pub type std_ctype_base___to_type = *const ::std::os::raw::c_int;
pub type std_ctype_base_mask = ::std::os::raw::c_ushort;
pub const std_ctype_base_upper: std_ctype_base_mask = 256;
pub const std_ctype_base_lower: std_ctype_base_mask = 512;
pub const std_ctype_base_alpha: std_ctype_base_mask = 1024;
pub const std_ctype_base_digit: std_ctype_base_mask = 2048;
pub const std_ctype_base_xdigit: std_ctype_base_mask = 4096;
pub const std_ctype_base_space: std_ctype_base_mask = 8192;
pub const std_ctype_base_print: std_ctype_base_mask = 16384;
pub const std_ctype_base_graph: std_ctype_base_mask = 3076;
pub const std_ctype_base_cntrl: std_ctype_base_mask = 2;
pub const std_ctype_base_punct: std_ctype_base_mask = 4;
pub const std_ctype_base_alnum: std_ctype_base_mask = 3072;
pub const std_ctype_base_blank: std_ctype_base_mask = 1;
impl Clone for std_ctype_base {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug)]
pub struct std_ctype {
    pub _base: std___ctype_abstract_base,
}
pub type std_ctype_char_type<_CharT> = _CharT;
pub type std_ctype_mask = std___ctype_abstract_base;
#[repr(C)]
#[derive(Debug)]
pub struct std_ctype_byname {
    pub _base: std_ctype,
}
pub type std_ctype_byname_mask = std_ctype;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std_codecvt_base {
    pub _address: u8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std_codecvt_base_result {
    ok = 0,
    partial = 1,
    error = 2,
    noconv = 3,
}
impl Clone for std_codecvt_base {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug)]
pub struct std_codecvt {
    pub _base: std___codecvt_abstract_base,
    pub _M_c_locale_codecvt: std___c_locale,
}
pub type std_codecvt_result = std_codecvt_base_result;
pub type std_codecvt_intern_type<_InternT> = _InternT;
pub type std_codecvt_extern_type<_ExternT> = _ExternT;
pub type std_codecvt_state_type<_StateT> = _StateT;
#[repr(C)]
#[derive(Debug)]
pub struct std_codecvt_byname {
    pub _base: std_codecvt,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_num_get {
    pub _base: std_locale_facet,
}
pub type std_num_get_char_type<_CharT> = _CharT;
pub type std_num_get_iter_type<_InIter> = _InIter;
#[repr(C)]
#[derive(Debug)]
pub struct std_num_put {
    pub _base: std_locale_facet,
}
pub type std_num_put_char_type<_CharT> = _CharT;
pub type std_num_put_iter_type<_OutIter> = _OutIter;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std_time_base {
    pub _address: u8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std_time_base_dateorder {
    no_order = 0,
    dmy = 1,
    mdy = 2,
    ymd = 3,
    ydm = 4,
}
impl Clone for std_time_base {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug)]
pub struct std_time_put {
    pub _base: std_locale_facet,
}
pub type std_time_put_char_type<_CharT> = _CharT;
pub type std_time_put_iter_type<_OutIter> = _OutIter;
#[repr(C)]
#[derive(Debug)]
pub struct std_time_put_byname {
    pub _base: std_time_put,
}
pub type std_time_put_byname_char_type<_CharT> = _CharT;
pub type std_time_put_byname_iter_type<_OutIter> = _OutIter;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std_money_base {
    pub _address: u8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std_money_base_part {
    none = 0,
    space = 1,
    symbol = 2,
    sign = 3,
    value = 4,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std_money_base_pattern {
    pub field: [::std::os::raw::c_char; 4usize],
}
impl Clone for std_money_base_pattern {
    fn clone(&self) -> Self { *self }
}
pub const std_money_base__S_minus: std_money_base__bindgen_ty_1 =
    std_money_base__bindgen_ty_1::_S_minus;
pub const std_money_base__S_zero: std_money_base__bindgen_ty_1 =
    std_money_base__bindgen_ty_1::_S_zero;
pub const std_money_base__S_end: std_money_base__bindgen_ty_1 =
    std_money_base__bindgen_ty_1::_S_end;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std_money_base__bindgen_ty_1 {
    _S_minus = 0,
    _S_zero = 1,
    _S_end = 11,
}
extern "C" {
    #[link_name = "_ZNSt10money_base18_S_default_patternE"]
    pub static std_money_base__S_default_pattern: std_money_base_pattern;
}
extern "C" {
    #[link_name = "_ZNSt10money_base8_S_atomsE"]
    pub static mut std_money_base__S_atoms: *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "_ZNSt10money_base20_S_construct_patternEccc"]
    pub fn std_money_base__S_construct_pattern(__precedes:
                                                   ::std::os::raw::c_char,
                                               __space:
                                                   ::std::os::raw::c_char,
                                               __posn: ::std::os::raw::c_char)
     -> std_money_base_pattern;
}
impl Clone for std_money_base {
    fn clone(&self) -> Self { *self }
}
impl std_money_base {
    #[inline]
    pub unsafe fn _S_construct_pattern(__precedes: ::std::os::raw::c_char,
                                       __space: ::std::os::raw::c_char,
                                       __posn: ::std::os::raw::c_char)
     -> std_money_base_pattern {
        std_money_base__S_construct_pattern(__precedes, __space, __posn)
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std_messages_base {
    pub _address: u8,
}
pub type std_messages_base_catalog = ::std::os::raw::c_int;
impl Clone for std_messages_base {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name =
          "_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_"]
    pub fn std_getline(__in: *mut std_basic_istream<::std::os::raw::c_char>,
                       __str: *mut std_basic_string<::std::os::raw::c_char>,
                       __delim: ::std::os::raw::c_char)
     -> *mut std_basic_istream<::std::os::raw::c_char>;
}
extern "C" {
    #[link_name =
          "_ZSt7getlineIwSt11char_traitsIwESaIwEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_"]
    pub fn std_getline1(__in: *mut std_basic_istream<u16>,
                        __str: *mut std_basic_string<u16>, __delim: u16)
     -> *mut std_basic_istream<u16>;
}
extern "C" {
    #[link_name = "npos"]
    pub static std_npos: std_basic_string_size_type;
}
#[repr(C)]
#[derive(Debug)]
pub struct std___cow_string {
    pub __bindgen_anon_1: std___cow_string__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___cow_string__bindgen_ty_1 {
    pub _M_p: __BindgenUnionField<*const ::std::os::raw::c_char>,
    pub _M_bytes: __BindgenUnionField<[::std::os::raw::c_char; 8usize]>,
    pub bindgen_union_field: u64,
}
impl Clone for std___cow_string__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "_ZNSt12__cow_stringC1Ev"]
    pub fn std___cow_string___cow_string(this: *mut std___cow_string);
}
extern "C" {
    #[link_name =
          "_ZNSt12__cow_stringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std___cow_string___cow_string1(this: *mut std___cow_string,
                                          arg1: *const std_string);
}
extern "C" {
    #[link_name = "_ZNSt12__cow_stringC1EPKcm"]
    pub fn std___cow_string___cow_string2(this: *mut std___cow_string,
                                          arg1: *const ::std::os::raw::c_char,
                                          arg2: usize);
}
extern "C" {
    #[link_name = "_ZNSt12__cow_stringC1ERKS_"]
    pub fn std___cow_string___cow_string3(this: *mut std___cow_string,
                                          arg1: *const std___cow_string);
}
extern "C" {
    #[link_name = "_ZNSt12__cow_stringC1EOS_"]
    pub fn std___cow_string___cow_string4(this: *mut std___cow_string,
                                          arg1: *mut std___cow_string);
}
extern "C" {
    #[link_name = "_ZNSt12__cow_stringD1Ev"]
    pub fn std___cow_string___cow_string_destructor(this:
                                                        *mut std___cow_string);
}
impl std___cow_string {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std___cow_string___cow_string(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(arg1: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std___cow_string___cow_string1(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new2(arg1: *const ::std::os::raw::c_char, arg2: usize)
     -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std___cow_string___cow_string2(&mut __bindgen_tmp, arg1, arg2);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new3(arg1: *const std___cow_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std___cow_string___cow_string3(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new4(arg1: *mut std___cow_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std___cow_string___cow_string4(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std___cow_string___cow_string_destructor(self)
    }
}
pub type std___sso_string = std_basic_string<::std::os::raw::c_char>;
#[repr(C)]
#[derive(Debug)]
pub struct std_logic_error {
    pub _base: std_exception,
    pub _M_msg: std___cow_string,
}
extern "C" {
    #[link_name =
          "_ZNSt11logic_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_logic_error_logic_error(this: *mut std_logic_error,
                                       __arg: *const std_string);
}
extern "C" {
    #[link_name = "_ZNSt11logic_errorC1EPKc"]
    pub fn std_logic_error_logic_error1(this: *mut std_logic_error,
                                        arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "_ZNSt11logic_errorC1ERKS_"]
    pub fn std_logic_error_logic_error2(this: *mut std_logic_error,
                                        arg1: *const std_logic_error);
}
impl std_logic_error {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_logic_error_logic_error(&mut __bindgen_tmp, __arg);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_logic_error_logic_error1(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new2(arg1: *const std_logic_error) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_logic_error_logic_error2(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "_ZNSt11logic_errorD0Ev"]
    pub fn std_logic_error_logic_error_destructor(this: *mut std_logic_error);
}
extern "C" {
    #[link_name = "_ZNKSt11logic_error4whatEv"]
    pub fn std_logic_error_what(this: *mut ::std::os::raw::c_void)
     -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_domain_error {
    pub _base: std_logic_error,
}
extern "C" {
    #[link_name =
          "_ZNSt12domain_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_domain_error_domain_error(this: *mut std_domain_error,
                                         __arg: *const std_string);
}
extern "C" {
    #[link_name = "_ZNSt12domain_errorC1EPKc"]
    pub fn std_domain_error_domain_error1(this: *mut std_domain_error,
                                          arg1:
                                              *const ::std::os::raw::c_char);
}
impl std_domain_error {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_domain_error_domain_error(&mut __bindgen_tmp, __arg);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_domain_error_domain_error1(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "_ZNSt12domain_errorD0Ev"]
    pub fn std_domain_error_domain_error_destructor(this:
                                                        *mut std_domain_error);
}
#[repr(C)]
#[derive(Debug)]
pub struct std_invalid_argument {
    pub _base: std_logic_error,
}
extern "C" {
    #[link_name =
          "_ZNSt16invalid_argumentC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_invalid_argument_invalid_argument(this:
                                                     *mut std_invalid_argument,
                                                 __arg: *const std_string);
}
extern "C" {
    #[link_name = "_ZNSt16invalid_argumentC1EPKc"]
    pub fn std_invalid_argument_invalid_argument1(this:
                                                      *mut std_invalid_argument,
                                                  arg1:
                                                      *const ::std::os::raw::c_char);
}
impl std_invalid_argument {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_invalid_argument_invalid_argument(&mut __bindgen_tmp, __arg);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_invalid_argument_invalid_argument1(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "_ZNSt16invalid_argumentD0Ev"]
    pub fn std_invalid_argument_invalid_argument_destructor(this:
                                                                *mut std_invalid_argument);
}
#[repr(C)]
#[derive(Debug)]
pub struct std_length_error {
    pub _base: std_logic_error,
}
extern "C" {
    #[link_name =
          "_ZNSt12length_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_length_error_length_error(this: *mut std_length_error,
                                         __arg: *const std_string);
}
extern "C" {
    #[link_name = "_ZNSt12length_errorC1EPKc"]
    pub fn std_length_error_length_error1(this: *mut std_length_error,
                                          arg1:
                                              *const ::std::os::raw::c_char);
}
impl std_length_error {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_length_error_length_error(&mut __bindgen_tmp, __arg);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_length_error_length_error1(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "_ZNSt12length_errorD0Ev"]
    pub fn std_length_error_length_error_destructor(this:
                                                        *mut std_length_error);
}
#[repr(C)]
#[derive(Debug)]
pub struct std_out_of_range {
    pub _base: std_logic_error,
}
extern "C" {
    #[link_name =
          "_ZNSt12out_of_rangeC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_out_of_range_out_of_range(this: *mut std_out_of_range,
                                         __arg: *const std_string);
}
extern "C" {
    #[link_name = "_ZNSt12out_of_rangeC1EPKc"]
    pub fn std_out_of_range_out_of_range1(this: *mut std_out_of_range,
                                          arg1:
                                              *const ::std::os::raw::c_char);
}
impl std_out_of_range {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_out_of_range_out_of_range(&mut __bindgen_tmp, __arg);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_out_of_range_out_of_range1(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "_ZNSt12out_of_rangeD0Ev"]
    pub fn std_out_of_range_out_of_range_destructor(this:
                                                        *mut std_out_of_range);
}
#[repr(C)]
#[derive(Debug)]
pub struct std_runtime_error {
    pub _base: std_exception,
    pub _M_msg: std___cow_string,
}
extern "C" {
    #[link_name =
          "_ZNSt13runtime_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_runtime_error_runtime_error(this: *mut std_runtime_error,
                                           __arg: *const std_string);
}
extern "C" {
    #[link_name = "_ZNSt13runtime_errorC1EPKc"]
    pub fn std_runtime_error_runtime_error1(this: *mut std_runtime_error,
                                            arg1:
                                                *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "_ZNSt13runtime_errorC1ERKS_"]
    pub fn std_runtime_error_runtime_error2(this: *mut std_runtime_error,
                                            arg1: *const std_runtime_error);
}
impl std_runtime_error {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_runtime_error_runtime_error(&mut __bindgen_tmp, __arg);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_runtime_error_runtime_error1(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new2(arg1: *const std_runtime_error) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_runtime_error_runtime_error2(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "_ZNSt13runtime_errorD0Ev"]
    pub fn std_runtime_error_runtime_error_destructor(this:
                                                          *mut std_runtime_error);
}
extern "C" {
    #[link_name = "_ZNKSt13runtime_error4whatEv"]
    pub fn std_runtime_error_what(this: *mut ::std::os::raw::c_void)
     -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_range_error {
    pub _base: std_runtime_error,
}
extern "C" {
    #[link_name =
          "_ZNSt11range_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_range_error_range_error(this: *mut std_range_error,
                                       __arg: *const std_string);
}
extern "C" {
    #[link_name = "_ZNSt11range_errorC1EPKc"]
    pub fn std_range_error_range_error1(this: *mut std_range_error,
                                        arg1: *const ::std::os::raw::c_char);
}
impl std_range_error {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_range_error_range_error(&mut __bindgen_tmp, __arg);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_range_error_range_error1(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "_ZNSt11range_errorD0Ev"]
    pub fn std_range_error_range_error_destructor(this: *mut std_range_error);
}
#[repr(C)]
#[derive(Debug)]
pub struct std_overflow_error {
    pub _base: std_runtime_error,
}
extern "C" {
    #[link_name =
          "_ZNSt14overflow_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_overflow_error_overflow_error(this: *mut std_overflow_error,
                                             __arg: *const std_string);
}
extern "C" {
    #[link_name = "_ZNSt14overflow_errorC1EPKc"]
    pub fn std_overflow_error_overflow_error1(this: *mut std_overflow_error,
                                              arg1:
                                                  *const ::std::os::raw::c_char);
}
impl std_overflow_error {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_overflow_error_overflow_error(&mut __bindgen_tmp, __arg);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_overflow_error_overflow_error1(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "_ZNSt14overflow_errorD0Ev"]
    pub fn std_overflow_error_overflow_error_destructor(this:
                                                            *mut std_overflow_error);
}
#[repr(C)]
#[derive(Debug)]
pub struct std_underflow_error {
    pub _base: std_runtime_error,
}
extern "C" {
    #[link_name =
          "_ZNSt15underflow_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_underflow_error_underflow_error(this: *mut std_underflow_error,
                                               __arg: *const std_string);
}
extern "C" {
    #[link_name = "_ZNSt15underflow_errorC1EPKc"]
    pub fn std_underflow_error_underflow_error1(this:
                                                    *mut std_underflow_error,
                                                arg1:
                                                    *const ::std::os::raw::c_char);
}
impl std_underflow_error {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_underflow_error_underflow_error(&mut __bindgen_tmp, __arg);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std_underflow_error_underflow_error1(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "_ZNSt15underflow_errorD0Ev"]
    pub fn std_underflow_error_underflow_error_destructor(this:
                                                              *mut std_underflow_error);
}
pub type std___array_traits__Type<_Tp> = *mut _Tp;
pub type std_array_value_type<_Tp> = _Tp;
pub type std_array_pointer<_Tp> = *mut std_array_value_type<_Tp>;
pub type std_array_const_pointer<_Tp> = *const std_array_value_type<_Tp>;
pub type std_array_reference<_Tp> = *mut std_array_value_type<_Tp>;
pub type std_array_const_reference<_Tp> = *const std_array_value_type<_Tp>;
pub type std_array_iterator<_Tp> = *mut std_array_value_type<_Tp>;
pub type std_array_const_iterator<_Tp> = *const std_array_value_type<_Tp>;
pub type std_array_size_type = usize;
pub type std_array_difference_type = isize;
pub type std_array_reverse_iterator<_Tp> =
    std_reverse_iterator<std_array_iterator<_Tp>>;
pub type std_array_const_reverse_iterator<_Tp> =
    std_reverse_iterator<std_array_const_iterator<_Tp>>;
pub type std_array__AT_Type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_empty_non_tuple {
    pub _address: u8,
}
pub type std___empty_not_final = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_tuple_like {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___do_make_tuple {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___make_tuple {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___combine_tuples {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___tuple_cat_result {
    pub _address: u8,
}
pub type std___tuple_cat_result___type = std___combine_tuples;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___make_1st_indices {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___tuple_concater {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std__Swallow_assign {
    pub _address: u8,
}
impl Clone for std__Swallow_assign {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "_ZStL6ignore"]
    pub static std_ignore: std__Swallow_assign;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Mem_fn {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Maybe_get_result_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Weak_result_type_impl {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Weak_result_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___inv_unwrap {
    pub _address: u8,
}
pub type std___inv_unwrap_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_argument_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_first_argument_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_second_argument_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Reference_wrapper_base {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Pack {
    pub _address: u8,
}
pub type std__NotSame = std___not_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Maybe_unary_or_binary_function {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Mem_fn_traits {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Mem_fn_traits_base {
    pub _address: u8,
}
pub type std__Mem_fn_traits_base___result_type<_Res> = _Res;
pub type std__Mem_fn_traits_base___maybe_type =
    std__Maybe_unary_or_binary_function;
pub type std__Mem_fn_traits_base___arity = u8;
pub type std__Mem_fn_base__Traits = std__Mem_fn_traits;
pub type std__Mem_fn_base__Arity = std__Mem_fn_base__Traits;
pub type std__Mem_fn_base__Varargs = std__Mem_fn_base__Traits;
pub type std__Mem_fn_base_result_type = std__Mem_fn_base__Traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_bind_expression {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_placeholder {
    pub _address: u8,
}
extern "C" {
    #[link_name = "_ZNSt12placeholders2_1E"]
    pub static std_placeholders__1: u8;
}
extern "C" {
    #[link_name = "_ZNSt12placeholders2_2E"]
    pub static std_placeholders__2: u8;
}
extern "C" {
    #[link_name = "_ZNSt12placeholders2_3E"]
    pub static std_placeholders__3: u8;
}
extern "C" {
    #[link_name = "_ZNSt12placeholders2_4E"]
    pub static std_placeholders__4: u8;
}
extern "C" {
    #[link_name = "_ZNSt12placeholders2_5E"]
    pub static std_placeholders__5: u8;
}
extern "C" {
    #[link_name = "_ZNSt12placeholders2_6E"]
    pub static std_placeholders__6: u8;
}
extern "C" {
    #[link_name = "_ZNSt12placeholders2_7E"]
    pub static std_placeholders__7: u8;
}
extern "C" {
    #[link_name = "_ZNSt12placeholders2_8E"]
    pub static std_placeholders__8: u8;
}
extern "C" {
    #[link_name = "_ZNSt12placeholders2_9E"]
    pub static std_placeholders__9: u8;
}
extern "C" {
    #[link_name = "_ZNSt12placeholders3_10E"]
    pub static std_placeholders__10: u8;
}
extern "C" {
    #[link_name = "_ZNSt12placeholders3_11E"]
    pub static std_placeholders__11: u8;
}
extern "C" {
    #[link_name = "_ZNSt12placeholders3_12E"]
    pub static std_placeholders__12: u8;
}
extern "C" {
    #[link_name = "_ZNSt12placeholders3_13E"]
    pub static std_placeholders__13: u8;
}
extern "C" {
    #[link_name = "_ZNSt12placeholders3_14E"]
    pub static std_placeholders__14: u8;
}
extern "C" {
    #[link_name = "_ZNSt12placeholders3_15E"]
    pub static std_placeholders__15: u8;
}
extern "C" {
    #[link_name = "_ZNSt12placeholders3_16E"]
    pub static std_placeholders__16: u8;
}
extern "C" {
    #[link_name = "_ZNSt12placeholders3_17E"]
    pub static std_placeholders__17: u8;
}
extern "C" {
    #[link_name = "_ZNSt12placeholders3_18E"]
    pub static std_placeholders__18: u8;
}
extern "C" {
    #[link_name = "_ZNSt12placeholders3_19E"]
    pub static std_placeholders__19: u8;
}
extern "C" {
    #[link_name = "_ZNSt12placeholders3_20E"]
    pub static std_placeholders__20: u8;
}
extern "C" {
    #[link_name = "_ZNSt12placeholders3_21E"]
    pub static std_placeholders__21: u8;
}
extern "C" {
    #[link_name = "_ZNSt12placeholders3_22E"]
    pub static std_placeholders__22: u8;
}
extern "C" {
    #[link_name = "_ZNSt12placeholders3_23E"]
    pub static std_placeholders__23: u8;
}
extern "C" {
    #[link_name = "_ZNSt12placeholders3_24E"]
    pub static std_placeholders__24: u8;
}
extern "C" {
    #[link_name = "_ZNSt12placeholders3_25E"]
    pub static std_placeholders__25: u8;
}
extern "C" {
    #[link_name = "_ZNSt12placeholders3_26E"]
    pub static std_placeholders__26: u8;
}
extern "C" {
    #[link_name = "_ZNSt12placeholders3_27E"]
    pub static std_placeholders__27: u8;
}
extern "C" {
    #[link_name = "_ZNSt12placeholders3_28E"]
    pub static std_placeholders__28: u8;
}
extern "C" {
    #[link_name = "_ZNSt12placeholders3_29E"]
    pub static std_placeholders__29: u8;
}
pub type std__Safe_tuple_element_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Maybe_wrap_member_pointer {
    pub _address: u8,
}
pub type std__Maybe_wrap_member_pointer_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Bind {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Bind_result {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Bind_check_arity {
    pub _address: u8,
}
pub type std___is_socketlike = std___or_;
pub type std__Bind_helper___maybe_type = std__Maybe_wrap_member_pointer;
pub type std__Bind_helper___func_type = std__Bind_helper___maybe_type;
pub type std__Bind_helper_type = std__Bind;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Bindres_helper {
    pub _address: u8,
}
pub type std__Bindres_helper___maybe_type = std__Maybe_wrap_member_pointer;
pub type std__Bindres_helper___functor_type =
    std__Bindres_helper___maybe_type;
pub type std__Bindres_helper_type = std__Bind_result;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Bind_simple {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Bind_simple_helper {
    pub _address: u8,
}
pub type std__Bind_simple_helper___maybe_type =
    std__Maybe_wrap_member_pointer;
pub type std__Bind_simple_helper___func_type =
    std__Bind_simple_helper___maybe_type;
pub type std__Bind_simple_helper___type = std__Bind_simple;
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_function_call {
    pub _base: std_exception,
}
extern "C" {
    #[link_name = "_ZNSt17bad_function_callD0Ev"]
    pub fn std_bad_function_call_bad_function_call_destructor(this:
                                                                  *mut std_bad_function_call);
}
extern "C" {
    #[link_name = "_ZNKSt17bad_function_call4whatEv"]
    pub fn std_bad_function_call_what(this: *mut ::std::os::raw::c_void)
     -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_location_invariant {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Undefined_class {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std__Nocopy_types {
    pub _M_object: __BindgenUnionField<*mut ::std::os::raw::c_void>,
    pub _M_const_object: __BindgenUnionField<*const ::std::os::raw::c_void>,
    pub _M_function_pointer: __BindgenUnionField<::std::option::Option<unsafe extern "C" fn()>>,
    pub _M_member_pointer: __BindgenUnionField<::std::option::Option<unsafe extern "C" fn()>>,
    pub bindgen_union_field: [u64; 2usize],
}
impl Clone for std__Nocopy_types {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std__Any_data {
    pub _M_unused: __BindgenUnionField<std__Nocopy_types>,
    pub _M_pod_data: __BindgenUnionField<[::std::os::raw::c_char; 16usize]>,
    pub bindgen_union_field: [u64; 2usize],
}
impl Clone for std__Any_data {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std__Manager_operation {
    __get_type_info = 0,
    __get_functor_ptr = 1,
    __clone_functor = 2,
    __destroy_functor = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Simple_type_wrapper<_Tp> {
    pub __value: _Tp,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_function {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std__Function_base {
    pub _M_functor: std__Any_data,
    pub _M_manager: std__Function_base__Manager_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Function_base__Base_manager {
    pub _address: u8,
}
pub type std__Function_base__Base_manager__Local_storage = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Function_base__Ref_manager {
    pub _address: u8,
}
pub type std__Function_base__Ref_manager__Base =
    std__Function_base__Base_manager;
pub type std__Function_base__Manager_type =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut std__Any_data,
                                               arg2: *const std__Any_data,
                                               arg3: std__Manager_operation)
                              -> bool>;
pub const std__Function_base__M_max_size: usize = 16;
pub const std__Function_base__M_max_align: usize = 8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Function_handler {
    pub _address: u8,
}
pub type std___check_func_return_type = std___or_;
#[repr(C)]
#[derive(Debug)]
pub struct std_auto_ptr<_Tp> {
    pub _M_ptr: *mut _Tp,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
}
pub type std_auto_ptr_element_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_default_delete {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_unique_ptr {
    pub _M_t: std_unique_ptr___tuple_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_unique_ptr__Pointer {
    pub _address: u8,
}
pub type std_unique_ptr__Pointer__Del = std_remove_reference;
pub type std_unique_ptr__Pointer_type = std_unique_ptr__Pointer__Del;
pub type std_unique_ptr___tuple_type = std_tuple;
pub type std_unique_ptr_pointer = std_unique_ptr__Pointer;
pub type std_unique_ptr_element_type<_Tp> = _Tp;
pub type std_unique_ptr_deleter_type<_Dp> = _Dp;
pub type std_unique_ptr___safe_conversion_up = std___and_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__MakeUniq {
    pub _address: u8,
}
pub type std__MakeUniq___single_object = std_unique_ptr;
#[repr(C)]
#[derive(Debug)]
pub struct std___allocated_ptr<_Alloc> {
    pub _M_alloc: *mut _Alloc,
    pub _M_ptr: std___allocated_ptr_pointer,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
}
pub type std___allocated_ptr_pointer = std_allocator_traits;
pub type std___allocated_ptr_value_type = std_allocator_traits;
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_weak_ptr {
    pub _base: std_exception,
}
extern "C" {
    #[link_name = "_ZNKSt12bad_weak_ptr4whatEv"]
    pub fn std_bad_weak_ptr_what(this: *mut ::std::os::raw::c_void)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "_ZNSt12bad_weak_ptrD0Ev"]
    pub fn std_bad_weak_ptr_bad_weak_ptr_destructor(this:
                                                        *mut std_bad_weak_ptr);
}
pub const std__Mutex_base__S_need_barriers: std__Mutex_base__bindgen_ty_1 =
    std__Mutex_base__bindgen_ty_1::_S_need_barriers;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std__Mutex_base__bindgen_ty_1 { _S_need_barriers = 0, }
extern "C" {
    #[link_name = "_M_dispose"]
    pub fn std__Sp_counted_base__M_dispose(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "_M_get_deleter"]
    pub fn std__Sp_counted_base__M_get_deleter(this:
                                                   *mut ::std::os::raw::c_void,
                                               arg1: *const std_type_info)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "_M_add_ref_lock"]
    pub fn std__Sp_counted_base__M_add_ref_lock(this: *mut u8);
}
extern "C" {
    #[link_name = "_M_add_ref_lock_nothrow"]
    pub fn std__Sp_counted_base__M_add_ref_lock_nothrow(this: *mut u8)
     -> bool;
}
pub type std___shared_ptr__Convertible = u8;
pub type std___shared_ptr_element_type<_Tp> = _Tp;
pub type std___weak_ptr__Convertible = u8;
pub type std___weak_ptr_element_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug)]
pub struct std_shared_ptr {
    pub _base: u8,
}
pub type std_shared_ptr__Convertible = u8;
#[repr(C)]
#[derive(Debug)]
pub struct std_weak_ptr {
    pub _base: u8,
}
pub type std_weak_ptr__Convertible = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_owner_less {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_enable_shared_from_this {
    pub _M_weak_this: std_weak_ptr,
}
extern "C" {
    #[link_name = "__shared_count<_Lp>"]
    pub fn std___shared_count___shared_count<_Lp>(this: *mut u8,
                                                  __r: *mut u8);
}
extern "C" {
    #[link_name = "__shared_count<_Lp>"]
    pub fn std___shared_count___shared_count<_Lp>1(this: *mut u8,
                                                   __r: *mut u8,
                                                   arg1: std_nothrow_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Sp_counted_deleter__Impl<_Ptr> {
    pub _M_ptr: _Ptr,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ptr>>,
}
pub type std__Sp_counted_deleter__Impl__Del_base = u8;
pub type std__Sp_counted_deleter__Impl__Alloc_base = u8;
pub type std__Sp_counted_deleter___allocator_type = std___alloc_rebind;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std__Sp_make_shared_tag {
    pub _address: u8,
}
impl Clone for std__Sp_make_shared_tag {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Sp_counted_ptr_inplace__Impl {
    pub _M_storage: __gnu_cxx___aligned_buffer,
}
pub type std__Sp_counted_ptr_inplace__Impl__A_base = u8;
pub type std__Sp_counted_ptr_inplace___allocator_type = std___alloc_rebind;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Sp_less {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Sp_owner_less {
    pub _address: u8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std_memory_order {
    memory_order_relaxed = 0,
    memory_order_consume = 1,
    memory_order_acquire = 2,
    memory_order_release = 3,
    memory_order_acq_rel = 4,
    memory_order_seq_cst = 5,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std___memory_order_modifier {
    __memory_order_mask = 65535,
    __memory_order_modifier_mask = 4294901760,
    __memory_order_hle_acquire = 65536,
    __memory_order_hle_release = 131072,
}
#[repr(C)]
#[derive(Debug)]
pub struct std___atomic_base<_ITp> {
    pub _M_i: std___atomic_base___int_type<_ITp>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_ITp>>,
}
pub type std___atomic_base___int_type<_ITp> = _ITp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_atomic {
    pub _address: u8,
}
pub type std___atomic_flag_data_type = bool;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___atomic_flag_base {
    pub _M_i: std___atomic_flag_data_type,
}
impl Clone for std___atomic_flag_base {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug)]
pub struct std_atomic_flag {
    pub _base: std___atomic_flag_base,
}
#[repr(C)]
#[derive(Debug)]
pub struct std__Sp_locker {
    pub _M_key1: ::std::os::raw::c_uchar,
    pub _M_key2: ::std::os::raw::c_uchar,
}
extern "C" {
    #[link_name = "_ZNSt10_Sp_lockerC1EPKv"]
    pub fn std__Sp_locker__Sp_locker(this: *mut std__Sp_locker,
                                     arg1: *const ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "_ZNSt10_Sp_lockerC1EPKvS1_"]
    pub fn std__Sp_locker__Sp_locker1(this: *mut std__Sp_locker,
                                      arg1: *const ::std::os::raw::c_void,
                                      arg2: *const ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "_ZNSt10_Sp_lockerD1Ev"]
    pub fn std__Sp_locker__Sp_locker_destructor(this: *mut std__Sp_locker);
}
impl std__Sp_locker {
    #[inline]
    pub unsafe fn new(arg1: *const ::std::os::raw::c_void) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std__Sp_locker__Sp_locker(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_void,
                       arg2: *const ::std::os::raw::c_void) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        std__Sp_locker__Sp_locker1(&mut __bindgen_tmp, arg1, arg2);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std__Sp_locker__Sp_locker_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_auto_ptr_ref<_Tp1> {
    pub _M_ptr: *mut _Tp1,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp1>>,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std_pointer_safety { relaxed = 0, preferred = 1, strict = 2, }
pub const std_errc_operation_not_supported: std_errc =
    std_errc::not_supported;
pub const std_errc_resource_unavailable_try_again: std_errc =
    std_errc::operation_would_block;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std_errc {
    address_family_not_supported = 97,
    address_in_use = 98,
    address_not_available = 99,
    already_connected = 106,
    argument_list_too_long = 7,
    argument_out_of_domain = 33,
    bad_address = 14,
    bad_file_descriptor = 9,
    bad_message = 74,
    broken_pipe = 32,
    connection_aborted = 103,
    connection_already_in_progress = 114,
    connection_refused = 111,
    connection_reset = 104,
    cross_device_link = 18,
    destination_address_required = 89,
    device_or_resource_busy = 16,
    directory_not_empty = 39,
    executable_format_error = 8,
    file_exists = 17,
    file_too_large = 27,
    filename_too_long = 36,
    function_not_supported = 38,
    host_unreachable = 113,
    identifier_removed = 43,
    illegal_byte_sequence = 84,
    inappropriate_io_control_operation = 25,
    interrupted = 4,
    invalid_argument = 22,
    invalid_seek = 29,
    io_error = 5,
    is_a_directory = 21,
    message_size = 90,
    network_down = 100,
    network_reset = 102,
    network_unreachable = 101,
    no_buffer_space = 105,
    no_child_process = 10,
    no_link = 67,
    no_lock_available = 37,
    no_message_available = 61,
    no_message = 42,
    no_protocol_option = 92,
    no_space_on_device = 28,
    no_stream_resources = 63,
    no_such_device_or_address = 6,
    no_such_device = 19,
    no_such_file_or_directory = 2,
    no_such_process = 3,
    not_a_directory = 20,
    not_a_socket = 88,
    not_a_stream = 60,
    not_connected = 107,
    not_enough_memory = 12,
    not_supported = 95,
    operation_canceled = 125,
    operation_in_progress = 115,
    operation_not_permitted = 1,
    operation_would_block = 11,
    owner_dead = 130,
    permission_denied = 13,
    protocol_error = 71,
    protocol_not_supported = 93,
    read_only_file_system = 30,
    resource_deadlock_would_occur = 35,
    result_out_of_range = 34,
    state_not_recoverable = 131,
    stream_timeout = 62,
    text_file_busy = 26,
    timed_out = 110,
    too_many_files_open_in_system = 23,
    too_many_files_open = 24,
    too_many_links = 31,
    too_many_symbolic_link_levels = 40,
    value_too_large = 75,
    wrong_protocol_type = 91,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std_error_code {
    pub _M_value: ::std::os::raw::c_int,
    pub _M_cat: *const std_error_category,
}
extern "C" {
    #[link_name = "_ZNKSt10error_code23default_error_conditionEv"]
    pub fn std_error_code_default_error_condition(this: *const std_error_code)
     -> std_error_condition;
}
impl Clone for std_error_code {
    fn clone(&self) -> Self { *self }
}
impl std_error_code {
    #[inline]
    pub unsafe fn default_error_condition(&self) -> std_error_condition {
        std_error_code_default_error_condition(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std_error_condition {
    pub _M_value: ::std::os::raw::c_int,
    pub _M_cat: *const std_error_category,
}
impl Clone for std_error_condition {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug)]
pub struct std_system_error {
    pub _base: std_runtime_error,
    pub _M_code: std_error_code,
}
extern "C" {
    #[link_name = "_ZNSt12system_errorD0Ev"]
    pub fn std_system_error_system_error_destructor(this:
                                                        *mut std_system_error);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_error_code_enum {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_error_condition_enum {
    pub _address: u8,
}
#[repr(C)]
pub struct std_error_category__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_error_category {
    pub vtable_: *const std_error_category__bindgen_vtable,
}
extern "C" {
    #[link_name = "_ZNSt3_V214error_categoryD0Ev"]
    pub fn std_error_category_error_category_destructor(this:
                                                            *mut std_error_category);
}
extern "C" {
    #[link_name = "_ZNKSt3_V214error_category4nameEv"]
    pub fn std_error_category_name(this: *mut ::std::os::raw::c_void)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "_ZNKSt3_V214error_category7messageB5cxx11Ei"]
    pub fn std_error_category_message(this: *mut ::std::os::raw::c_void,
                                      arg1: ::std::os::raw::c_int)
     -> std_string;
}
extern "C" {
    #[link_name = "_ZNKSt3_V214error_category23default_error_conditionEi"]
    pub fn std_error_category_default_error_condition(this:
                                                          *mut ::std::os::raw::c_void,
                                                      __i:
                                                          ::std::os::raw::c_int)
     -> std_error_condition;
}
extern "C" {
    #[link_name =
          "_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition"]
    pub fn std_error_category_equivalent(this: *mut ::std::os::raw::c_void,
                                         __i: ::std::os::raw::c_int,
                                         __cond: *const std_error_condition)
     -> bool;
}
extern "C" {
    #[link_name = "_ZNKSt3_V214error_category10equivalentERKSt10error_codei"]
    pub fn std_error_category_equivalent1(this: *mut ::std::os::raw::c_void,
                                          __code: *const std_error_code,
                                          __i: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    #[link_name = "_ZNSt3_V215system_categoryEv"]
    pub fn std_system_category() -> *const std_error_category;
}
extern "C" {
    #[link_name = "_ZNSt3_V216generic_categoryEv"]
    pub fn std_generic_category() -> *const std_error_category;
}
extern "C" {
    #[link_name = "_ZSt15make_error_codeSt4errc"]
    pub fn std_make_error_code(arg1: std_errc) -> std_error_code;
}
extern "C" {
    #[link_name = "_ZSt20make_error_conditionSt4errc"]
    pub fn std_make_error_condition(arg1: std_errc) -> std_error_condition;
}
pub const std___safe_multiply___c: uintmax_t = 0;
extern "C" {
    #[link_name = "__a0"]
    pub static std___safe_multiply___a0: uintmax_t;
}
extern "C" {
    #[link_name = "__a1"]
    pub static std___safe_multiply___a1: uintmax_t;
}
extern "C" {
    #[link_name = "__b0"]
    pub static std___safe_multiply___b0: uintmax_t;
}
extern "C" {
    #[link_name = "__b1"]
    pub static std___safe_multiply___b1: uintmax_t;
}
extern "C" {
    #[link_name = "value"]
    pub static std___safe_multiply_value: intmax_t;
}
extern "C" {
    #[link_name = "__lo"]
    pub static std___big_add___lo: uintmax_t;
}
extern "C" {
    #[link_name = "__hi"]
    pub static std___big_add___hi: uintmax_t;
}
extern "C" {
    #[link_name = "__lo"]
    pub static std___big_sub___lo: uintmax_t;
}
extern "C" {
    #[link_name = "__hi"]
    pub static std___big_sub___hi: uintmax_t;
}
pub const std___big_mul___c: uintmax_t = 0;
extern "C" {
    #[link_name = "__x0"]
    pub static std___big_mul___x0: uintmax_t;
}
extern "C" {
    #[link_name = "__x1"]
    pub static std___big_mul___x1: uintmax_t;
}
extern "C" {
    #[link_name = "__y0"]
    pub static std___big_mul___y0: uintmax_t;
}
extern "C" {
    #[link_name = "__y1"]
    pub static std___big_mul___y1: uintmax_t;
}
extern "C" {
    #[link_name = "__x0y0"]
    pub static std___big_mul___x0y0: uintmax_t;
}
extern "C" {
    #[link_name = "__x0y1"]
    pub static std___big_mul___x0y1: uintmax_t;
}
extern "C" {
    #[link_name = "__x1y0"]
    pub static std___big_mul___x1y0: uintmax_t;
}
extern "C" {
    #[link_name = "__x1y1"]
    pub static std___big_mul___x1y1: uintmax_t;
}
extern "C" {
    #[link_name = "__mix"]
    pub static std___big_mul___mix: uintmax_t;
}
extern "C" {
    #[link_name = "__mix_lo"]
    pub static std___big_mul___mix_lo: uintmax_t;
}
extern "C" {
    #[link_name = "__mix_hi"]
    pub static std___big_mul___mix_hi: uintmax_t;
}
pub type std___big_mul__Res = u8;
extern "C" {
    #[link_name = "__hi"]
    pub static std___big_mul___hi: uintmax_t;
}
extern "C" {
    #[link_name = "__lo"]
    pub static std___big_mul___lo: uintmax_t;
}
pub const std___big_div_impl___c: uintmax_t = 0;
extern "C" {
    #[link_name = "__d1"]
    pub static std___big_div_impl___d1: uintmax_t;
}
extern "C" {
    #[link_name = "__d0"]
    pub static std___big_div_impl___d0: uintmax_t;
}
extern "C" {
    #[link_name = "__q1x"]
    pub static std___big_div_impl___q1x: uintmax_t;
}
extern "C" {
    #[link_name = "__r1x"]
    pub static std___big_div_impl___r1x: uintmax_t;
}
extern "C" {
    #[link_name = "__m"]
    pub static std___big_div_impl___m: uintmax_t;
}
extern "C" {
    #[link_name = "__r1y"]
    pub static std___big_div_impl___r1y: uintmax_t;
}
extern "C" {
    #[link_name = "__r1z"]
    pub static std___big_div_impl___r1z: uintmax_t;
}
extern "C" {
    #[link_name = "__r1"]
    pub static std___big_div_impl___r1: uintmax_t;
}
extern "C" {
    #[link_name = "__q1"]
    pub static std___big_div_impl___q1: uintmax_t;
}
extern "C" {
    #[link_name = "__q0x"]
    pub static std___big_div_impl___q0x: uintmax_t;
}
extern "C" {
    #[link_name = "__r0x"]
    pub static std___big_div_impl___r0x: uintmax_t;
}
extern "C" {
    #[link_name = "__n"]
    pub static std___big_div_impl___n: uintmax_t;
}
extern "C" {
    #[link_name = "__r0y"]
    pub static std___big_div_impl___r0y: uintmax_t;
}
extern "C" {
    #[link_name = "__r0z"]
    pub static std___big_div_impl___r0z: uintmax_t;
}
extern "C" {
    #[link_name = "__r0"]
    pub static std___big_div_impl___r0: uintmax_t;
}
extern "C" {
    #[link_name = "__q0"]
    pub static std___big_div_impl___q0: uintmax_t;
}
extern "C" {
    #[link_name = "__quot"]
    pub static std___big_div_impl___quot: uintmax_t;
}
extern "C" {
    #[link_name = "__rem"]
    pub static std___big_div_impl___rem: uintmax_t;
}
pub type std___big_div_impl__Prod = u8;
pub type std___big_div_impl__Sum = u8;
extern "C" {
    #[link_name = "__shift"]
    pub static std___big_div___shift: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__coshift_"]
    pub static std___big_div___coshift_: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__coshift"]
    pub static std___big_div___coshift: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__c1"]
    pub static std___big_div___c1: uintmax_t;
}
extern "C" {
    #[link_name = "__c2"]
    pub static std___big_div___c2: uintmax_t;
}
extern "C" {
    #[link_name = "__new_d"]
    pub static std___big_div___new_d: uintmax_t;
}
extern "C" {
    #[link_name = "__new_n0"]
    pub static std___big_div___new_n0: uintmax_t;
}
extern "C" {
    #[link_name = "__n1_shifted"]
    pub static std___big_div___n1_shifted: uintmax_t;
}
extern "C" {
    #[link_name = "__n0_top"]
    pub static std___big_div___n0_top: uintmax_t;
}
extern "C" {
    #[link_name = "__new_n1"]
    pub static std___big_div___new_n1: uintmax_t;
}
pub type std___big_div__Res = u8;
extern "C" {
    #[link_name = "__quot_hi"]
    pub static std___big_div___quot_hi: uintmax_t;
}
extern "C" {
    #[link_name = "__quot_lo"]
    pub static std___big_div___quot_lo: uintmax_t;
}
extern "C" {
    #[link_name = "__rem"]
    pub static std___big_div___rem: uintmax_t;
}
pub type std___big_div__P0 = u8;
pub type std___big_div__P1 = u8;
pub type std___big_div__Sum = u8;
extern "C" {
    #[link_name = "num"]
    pub static std_ratio_num: intmax_t;
}
extern "C" {
    #[link_name = "den"]
    pub static std_ratio_den: intmax_t;
}
pub type std_ratio_type = u8;
extern "C" {
    #[link_name = "num"]
    pub static std_num: intmax_t;
}
extern "C" {
    #[link_name = "den"]
    pub static std_den: intmax_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___ratio_multiply {
    pub _address: u8,
}
pub type std___ratio_multiply_type = u8;
pub type std_ratio_multiply = std___ratio_multiply;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___ratio_divide {
    pub _address: u8,
}
pub type std___ratio_divide_type = std___ratio_multiply;
pub type std_ratio_divide = std___ratio_divide;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ratio_equal {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ratio_not_equal {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___ratio_less_impl_1 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ratio_less {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ratio_less_equal {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ratio_greater {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ratio_greater_equal {
    pub _address: u8,
}
pub type std___ratio_add_impl___t = u8;
pub type std___ratio_add_impl_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___ratio_add {
    pub _address: u8,
}
pub type std___ratio_add_type = u8;
pub type std_ratio_add = std___ratio_add;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___ratio_subtract {
    pub _address: u8,
}
pub type std___ratio_subtract_type = std___ratio_add;
pub type std_ratio_subtract = std___ratio_subtract;
pub type std_atto = u8;
pub type std_femto = u8;
pub type std_pico = u8;
pub type std_nano = u8;
pub type std_micro = u8;
pub type std_milli = u8;
pub type std_centi = u8;
pub type std_deci = u8;
pub type std_deca = u8;
pub type std_hecto = u8;
pub type std_kilo = u8;
pub type std_mega = u8;
pub type std_giga = u8;
pub type std_tera = u8;
pub type std_peta = u8;
pub type std_exa = u8;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std_float_round_style {
    round_indeterminate = -1,
    round_toward_zero = 0,
    round_to_nearest = 1,
    round_toward_infinity = 2,
    round_toward_neg_infinity = 3,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std_float_denorm_style {
    denorm_indeterminate = -1,
    denorm_absent = 0,
    denorm_present = 1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___numeric_limits_base {
    pub _address: u8,
}
pub const std___numeric_limits_base_is_specialized: bool = false;
pub const std___numeric_limits_base_digits: ::std::os::raw::c_int = 0;
pub const std___numeric_limits_base_digits10: ::std::os::raw::c_int = 0;
pub const std___numeric_limits_base_max_digits10: ::std::os::raw::c_int = 0;
pub const std___numeric_limits_base_is_signed: bool = false;
pub const std___numeric_limits_base_is_integer: bool = false;
pub const std___numeric_limits_base_is_exact: bool = false;
pub const std___numeric_limits_base_radix: ::std::os::raw::c_int = 0;
pub const std___numeric_limits_base_min_exponent: ::std::os::raw::c_int = 0;
pub const std___numeric_limits_base_min_exponent10: ::std::os::raw::c_int = 0;
pub const std___numeric_limits_base_max_exponent: ::std::os::raw::c_int = 0;
pub const std___numeric_limits_base_max_exponent10: ::std::os::raw::c_int = 0;
pub const std___numeric_limits_base_has_infinity: bool = false;
pub const std___numeric_limits_base_has_quiet_NaN: bool = false;
pub const std___numeric_limits_base_has_signaling_NaN: bool = false;
extern "C" {
    #[link_name = "_ZNSt21__numeric_limits_base10has_denormE"]
    pub static std___numeric_limits_base_has_denorm: std_float_denorm_style;
}
pub const std___numeric_limits_base_has_denorm_loss: bool = false;
pub const std___numeric_limits_base_is_iec559: bool = false;
pub const std___numeric_limits_base_is_bounded: bool = false;
pub const std___numeric_limits_base_is_modulo: bool = false;
pub const std___numeric_limits_base_traps: bool = false;
pub const std___numeric_limits_base_tinyness_before: bool = false;
extern "C" {
    #[link_name = "_ZNSt21__numeric_limits_base11round_styleE"]
    pub static std___numeric_limits_base_round_style: std_float_round_style;
}
impl Clone for std___numeric_limits_base {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_numeric_limits {
    pub _address: u8,
}
pub type std___parse_int__Digit_impl___valid = std_true_type;
pub type std___parse_int___ull_constant = u8;
pub type std___parse_int__Power_help___next = u8;
pub type std___parse_int__Power_help___valid_digit = u8;
pub type std___parse_int__Power_help_type = std___parse_int___ull_constant;
pub type std___parse_int__Number_help___digit = u8;
pub type std___parse_int__Number_help___valid_digit =
    std___parse_int__Number_help___digit;
pub type std___parse_int__Number_help___next = u8;
pub type std___parse_int__Number_help_type = std___parse_int___ull_constant;
pub type std___select_int__Select_int = u8;
#[repr(C)]
#[derive(Debug)]
pub struct std_chrono_duration<_Rep> {
    pub __r: std_chrono_duration_rep<_Rep>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Rep>>,
}
pub type std_chrono_duration_rep<_Rep> = _Rep;
pub type std_chrono_duration_period<_Period> = _Period;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_chrono_time_point<_Dur> {
    pub __d: std_chrono_time_point_duration<_Dur>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Dur>>,
}
pub type std_chrono_time_point_clock<_Clock> = _Clock;
pub type std_chrono_time_point_duration<_Dur> = _Dur;
pub type std_chrono_time_point_rep = [u8; 0usize];
pub type std_chrono_time_point_period = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_chrono___is_duration {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_chrono_treat_as_floating_point {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_chrono_duration_values {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_chrono___is_ratio {
    pub _address: u8,
}
pub type std_chrono_nanoseconds = std_chrono_duration<i64>;
pub type std_chrono_microseconds = std_chrono_duration<i64>;
pub type std_chrono_milliseconds = std_chrono_duration<i64>;
pub type std_chrono_seconds = std_chrono_duration<i64>;
pub type std_chrono_minutes = std_chrono_duration<i64>;
pub type std_chrono_hours = std_chrono_duration<i64>;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std_chrono_system_clock {
    pub _address: u8,
}
pub type std_chrono_system_clock_duration = std_chrono_nanoseconds;
pub type std_chrono_system_clock_rep = rep;
pub type std_chrono_system_clock_period = u8;
pub type std_chrono_system_clock_time_point =
    std_chrono_time_point<std_chrono_system_clock_duration>;
pub const std_chrono_system_clock_is_steady: bool = false;
extern "C" {
    #[link_name = "_ZNSt6chrono3_V212system_clock3nowEv"]
    pub fn std_chrono_system_clock_now()
     -> std_chrono_system_clock_time_point;
}
impl Clone for std_chrono_system_clock {
    fn clone(&self) -> Self { *self }
}
impl std_chrono_system_clock {
    #[inline]
    pub unsafe fn now() -> std_chrono_system_clock_time_point {
        std_chrono_system_clock_now()
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std_chrono_steady_clock {
    pub _address: u8,
}
pub type std_chrono_steady_clock_duration = std_chrono_nanoseconds;
pub type std_chrono_steady_clock_rep = rep;
pub type std_chrono_steady_clock_period = u8;
pub type std_chrono_steady_clock_time_point =
    std_chrono_time_point<std_chrono_steady_clock_duration>;
pub const std_chrono_steady_clock_is_steady: bool = true;
extern "C" {
    #[link_name = "_ZNSt6chrono3_V212steady_clock3nowEv"]
    pub fn std_chrono_steady_clock_now()
     -> std_chrono_steady_clock_time_point;
}
impl Clone for std_chrono_steady_clock {
    fn clone(&self) -> Self { *self }
}
impl std_chrono_steady_clock {
    #[inline]
    pub unsafe fn now() -> std_chrono_steady_clock_time_point {
        std_chrono_steady_clock_now()
    }
}
pub type std_chrono_high_resolution_clock = std_chrono_system_clock;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___duration_common_type_wrapper {
    pub _address: u8,
}
pub type std___duration_common_type_wrapper___gcd_num = u8;
pub type std___duration_common_type_wrapper___gcd_den = u8;
pub type std___duration_common_type_wrapper___cr = [u8; 0usize];
pub type std___duration_common_type_wrapper___r = u8;
pub type std___duration_common_type_wrapper_type = std___success_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___timepoint_common_type_wrapper {
    pub _address: u8,
}
pub type std___timepoint_common_type_wrapper_type = std___success_type;
#[repr(C)]
#[derive(Debug)]
pub struct std_experimental_filesystem_path {
    pub _M_pathname: std_experimental_filesystem_path_string_type,
    pub _M_cmpts: std_experimental_filesystem_path__List,
    pub _M_type: std_experimental_filesystem_path__Type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_experimental_filesystem_path___is_encoded_char {
    pub _address: u8,
}
pub type std_experimental_filesystem_path___is_path_iter_src = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_experimental_filesystem_path___constructible_from {
    pub _address: u8,
}
pub type std_experimental_filesystem_path__Path = u8;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std_experimental_filesystem_path___null_terminated {
    pub _address: u8,
}
impl Clone for std_experimental_filesystem_path___null_terminated {
    fn clone(&self) -> Self { *self }
}
pub type std_experimental_filesystem_path___value_type_is_char = u8;
pub type std_experimental_filesystem_path_value_type = ::std::os::raw::c_char;
pub type std_experimental_filesystem_path_string_type =
    std_basic_string<std_experimental_filesystem_path_value_type>;
#[repr(C)]
#[derive(Debug)]
pub struct std_experimental_filesystem_path_iterator {
    pub _M_path: *const std_experimental_filesystem_path,
    pub _M_cur: __gnu_cxx___normal_iterator<const_pointer>,
    pub _M_at_end: bool,
}
pub type std_experimental_filesystem_path_iterator_difference_type = isize;
pub type std_experimental_filesystem_path_iterator_value_type =
    std_experimental_filesystem_path;
pub type std_experimental_filesystem_path_iterator_reference =
    *const std_experimental_filesystem_path;
pub type std_experimental_filesystem_path_iterator_pointer =
    *const std_experimental_filesystem_path;
pub type std_experimental_filesystem_path_iterator_iterator_category =
    std_bidirectional_iterator_tag;
pub type std_experimental_filesystem_path_const_iterator =
    std_experimental_filesystem_path_iterator;
#[repr(u8)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std_experimental_filesystem_path__Type {
    _Multi = 0,
    _Root_name = 1,
    _Root_dir = 2,
    _Filename = 3,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std_experimental_filesystem_path__Split {
    _Stem = 0,
    _Extension = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_experimental_filesystem_path__Cvt {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_experimental_filesystem_path__Cmpt {
    pub _base: std_experimental_filesystem_path,
    pub _M_pos: usize,
}
pub type std_experimental_filesystem_path__List = std_vector;
pub const std_experimental_filesystem_path_preferred_separator:
          std_experimental_filesystem_path_value_type =
    47;
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v17__cxx114path6assignEONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_experimental_filesystem_path_assign(this:
                                                       *mut std_experimental_filesystem_path,
                                                   __source:
                                                       *mut std_experimental_filesystem_path_string_type)
     -> *mut std_experimental_filesystem_path;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v17__cxx114path14make_preferredEv"]
    pub fn std_experimental_filesystem_path_make_preferred(this:
                                                               *mut std_experimental_filesystem_path)
     -> *mut std_experimental_filesystem_path;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v17__cxx114path15remove_filenameEv"]
    pub fn std_experimental_filesystem_path_remove_filename(this:
                                                                *mut std_experimental_filesystem_path)
     -> *mut std_experimental_filesystem_path;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v17__cxx114path16replace_filenameERKS3_"]
    pub fn std_experimental_filesystem_path_replace_filename(this:
                                                                 *mut std_experimental_filesystem_path,
                                                             __replacement:
                                                                 *const std_experimental_filesystem_path)
     -> *mut std_experimental_filesystem_path;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v17__cxx114path17replace_extensionERKS3_"]
    pub fn std_experimental_filesystem_path_replace_extension(this:
                                                                  *mut std_experimental_filesystem_path,
                                                              __replacement:
                                                                  *const std_experimental_filesystem_path)
     -> *mut std_experimental_filesystem_path;
}
extern "C" {
    #[link_name = "_ZNSt12experimental10filesystem2v17__cxx114path4swapERS3_"]
    pub fn std_experimental_filesystem_path_swap(this:
                                                     *mut std_experimental_filesystem_path,
                                                 __rhs:
                                                     *mut std_experimental_filesystem_path);
}
extern "C" {
    #[link_name = "_ZNKSt12experimental10filesystem2v17__cxx114path6stringEv"]
    pub fn std_experimental_filesystem_path_string(this:
                                                       *const std_experimental_filesystem_path)
     -> std_string;
}
extern "C" {
    #[link_name =
          "_ZNKSt12experimental10filesystem2v17__cxx114path7wstringEv"]
    pub fn std_experimental_filesystem_path_wstring(this:
                                                        *const std_experimental_filesystem_path)
     -> std_wstring;
}
extern "C" {
    #[link_name =
          "_ZNKSt12experimental10filesystem2v17__cxx114path8u8stringEv"]
    pub fn std_experimental_filesystem_path_u8string(this:
                                                         *const std_experimental_filesystem_path)
     -> std_string;
}
extern "C" {
    #[link_name =
          "_ZNKSt12experimental10filesystem2v17__cxx114path9u16stringEv"]
    pub fn std_experimental_filesystem_path_u16string(this:
                                                          *const std_experimental_filesystem_path)
     -> std_u16string;
}
extern "C" {
    #[link_name =
          "_ZNKSt12experimental10filesystem2v17__cxx114path9u32stringEv"]
    pub fn std_experimental_filesystem_path_u32string(this:
                                                          *const std_experimental_filesystem_path)
     -> std_u32string;
}
extern "C" {
    #[link_name =
          "_ZNKSt12experimental10filesystem2v17__cxx114path14generic_stringEv"]
    pub fn std_experimental_filesystem_path_generic_string(this:
                                                               *const std_experimental_filesystem_path)
     -> std_string;
}
extern "C" {
    #[link_name =
          "_ZNKSt12experimental10filesystem2v17__cxx114path15generic_wstringEv"]
    pub fn std_experimental_filesystem_path_generic_wstring(this:
                                                                *const std_experimental_filesystem_path)
     -> std_wstring;
}
extern "C" {
    #[link_name =
          "_ZNKSt12experimental10filesystem2v17__cxx114path16generic_u8stringEv"]
    pub fn std_experimental_filesystem_path_generic_u8string(this:
                                                                 *const std_experimental_filesystem_path)
     -> std_string;
}
extern "C" {
    #[link_name =
          "_ZNKSt12experimental10filesystem2v17__cxx114path17generic_u16stringEv"]
    pub fn std_experimental_filesystem_path_generic_u16string(this:
                                                                  *const std_experimental_filesystem_path)
     -> std_u16string;
}
extern "C" {
    #[link_name =
          "_ZNKSt12experimental10filesystem2v17__cxx114path17generic_u32stringEv"]
    pub fn std_experimental_filesystem_path_generic_u32string(this:
                                                                  *const std_experimental_filesystem_path)
     -> std_u32string;
}
extern "C" {
    #[link_name =
          "_ZNKSt12experimental10filesystem2v17__cxx114path7compareERKS3_"]
    pub fn std_experimental_filesystem_path_compare(this:
                                                        *const std_experimental_filesystem_path,
                                                    __p:
                                                        *const std_experimental_filesystem_path)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name =
          "_ZNKSt12experimental10filesystem2v17__cxx114path7compareERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_experimental_filesystem_path_compare1(this:
                                                         *const std_experimental_filesystem_path,
                                                     __s:
                                                         *const std_experimental_filesystem_path_string_type)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name =
          "_ZNKSt12experimental10filesystem2v17__cxx114path7compareEPKc"]
    pub fn std_experimental_filesystem_path_compare2(this:
                                                         *const std_experimental_filesystem_path,
                                                     __s:
                                                         *const std_experimental_filesystem_path_value_type)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name =
          "_ZNKSt12experimental10filesystem2v17__cxx114path7compareENS_15fundamentals_v117basic_string_viewIcSt11char_traitsIcEEE"]
    pub fn std_experimental_filesystem_path_compare3(this:
                                                         *const std_experimental_filesystem_path,
                                                     __s:
                                                         std_experimental_basic_string_view<std_experimental_filesystem_path_value_type>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name =
          "_ZNKSt12experimental10filesystem2v17__cxx114path9root_nameEv"]
    pub fn std_experimental_filesystem_path_root_name(this:
                                                          *const std_experimental_filesystem_path)
     -> std_experimental_filesystem_path;
}
extern "C" {
    #[link_name =
          "_ZNKSt12experimental10filesystem2v17__cxx114path14root_directoryEv"]
    pub fn std_experimental_filesystem_path_root_directory(this:
                                                               *const std_experimental_filesystem_path)
     -> std_experimental_filesystem_path;
}
extern "C" {
    #[link_name =
          "_ZNKSt12experimental10filesystem2v17__cxx114path9root_pathEv"]
    pub fn std_experimental_filesystem_path_root_path(this:
                                                          *const std_experimental_filesystem_path)
     -> std_experimental_filesystem_path;
}
extern "C" {
    #[link_name =
          "_ZNKSt12experimental10filesystem2v17__cxx114path13relative_pathEv"]
    pub fn std_experimental_filesystem_path_relative_path(this:
                                                              *const std_experimental_filesystem_path)
     -> std_experimental_filesystem_path;
}
extern "C" {
    #[link_name =
          "_ZNKSt12experimental10filesystem2v17__cxx114path11parent_pathEv"]
    pub fn std_experimental_filesystem_path_parent_path(this:
                                                            *const std_experimental_filesystem_path)
     -> std_experimental_filesystem_path;
}
extern "C" {
    #[link_name =
          "_ZNKSt12experimental10filesystem2v17__cxx114path8filenameEv"]
    pub fn std_experimental_filesystem_path_filename(this:
                                                         *const std_experimental_filesystem_path)
     -> std_experimental_filesystem_path;
}
extern "C" {
    #[link_name = "_ZNKSt12experimental10filesystem2v17__cxx114path4stemEv"]
    pub fn std_experimental_filesystem_path_stem(this:
                                                     *const std_experimental_filesystem_path)
     -> std_experimental_filesystem_path;
}
extern "C" {
    #[link_name =
          "_ZNKSt12experimental10filesystem2v17__cxx114path9extensionEv"]
    pub fn std_experimental_filesystem_path_extension(this:
                                                          *const std_experimental_filesystem_path)
     -> std_experimental_filesystem_path;
}
extern "C" {
    #[link_name =
          "_ZNKSt12experimental10filesystem2v17__cxx114path13has_root_nameEv"]
    pub fn std_experimental_filesystem_path_has_root_name(this:
                                                              *const std_experimental_filesystem_path)
     -> bool;
}
extern "C" {
    #[link_name =
          "_ZNKSt12experimental10filesystem2v17__cxx114path18has_root_directoryEv"]
    pub fn std_experimental_filesystem_path_has_root_directory(this:
                                                                   *const std_experimental_filesystem_path)
     -> bool;
}
extern "C" {
    #[link_name =
          "_ZNKSt12experimental10filesystem2v17__cxx114path13has_root_pathEv"]
    pub fn std_experimental_filesystem_path_has_root_path(this:
                                                              *const std_experimental_filesystem_path)
     -> bool;
}
extern "C" {
    #[link_name =
          "_ZNKSt12experimental10filesystem2v17__cxx114path17has_relative_pathEv"]
    pub fn std_experimental_filesystem_path_has_relative_path(this:
                                                                  *const std_experimental_filesystem_path)
     -> bool;
}
extern "C" {
    #[link_name =
          "_ZNKSt12experimental10filesystem2v17__cxx114path15has_parent_pathEv"]
    pub fn std_experimental_filesystem_path_has_parent_path(this:
                                                                *const std_experimental_filesystem_path)
     -> bool;
}
extern "C" {
    #[link_name =
          "_ZNKSt12experimental10filesystem2v17__cxx114path12has_filenameEv"]
    pub fn std_experimental_filesystem_path_has_filename(this:
                                                             *const std_experimental_filesystem_path)
     -> bool;
}
extern "C" {
    #[link_name =
          "_ZNKSt12experimental10filesystem2v17__cxx114path8has_stemEv"]
    pub fn std_experimental_filesystem_path_has_stem(this:
                                                         *const std_experimental_filesystem_path)
     -> bool;
}
extern "C" {
    #[link_name =
          "_ZNKSt12experimental10filesystem2v17__cxx114path13has_extensionEv"]
    pub fn std_experimental_filesystem_path_has_extension(this:
                                                              *const std_experimental_filesystem_path)
     -> bool;
}
extern "C" {
    #[link_name =
          "_ZNKSt12experimental10filesystem2v17__cxx114path11is_absoluteEv"]
    pub fn std_experimental_filesystem_path_is_absolute(this:
                                                            *const std_experimental_filesystem_path)
     -> bool;
}
extern "C" {
    #[link_name = "_ZNKSt12experimental10filesystem2v17__cxx114path5beginEv"]
    pub fn std_experimental_filesystem_path_begin(this:
                                                      *const std_experimental_filesystem_path)
     -> std_experimental_filesystem_path_iterator;
}
extern "C" {
    #[link_name = "_ZNKSt12experimental10filesystem2v17__cxx114path3endEv"]
    pub fn std_experimental_filesystem_path_end(this:
                                                    *const std_experimental_filesystem_path)
     -> std_experimental_filesystem_path_iterator;
}
impl std_experimental_filesystem_path {
    #[inline]
    pub unsafe fn assign(&mut self,
                         __source:
                             *mut std_experimental_filesystem_path_string_type)
     -> *mut std_experimental_filesystem_path {
        std_experimental_filesystem_path_assign(self, __source)
    }
    #[inline]
    pub unsafe fn make_preferred(&mut self)
     -> *mut std_experimental_filesystem_path {
        std_experimental_filesystem_path_make_preferred(self)
    }
    #[inline]
    pub unsafe fn remove_filename(&mut self)
     -> *mut std_experimental_filesystem_path {
        std_experimental_filesystem_path_remove_filename(self)
    }
    #[inline]
    pub unsafe fn replace_filename(&mut self,
                                   __replacement:
                                       *const std_experimental_filesystem_path)
     -> *mut std_experimental_filesystem_path {
        std_experimental_filesystem_path_replace_filename(self, __replacement)
    }
    #[inline]
    pub unsafe fn replace_extension(&mut self,
                                    __replacement:
                                        *const std_experimental_filesystem_path)
     -> *mut std_experimental_filesystem_path {
        std_experimental_filesystem_path_replace_extension(self,
                                                           __replacement)
    }
    #[inline]
    pub unsafe fn swap(&mut self,
                       __rhs: *mut std_experimental_filesystem_path) {
        std_experimental_filesystem_path_swap(self, __rhs)
    }
    #[inline]
    pub unsafe fn string(&self) -> std_string {
        std_experimental_filesystem_path_string(self)
    }
    #[inline]
    pub unsafe fn wstring(&self) -> std_wstring {
        std_experimental_filesystem_path_wstring(self)
    }
    #[inline]
    pub unsafe fn u8string(&self) -> std_string {
        std_experimental_filesystem_path_u8string(self)
    }
    #[inline]
    pub unsafe fn u16string(&self) -> std_u16string {
        std_experimental_filesystem_path_u16string(self)
    }
    #[inline]
    pub unsafe fn u32string(&self) -> std_u32string {
        std_experimental_filesystem_path_u32string(self)
    }
    #[inline]
    pub unsafe fn generic_string(&self) -> std_string {
        std_experimental_filesystem_path_generic_string(self)
    }
    #[inline]
    pub unsafe fn generic_wstring(&self) -> std_wstring {
        std_experimental_filesystem_path_generic_wstring(self)
    }
    #[inline]
    pub unsafe fn generic_u8string(&self) -> std_string {
        std_experimental_filesystem_path_generic_u8string(self)
    }
    #[inline]
    pub unsafe fn generic_u16string(&self) -> std_u16string {
        std_experimental_filesystem_path_generic_u16string(self)
    }
    #[inline]
    pub unsafe fn generic_u32string(&self) -> std_u32string {
        std_experimental_filesystem_path_generic_u32string(self)
    }
    #[inline]
    pub unsafe fn compare(&self, __p: *const std_experimental_filesystem_path)
     -> ::std::os::raw::c_int {
        std_experimental_filesystem_path_compare(self, __p)
    }
    #[inline]
    pub unsafe fn compare1(&self,
                           __s:
                               *const std_experimental_filesystem_path_string_type)
     -> ::std::os::raw::c_int {
        std_experimental_filesystem_path_compare1(self, __s)
    }
    #[inline]
    pub unsafe fn compare2(&self,
                           __s:
                               *const std_experimental_filesystem_path_value_type)
     -> ::std::os::raw::c_int {
        std_experimental_filesystem_path_compare2(self, __s)
    }
    #[inline]
    pub unsafe fn compare3(&self,
                           __s:
                               std_experimental_basic_string_view<std_experimental_filesystem_path_value_type>)
     -> ::std::os::raw::c_int {
        std_experimental_filesystem_path_compare3(self, __s)
    }
    #[inline]
    pub unsafe fn root_name(&self) -> std_experimental_filesystem_path {
        std_experimental_filesystem_path_root_name(self)
    }
    #[inline]
    pub unsafe fn root_directory(&self) -> std_experimental_filesystem_path {
        std_experimental_filesystem_path_root_directory(self)
    }
    #[inline]
    pub unsafe fn root_path(&self) -> std_experimental_filesystem_path {
        std_experimental_filesystem_path_root_path(self)
    }
    #[inline]
    pub unsafe fn relative_path(&self) -> std_experimental_filesystem_path {
        std_experimental_filesystem_path_relative_path(self)
    }
    #[inline]
    pub unsafe fn parent_path(&self) -> std_experimental_filesystem_path {
        std_experimental_filesystem_path_parent_path(self)
    }
    #[inline]
    pub unsafe fn filename(&self) -> std_experimental_filesystem_path {
        std_experimental_filesystem_path_filename(self)
    }
    #[inline]
    pub unsafe fn stem(&self) -> std_experimental_filesystem_path {
        std_experimental_filesystem_path_stem(self)
    }
    #[inline]
    pub unsafe fn extension(&self) -> std_experimental_filesystem_path {
        std_experimental_filesystem_path_extension(self)
    }
    #[inline]
    pub unsafe fn has_root_name(&self) -> bool {
        std_experimental_filesystem_path_has_root_name(self)
    }
    #[inline]
    pub unsafe fn has_root_directory(&self) -> bool {
        std_experimental_filesystem_path_has_root_directory(self)
    }
    #[inline]
    pub unsafe fn has_root_path(&self) -> bool {
        std_experimental_filesystem_path_has_root_path(self)
    }
    #[inline]
    pub unsafe fn has_relative_path(&self) -> bool {
        std_experimental_filesystem_path_has_relative_path(self)
    }
    #[inline]
    pub unsafe fn has_parent_path(&self) -> bool {
        std_experimental_filesystem_path_has_parent_path(self)
    }
    #[inline]
    pub unsafe fn has_filename(&self) -> bool {
        std_experimental_filesystem_path_has_filename(self)
    }
    #[inline]
    pub unsafe fn has_stem(&self) -> bool {
        std_experimental_filesystem_path_has_stem(self)
    }
    #[inline]
    pub unsafe fn has_extension(&self) -> bool {
        std_experimental_filesystem_path_has_extension(self)
    }
    #[inline]
    pub unsafe fn is_absolute(&self) -> bool {
        std_experimental_filesystem_path_is_absolute(self)
    }
    #[inline]
    pub unsafe fn begin(&self) -> std_experimental_filesystem_path_iterator {
        std_experimental_filesystem_path_begin(self)
    }
    #[inline]
    pub unsafe fn end(&self) -> std_experimental_filesystem_path_iterator {
        std_experimental_filesystem_path_end(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct std_experimental_filesystem_filesystem_error {
    pub _base: std_system_error,
    pub _M_path1: std_experimental_filesystem_path,
    pub _M_path2: std_experimental_filesystem_path,
    pub _M_what: std_string,
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v17__cxx1116filesystem_errorD0Ev"]
    pub fn std_experimental_filesystem_filesystem_error_filesystem_error_destructor(this:
                                                                                        *mut std_experimental_filesystem_filesystem_error);
}
#[repr(C)]
#[derive(Debug)]
pub struct std_experimental_filesystem_directory_entry {
    pub _M_path: std_experimental_filesystem_path,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_experimental_filesystem_directory_iterator {
    pub _M_dir: std_shared_ptr,
}
pub type std_experimental_filesystem_directory_iterator_value_type =
    std_experimental_filesystem_directory_entry;
pub type std_experimental_filesystem_directory_iterator_difference_type =
    isize;
pub type std_experimental_filesystem_directory_iterator_pointer =
    *const std_experimental_filesystem_directory_entry;
pub type std_experimental_filesystem_directory_iterator_reference =
    *const std_experimental_filesystem_directory_entry;
pub type std_experimental_filesystem_directory_iterator_iterator_category =
    std_input_iterator_tag;
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v17__cxx1118directory_iterator9incrementERSt10error_code"]
    pub fn std_experimental_filesystem_directory_iterator_increment(this:
                                                                        *mut std_experimental_filesystem_directory_iterator,
                                                                    __ec:
                                                                        *mut std_error_code)
     -> *mut std_experimental_filesystem_directory_iterator;
}
impl std_experimental_filesystem_directory_iterator {
    #[inline]
    pub unsafe fn increment(&mut self, __ec: *mut std_error_code)
     -> *mut std_experimental_filesystem_directory_iterator {
        std_experimental_filesystem_directory_iterator_increment(self, __ec)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct std_experimental_filesystem_recursive_directory_iterator {
    pub _M_dirs: std_shared_ptr,
    pub _M_options: std_experimental_filesystem_directory_options,
    pub _M_pending: bool,
}
pub type std_experimental_filesystem_recursive_directory_iterator_value_type =
    std_experimental_filesystem_directory_entry;
pub type std_experimental_filesystem_recursive_directory_iterator_difference_type
    = isize;
pub type std_experimental_filesystem_recursive_directory_iterator_pointer =
    *const std_experimental_filesystem_directory_entry;
pub type std_experimental_filesystem_recursive_directory_iterator_reference =
    *const std_experimental_filesystem_directory_entry;
pub type std_experimental_filesystem_recursive_directory_iterator_iterator_category
    = std_input_iterator_tag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_experimental_filesystem_recursive_directory_iterator__Dir_stack {
    _unused: [u8; 0],
}
extern "C" {
    #[link_name =
          "_ZNKSt12experimental10filesystem2v17__cxx1128recursive_directory_iterator5depthEv"]
    pub fn std_experimental_filesystem_recursive_directory_iterator_depth(this:
                                                                              *const std_experimental_filesystem_recursive_directory_iterator)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v17__cxx1128recursive_directory_iterator9incrementERSt10error_code"]
    pub fn std_experimental_filesystem_recursive_directory_iterator_increment(this:
                                                                                  *mut std_experimental_filesystem_recursive_directory_iterator,
                                                                              __ec:
                                                                                  *mut std_error_code)
     -> *mut std_experimental_filesystem_recursive_directory_iterator;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v17__cxx1128recursive_directory_iterator3popEv"]
    pub fn std_experimental_filesystem_recursive_directory_iterator_pop(this:
                                                                            *mut std_experimental_filesystem_recursive_directory_iterator);
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v17__cxx1128recursive_directory_iterator3popERSt10error_code"]
    pub fn std_experimental_filesystem_recursive_directory_iterator_pop1(this:
                                                                             *mut std_experimental_filesystem_recursive_directory_iterator,
                                                                         arg1:
                                                                             *mut std_error_code);
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v17__cxx1128recursive_directory_iteratorD1Ev"]
    pub fn std_experimental_filesystem_recursive_directory_iterator_recursive_directory_iterator_destructor(this:
                                                                                                                *mut std_experimental_filesystem_recursive_directory_iterator);
}
impl std_experimental_filesystem_recursive_directory_iterator {
    #[inline]
    pub unsafe fn depth(&self) -> ::std::os::raw::c_int {
        std_experimental_filesystem_recursive_directory_iterator_depth(self)
    }
    #[inline]
    pub unsafe fn increment(&mut self, __ec: *mut std_error_code)
     -> *mut std_experimental_filesystem_recursive_directory_iterator {
        std_experimental_filesystem_recursive_directory_iterator_increment(self,
                                                                           __ec)
    }
    #[inline]
    pub unsafe fn pop(&mut self) {
        std_experimental_filesystem_recursive_directory_iterator_pop(self)
    }
    #[inline]
    pub unsafe fn pop1(&mut self, arg1: *mut std_error_code) {
        std_experimental_filesystem_recursive_directory_iterator_pop1(self,
                                                                      arg1)
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std_experimental_filesystem_recursive_directory_iterator_recursive_directory_iterator_destructor(self)
    }
}
pub type std_experimental_filesystem___basic_string_view<_CharT> =
    std_experimental_basic_string_view<_CharT>;
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v17__cxx1110hash_valueERKNS2_4pathE"]
    pub fn std_experimental_filesystem_hash_value(__p:
                                                      *const std_experimental_filesystem_path)
     -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_experimental_filesystem__Dir {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug)]
pub struct std_experimental_filesystem___directory_iterator_proxy {
    pub _M_entry: std_experimental_filesystem_directory_entry,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_experimental_filesystem_file_status {
    pub _M_type: std_experimental_filesystem_file_type,
    pub _M_perms: std_experimental_filesystem_perms,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std_experimental_filesystem_space_info {
    pub capacity: uintmax_t,
    pub free: uintmax_t,
    pub available: uintmax_t,
}
impl Clone for std_experimental_filesystem_space_info {
    fn clone(&self) -> Self { *self }
}
#[repr(i8)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std_experimental_filesystem_file_type {
    none = 0,
    not_found = -1,
    regular = 1,
    directory = 2,
    symlink = 3,
    block = 4,
    character = 5,
    fifo = 6,
    socket = 7,
    unknown = 8,
}
#[repr(u16)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std_experimental_filesystem_copy_options {
    none = 0,
    skip_existing = 1,
    overwrite_existing = 2,
    update_existing = 4,
    recursive = 8,
    copy_symlinks = 16,
    skip_symlinks = 32,
    directories_only = 64,
    create_symlinks = 128,
    create_hard_links = 256,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std_experimental_filesystem_perms {
    none = 0,
    owner_read = 256,
    owner_write = 128,
    owner_exec = 64,
    owner_all = 448,
    group_read = 32,
    group_write = 16,
    group_exec = 8,
    group_all = 56,
    others_read = 4,
    others_write = 2,
    others_exec = 1,
    others_all = 7,
    all = 511,
    set_uid = 2048,
    set_gid = 1024,
    sticky_bit = 512,
    mask = 4095,
    unknown = 65535,
    add_perms = 65536,
    remove_perms = 131072,
    symlink_nofollow = 262144,
}
#[repr(u8)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std_experimental_filesystem_directory_options {
    none = 0,
    follow_directory_symlink = 1,
    skip_permission_denied = 2,
}
pub type std_experimental_filesystem_file_time_type =
    std_chrono_time_point<std_chrono_duration<::std::os::raw::c_long>>;
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v14copyERKNS1_7__cxx114pathES5_NS1_12copy_optionsE"]
    pub fn std_experimental_filesystem_copy(__from:
                                                *const std_experimental_filesystem_path,
                                            __to:
                                                *const std_experimental_filesystem_path,
                                            __options:
                                                std_experimental_filesystem_copy_options);
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v14copyERKNS1_7__cxx114pathES5_NS1_12copy_optionsERSt10error_code"]
    pub fn std_experimental_filesystem_copy1(__from:
                                                 *const std_experimental_filesystem_path,
                                             __to:
                                                 *const std_experimental_filesystem_path,
                                             __options:
                                                 std_experimental_filesystem_copy_options,
                                             arg1: *mut std_error_code);
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v19copy_fileERKNS1_7__cxx114pathES5_NS1_12copy_optionsE"]
    pub fn std_experimental_filesystem_copy_file(__from:
                                                     *const std_experimental_filesystem_path,
                                                 __to:
                                                     *const std_experimental_filesystem_path,
                                                 __option:
                                                     std_experimental_filesystem_copy_options)
     -> bool;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v19copy_fileERKNS1_7__cxx114pathES5_NS1_12copy_optionsERSt10error_code"]
    pub fn std_experimental_filesystem_copy_file1(__from:
                                                      *const std_experimental_filesystem_path,
                                                  __to:
                                                      *const std_experimental_filesystem_path,
                                                  __option:
                                                      std_experimental_filesystem_copy_options,
                                                  arg1: *mut std_error_code)
     -> bool;
}
extern "C" {
    #[link_name = "_ZNSt12experimental10filesystem2v112current_pathB5cxx11Ev"]
    pub fn std_experimental_filesystem_current_path()
     -> std_experimental_filesystem_path;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v16statusERKNS1_7__cxx114pathE"]
    pub fn std_experimental_filesystem_status(arg1:
                                                  *const std_experimental_filesystem_path)
     -> std_experimental_filesystem_file_status;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v16statusERKNS1_7__cxx114pathERSt10error_code"]
    pub fn std_experimental_filesystem_status1(arg1:
                                                   *const std_experimental_filesystem_path,
                                               arg2: *mut std_error_code)
     -> std_experimental_filesystem_file_status;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v112status_knownENS1_11file_statusE"]
    pub fn std_experimental_filesystem_status_known(arg1:
                                                        std_experimental_filesystem_file_status)
     -> bool;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v114symlink_statusERKNS1_7__cxx114pathE"]
    pub fn std_experimental_filesystem_symlink_status(arg1:
                                                          *const std_experimental_filesystem_path)
     -> std_experimental_filesystem_file_status;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v114symlink_statusERKNS1_7__cxx114pathERSt10error_code"]
    pub fn std_experimental_filesystem_symlink_status1(arg1:
                                                           *const std_experimental_filesystem_path,
                                                       arg2:
                                                           *mut std_error_code)
     -> std_experimental_filesystem_file_status;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v115is_regular_fileENS1_11file_statusE"]
    pub fn std_experimental_filesystem_is_regular_file(arg1:
                                                           std_experimental_filesystem_file_status)
     -> bool;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v110is_symlinkENS1_11file_statusE"]
    pub fn std_experimental_filesystem_is_symlink(arg1:
                                                      std_experimental_filesystem_file_status)
     -> bool;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v18absoluteERKNS1_7__cxx114pathES5_"]
    pub fn std_experimental_filesystem_absolute(__p:
                                                    *const std_experimental_filesystem_path,
                                                __base:
                                                    *const std_experimental_filesystem_path)
     -> std_experimental_filesystem_path;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v19canonicalERKNS1_7__cxx114pathES5_"]
    pub fn std_experimental_filesystem_canonical(__p:
                                                     *const std_experimental_filesystem_path,
                                                 __base:
                                                     *const std_experimental_filesystem_path)
     -> std_experimental_filesystem_path;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v19canonicalERKNS1_7__cxx114pathERSt10error_code"]
    pub fn std_experimental_filesystem_canonical1(__p:
                                                      *const std_experimental_filesystem_path,
                                                  __ec: *mut std_error_code)
     -> std_experimental_filesystem_path;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v19canonicalERKNS1_7__cxx114pathES5_RSt10error_code"]
    pub fn std_experimental_filesystem_canonical2(__p:
                                                      *const std_experimental_filesystem_path,
                                                  __base:
                                                      *const std_experimental_filesystem_path,
                                                  __ec: *mut std_error_code)
     -> std_experimental_filesystem_path;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v112copy_symlinkERKNS1_7__cxx114pathES5_"]
    pub fn std_experimental_filesystem_copy_symlink(__existing_symlink:
                                                        *const std_experimental_filesystem_path,
                                                    __new_symlink:
                                                        *const std_experimental_filesystem_path);
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v112copy_symlinkERKNS1_7__cxx114pathES5_RSt10error_code"]
    pub fn std_experimental_filesystem_copy_symlink1(__existing_symlink:
                                                         *const std_experimental_filesystem_path,
                                                     __new_symlink:
                                                         *const std_experimental_filesystem_path,
                                                     __ec:
                                                         *mut std_error_code);
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v118create_directoriesERKNS1_7__cxx114pathE"]
    pub fn std_experimental_filesystem_create_directories(__p:
                                                              *const std_experimental_filesystem_path)
     -> bool;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v118create_directoriesERKNS1_7__cxx114pathERSt10error_code"]
    pub fn std_experimental_filesystem_create_directories1(__p:
                                                               *const std_experimental_filesystem_path,
                                                           __ec:
                                                               *mut std_error_code)
     -> bool;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v116create_directoryERKNS1_7__cxx114pathE"]
    pub fn std_experimental_filesystem_create_directory(__p:
                                                            *const std_experimental_filesystem_path)
     -> bool;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v116create_directoryERKNS1_7__cxx114pathERSt10error_code"]
    pub fn std_experimental_filesystem_create_directory1(__p:
                                                             *const std_experimental_filesystem_path,
                                                         __ec:
                                                             *mut std_error_code)
     -> bool;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v116create_directoryERKNS1_7__cxx114pathES5_"]
    pub fn std_experimental_filesystem_create_directory2(__p:
                                                             *const std_experimental_filesystem_path,
                                                         attributes:
                                                             *const std_experimental_filesystem_path)
     -> bool;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v116create_directoryERKNS1_7__cxx114pathES5_RSt10error_code"]
    pub fn std_experimental_filesystem_create_directory3(__p:
                                                             *const std_experimental_filesystem_path,
                                                         attributes:
                                                             *const std_experimental_filesystem_path,
                                                         __ec:
                                                             *mut std_error_code)
     -> bool;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v124create_directory_symlinkERKNS1_7__cxx114pathES5_"]
    pub fn std_experimental_filesystem_create_directory_symlink(__to:
                                                                    *const std_experimental_filesystem_path,
                                                                __new_symlink:
                                                                    *const std_experimental_filesystem_path);
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v124create_directory_symlinkERKNS1_7__cxx114pathES5_RSt10error_code"]
    pub fn std_experimental_filesystem_create_directory_symlink1(__to:
                                                                     *const std_experimental_filesystem_path,
                                                                 __new_symlink:
                                                                     *const std_experimental_filesystem_path,
                                                                 __ec:
                                                                     *mut std_error_code);
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v116create_hard_linkERKNS1_7__cxx114pathES5_"]
    pub fn std_experimental_filesystem_create_hard_link(__to:
                                                            *const std_experimental_filesystem_path,
                                                        __new_hard_link:
                                                            *const std_experimental_filesystem_path);
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v116create_hard_linkERKNS1_7__cxx114pathES5_RSt10error_code"]
    pub fn std_experimental_filesystem_create_hard_link1(__to:
                                                             *const std_experimental_filesystem_path,
                                                         __new_hard_link:
                                                             *const std_experimental_filesystem_path,
                                                         __ec:
                                                             *mut std_error_code);
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v114create_symlinkERKNS1_7__cxx114pathES5_"]
    pub fn std_experimental_filesystem_create_symlink(__to:
                                                          *const std_experimental_filesystem_path,
                                                      __new_symlink:
                                                          *const std_experimental_filesystem_path);
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v114create_symlinkERKNS1_7__cxx114pathES5_RSt10error_code"]
    pub fn std_experimental_filesystem_create_symlink1(__to:
                                                           *const std_experimental_filesystem_path,
                                                       __new_symlink:
                                                           *const std_experimental_filesystem_path,
                                                       __ec:
                                                           *mut std_error_code);
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v112current_pathB5cxx11ERSt10error_code"]
    pub fn std_experimental_filesystem_current_path1(__ec:
                                                         *mut std_error_code)
     -> std_experimental_filesystem_path;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v112current_pathERKNS1_7__cxx114pathE"]
    pub fn std_experimental_filesystem_current_path2(__p:
                                                         *const std_experimental_filesystem_path);
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v112current_pathERKNS1_7__cxx114pathERSt10error_code"]
    pub fn std_experimental_filesystem_current_path3(__p:
                                                         *const std_experimental_filesystem_path,
                                                     __ec:
                                                         *mut std_error_code);
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v110equivalentERKNS1_7__cxx114pathES5_"]
    pub fn std_experimental_filesystem_equivalent(__p1:
                                                      *const std_experimental_filesystem_path,
                                                  __p2:
                                                      *const std_experimental_filesystem_path)
     -> bool;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v110equivalentERKNS1_7__cxx114pathES5_RSt10error_code"]
    pub fn std_experimental_filesystem_equivalent1(__p1:
                                                       *const std_experimental_filesystem_path,
                                                   __p2:
                                                       *const std_experimental_filesystem_path,
                                                   __ec: *mut std_error_code)
     -> bool;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v19file_sizeERKNS1_7__cxx114pathE"]
    pub fn std_experimental_filesystem_file_size(__p:
                                                     *const std_experimental_filesystem_path)
     -> uintmax_t;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v19file_sizeERKNS1_7__cxx114pathERSt10error_code"]
    pub fn std_experimental_filesystem_file_size1(__p:
                                                      *const std_experimental_filesystem_path,
                                                  __ec: *mut std_error_code)
     -> uintmax_t;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v115hard_link_countERKNS1_7__cxx114pathE"]
    pub fn std_experimental_filesystem_hard_link_count(__p:
                                                           *const std_experimental_filesystem_path)
     -> uintmax_t;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v115hard_link_countERKNS1_7__cxx114pathERSt10error_code"]
    pub fn std_experimental_filesystem_hard_link_count1(__p:
                                                            *const std_experimental_filesystem_path,
                                                        __ec:
                                                            *mut std_error_code)
     -> uintmax_t;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v18is_emptyERKNS1_7__cxx114pathE"]
    pub fn std_experimental_filesystem_is_empty(__p:
                                                    *const std_experimental_filesystem_path)
     -> bool;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v18is_emptyERKNS1_7__cxx114pathERSt10error_code"]
    pub fn std_experimental_filesystem_is_empty1(__p:
                                                     *const std_experimental_filesystem_path,
                                                 __ec: *mut std_error_code)
     -> bool;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v115last_write_timeERKNS1_7__cxx114pathE"]
    pub fn std_experimental_filesystem_last_write_time(__p:
                                                           *const std_experimental_filesystem_path)
     -> std_experimental_filesystem_file_time_type;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v115last_write_timeERKNS1_7__cxx114pathERSt10error_code"]
    pub fn std_experimental_filesystem_last_write_time1(__p:
                                                            *const std_experimental_filesystem_path,
                                                        __ec:
                                                            *mut std_error_code)
     -> std_experimental_filesystem_file_time_type;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v115last_write_timeERKNS1_7__cxx114pathENSt6chrono10time_pointINS6_3_V212system_clockENS6_8durationIlSt5ratioILl1ELl1000000000EEEEEE"]
    pub fn std_experimental_filesystem_last_write_time2(__p:
                                                            *const std_experimental_filesystem_path,
                                                        __new_time:
                                                            std_experimental_filesystem_file_time_type);
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v115last_write_timeERKNS1_7__cxx114pathENSt6chrono10time_pointINS6_3_V212system_clockENS6_8durationIlSt5ratioILl1ELl1000000000EEEEEERSt10error_code"]
    pub fn std_experimental_filesystem_last_write_time3(__p:
                                                            *const std_experimental_filesystem_path,
                                                        __new_time:
                                                            std_experimental_filesystem_file_time_type,
                                                        __ec:
                                                            *mut std_error_code);
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v111permissionsERKNS1_7__cxx114pathENS1_5permsE"]
    pub fn std_experimental_filesystem_permissions(__p:
                                                       *const std_experimental_filesystem_path,
                                                   __prms:
                                                       std_experimental_filesystem_perms);
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v111permissionsERKNS1_7__cxx114pathENS1_5permsERSt10error_code"]
    pub fn std_experimental_filesystem_permissions1(__p:
                                                        *const std_experimental_filesystem_path,
                                                    __prms:
                                                        std_experimental_filesystem_perms,
                                                    __ec:
                                                        *mut std_error_code);
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v112read_symlinkERKNS1_7__cxx114pathE"]
    pub fn std_experimental_filesystem_read_symlink(__p:
                                                        *const std_experimental_filesystem_path)
     -> std_experimental_filesystem_path;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v112read_symlinkERKNS1_7__cxx114pathERSt10error_code"]
    pub fn std_experimental_filesystem_read_symlink1(__p:
                                                         *const std_experimental_filesystem_path,
                                                     __ec:
                                                         *mut std_error_code)
     -> std_experimental_filesystem_path;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v16removeERKNS1_7__cxx114pathE"]
    pub fn std_experimental_filesystem_remove(__p:
                                                  *const std_experimental_filesystem_path)
     -> bool;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v16removeERKNS1_7__cxx114pathERSt10error_code"]
    pub fn std_experimental_filesystem_remove1(__p:
                                                   *const std_experimental_filesystem_path,
                                               __ec: *mut std_error_code)
     -> bool;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v110remove_allERKNS1_7__cxx114pathE"]
    pub fn std_experimental_filesystem_remove_all(__p:
                                                      *const std_experimental_filesystem_path)
     -> uintmax_t;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v110remove_allERKNS1_7__cxx114pathERSt10error_code"]
    pub fn std_experimental_filesystem_remove_all1(__p:
                                                       *const std_experimental_filesystem_path,
                                                   __ec: *mut std_error_code)
     -> uintmax_t;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v16renameERKNS1_7__cxx114pathES5_"]
    pub fn std_experimental_filesystem_rename(__from:
                                                  *const std_experimental_filesystem_path,
                                              __to:
                                                  *const std_experimental_filesystem_path);
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v16renameERKNS1_7__cxx114pathES5_RSt10error_code"]
    pub fn std_experimental_filesystem_rename1(__from:
                                                   *const std_experimental_filesystem_path,
                                               __to:
                                                   *const std_experimental_filesystem_path,
                                               __ec: *mut std_error_code);
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v111resize_fileERKNS1_7__cxx114pathEm"]
    pub fn std_experimental_filesystem_resize_file(__p:
                                                       *const std_experimental_filesystem_path,
                                                   __size: uintmax_t);
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v111resize_fileERKNS1_7__cxx114pathEmRSt10error_code"]
    pub fn std_experimental_filesystem_resize_file1(__p:
                                                        *const std_experimental_filesystem_path,
                                                    __size: uintmax_t,
                                                    __ec:
                                                        *mut std_error_code);
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v15spaceERKNS1_7__cxx114pathE"]
    pub fn std_experimental_filesystem_space(__p:
                                                 *const std_experimental_filesystem_path)
     -> std_experimental_filesystem_space_info;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v15spaceERKNS1_7__cxx114pathERSt10error_code"]
    pub fn std_experimental_filesystem_space1(__p:
                                                  *const std_experimental_filesystem_path,
                                              __ec: *mut std_error_code)
     -> std_experimental_filesystem_space_info;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v115system_completeERKNS1_7__cxx114pathE"]
    pub fn std_experimental_filesystem_system_complete(__p:
                                                           *const std_experimental_filesystem_path)
     -> std_experimental_filesystem_path;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v115system_completeERKNS1_7__cxx114pathERSt10error_code"]
    pub fn std_experimental_filesystem_system_complete1(__p:
                                                            *const std_experimental_filesystem_path,
                                                        __ec:
                                                            *mut std_error_code)
     -> std_experimental_filesystem_path;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v119temp_directory_pathB5cxx11Ev"]
    pub fn std_experimental_filesystem_temp_directory_path()
     -> std_experimental_filesystem_path;
}
extern "C" {
    #[link_name =
          "_ZNSt12experimental10filesystem2v119temp_directory_pathB5cxx11ERSt10error_code"]
    pub fn std_experimental_filesystem_temp_directory_path1(__ec:
                                                                *mut std_error_code)
     -> std_experimental_filesystem_path;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_experimental_basic_string_view<_CharT> {
    pub _M_len: usize,
    pub _M_str: *mut _CharT,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type std_experimental_basic_string_view_traits_type<_Traits> = _Traits;
pub type std_experimental_basic_string_view_value_type<_CharT> = _CharT;
pub type std_experimental_basic_string_view_pointer<_CharT> = *mut _CharT;
pub type std_experimental_basic_string_view_const_pointer<_CharT> =
    *mut _CharT;
pub type std_experimental_basic_string_view_reference<_CharT> = *mut _CharT;
pub type std_experimental_basic_string_view_const_reference<_CharT> =
    *mut _CharT;
pub type std_experimental_basic_string_view_const_iterator<_CharT> =
    *mut _CharT;
pub type std_experimental_basic_string_view_iterator<_CharT> =
    std_experimental_basic_string_view_const_iterator<_CharT>;
pub type std_experimental_basic_string_view_const_reverse_iterator<_CharT> =
    std_reverse_iterator<std_experimental_basic_string_view_const_iterator<_CharT>>;
pub type std_experimental_basic_string_view_reverse_iterator<_CharT> =
    std_experimental_basic_string_view_const_reverse_iterator<_CharT>;
pub type std_experimental_basic_string_view_size_type = usize;
pub type std_experimental_basic_string_view_difference_type = isize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_experimental___detail___identity {
    pub _address: u8,
}
pub type std_experimental___detail___identity_type<_Tp> = _Tp;
pub type std_experimental___detail___idt =
    std_experimental___detail___identity;
pub type std_experimental_string_view =
    std_experimental_basic_string_view<::std::os::raw::c_char>;
pub type std_experimental_wstring_view =
    std_experimental_basic_string_view<u16>;
pub type std_experimental_u16string_view =
    std_experimental_basic_string_view<u16>;
pub type std_experimental_u32string_view =
    std_experimental_basic_string_view<u32>;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std__Ios_Fmtflags {
    _S_boolalpha = 1,
    _S_dec = 2,
    _S_fixed = 4,
    _S_hex = 8,
    _S_internal = 16,
    _S_left = 32,
    _S_oct = 64,
    _S_right = 128,
    _S_scientific = 256,
    _S_showbase = 512,
    _S_showpoint = 1024,
    _S_showpos = 2048,
    _S_skipws = 4096,
    _S_unitbuf = 8192,
    _S_uppercase = 16384,
    _S_adjustfield = 176,
    _S_basefield = 74,
    _S_floatfield = 260,
    _S_ios_fmtflags_end = 65536,
    _S_ios_fmtflags_max = 2147483647,
    _S_ios_fmtflags_min = -2147483648,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std__Ios_Openmode {
    _S_app = 1,
    _S_ate = 2,
    _S_bin = 4,
    _S_in = 8,
    _S_out = 16,
    _S_trunc = 32,
    _S_ios_openmode_end = 65536,
    _S_ios_openmode_max = 2147483647,
    _S_ios_openmode_min = -2147483648,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std__Ios_Iostate {
    _S_goodbit = 0,
    _S_badbit = 1,
    _S_eofbit = 2,
    _S_failbit = 4,
    _S_ios_iostate_end = 65536,
    _S_ios_iostate_max = 2147483647,
    _S_ios_iostate_min = -2147483648,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std__Ios_Seekdir {
    _S_beg = 0,
    _S_cur = 1,
    _S_end = 2,
    _S_ios_seekdir_end = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std_io_errc { stream = 1, }
extern "C" {
    #[link_name = "_ZSt17iostream_categoryv"]
    pub fn std_iostream_category() -> *const std_error_category;
}
extern "C" {
    #[link_name =
          "_ZSt21__copy_streambufs_eofIcSt11char_traitsIcEElPSt15basic_streambufIT_T0_ES6_Rb"]
    pub fn std___copy_streambufs_eof(__sbin:
                                         *mut std_basic_streambuf<::std::os::raw::c_char>,
                                     __sbout:
                                         *mut std_basic_streambuf<::std::os::raw::c_char>,
                                     __ineof: *mut bool) -> std_streamsize;
}
extern "C" {
    #[link_name =
          "_ZSt21__copy_streambufs_eofIwSt11char_traitsIwEElPSt15basic_streambufIT_T0_ES6_Rb"]
    pub fn std___copy_streambufs_eof1(__sbin: *mut std_basic_streambuf<u16>,
                                      __sbout: *mut std_basic_streambuf<u16>,
                                      __ineof: *mut bool) -> std_streamsize;
}
extern "C" {
    #[link_name =
          "_ZSt14__convert_to_vIfEvPKcRT_RSt12_Ios_IostateRKP15__locale_struct"]
    pub fn std___convert_to_v(arg1: *const ::std::os::raw::c_char,
                              arg2: *mut f32, arg3: *mut std_ios_base_iostate,
                              arg4: *const std___c_locale);
}
extern "C" {
    #[link_name =
          "_ZSt14__convert_to_vIdEvPKcRT_RSt12_Ios_IostateRKP15__locale_struct"]
    pub fn std___convert_to_v1(arg1: *const ::std::os::raw::c_char,
                               arg2: *mut f64,
                               arg3: *mut std_ios_base_iostate,
                               arg4: *const std___c_locale);
}
extern "C" {
    #[link_name =
          "_ZSt14__convert_to_vIeEvPKcRT_RSt12_Ios_IostateRKP15__locale_struct"]
    pub fn std___convert_to_v2(arg1: *const ::std::os::raw::c_char,
                               arg2: *mut f64,
                               arg3: *mut std_ios_base_iostate,
                               arg4: *const std___c_locale);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___pad {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std___ctype_abstract_base {
    pub _base: std_locale_facet,
}
pub type std___ctype_abstract_base_char_type<_CharT> = _CharT;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct std___num_base {
    pub _address: u8,
}
pub const std___num_base__S_ominus: std___num_base__bindgen_ty_1 =
    std___num_base__bindgen_ty_1::_S_ominus;
pub const std___num_base__S_oplus: std___num_base__bindgen_ty_1 =
    std___num_base__bindgen_ty_1::_S_oplus;
pub const std___num_base__S_ox: std___num_base__bindgen_ty_1 =
    std___num_base__bindgen_ty_1::_S_ox;
pub const std___num_base__S_oX: std___num_base__bindgen_ty_1 =
    std___num_base__bindgen_ty_1::_S_oX;
pub const std___num_base__S_odigits: std___num_base__bindgen_ty_1 =
    std___num_base__bindgen_ty_1::_S_odigits;
pub const std___num_base__S_odigits_end: std___num_base__bindgen_ty_1 =
    std___num_base__bindgen_ty_1::_S_odigits_end;
pub const std___num_base__S_oudigits: std___num_base__bindgen_ty_1 =
    std___num_base__bindgen_ty_1::_S_odigits_end;
pub const std___num_base__S_oudigits_end: std___num_base__bindgen_ty_1 =
    std___num_base__bindgen_ty_1::_S_oudigits_end;
pub const std___num_base__S_oe: std___num_base__bindgen_ty_1 =
    std___num_base__bindgen_ty_1::_S_oe;
pub const std___num_base__S_oE: std___num_base__bindgen_ty_1 =
    std___num_base__bindgen_ty_1::_S_oE;
pub const std___num_base__S_oend: std___num_base__bindgen_ty_1 =
    std___num_base__bindgen_ty_1::_S_oudigits_end;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std___num_base__bindgen_ty_1 {
    _S_ominus = 0,
    _S_oplus = 1,
    _S_ox = 2,
    _S_oX = 3,
    _S_odigits = 4,
    _S_odigits_end = 20,
    _S_oudigits_end = 36,
    _S_oe = 18,
    _S_oE = 34,
}
pub const std___num_base__S_iminus: std___num_base__bindgen_ty_2 =
    std___num_base__bindgen_ty_2::_S_iminus;
pub const std___num_base__S_iplus: std___num_base__bindgen_ty_2 =
    std___num_base__bindgen_ty_2::_S_iplus;
pub const std___num_base__S_ix: std___num_base__bindgen_ty_2 =
    std___num_base__bindgen_ty_2::_S_ix;
pub const std___num_base__S_iX: std___num_base__bindgen_ty_2 =
    std___num_base__bindgen_ty_2::_S_iX;
pub const std___num_base__S_izero: std___num_base__bindgen_ty_2 =
    std___num_base__bindgen_ty_2::_S_izero;
pub const std___num_base__S_ie: std___num_base__bindgen_ty_2 =
    std___num_base__bindgen_ty_2::_S_ie;
pub const std___num_base__S_iE: std___num_base__bindgen_ty_2 =
    std___num_base__bindgen_ty_2::_S_iE;
pub const std___num_base__S_iend: std___num_base__bindgen_ty_2 =
    std___num_base__bindgen_ty_2::_S_iend;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std___num_base__bindgen_ty_2 {
    _S_iminus = 0,
    _S_iplus = 1,
    _S_ix = 2,
    _S_iX = 3,
    _S_izero = 4,
    _S_ie = 18,
    _S_iE = 24,
    _S_iend = 26,
}
extern "C" {
    #[link_name = "_ZNSt10__num_base12_S_atoms_outE"]
    pub static mut std___num_base__S_atoms_out: *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "_ZNSt10__num_base11_S_atoms_inE"]
    pub static mut std___num_base__S_atoms_in: *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "_ZNSt10__num_base15_S_format_floatERKSt8ios_basePcc"]
    pub fn std___num_base__S_format_float(__io: *const std_ios_base,
                                          __fptr: *mut ::std::os::raw::c_char,
                                          __mod: ::std::os::raw::c_char);
}
impl Clone for std___num_base {
    fn clone(&self) -> Self { *self }
}
impl std___num_base {
    #[inline]
    pub unsafe fn _S_format_float(__io: *const std_ios_base,
                                  __fptr: *mut ::std::os::raw::c_char,
                                  __mod: ::std::os::raw::c_char) {
        std___num_base__S_format_float(__io, __fptr, __mod)
    }
}
#[repr(C)]
pub struct std___numpunct_cache<_CharT> {
    pub _base: std_locale_facet,
    pub _M_grouping: *const ::std::os::raw::c_char,
    pub _M_grouping_size: usize,
    pub _M_use_grouping: bool,
    pub _M_truename: *mut _CharT,
    pub _M_truename_size: usize,
    pub _M_falsename: *mut _CharT,
    pub _M_falsename_size: usize,
    pub _M_decimal_point: _CharT,
    pub _M_thousands_sep: _CharT,
    pub _M_atoms_out: [_CharT; 36usize],
    pub _M_atoms_in: [_CharT; 26usize],
    pub _M_allocated: bool,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___use_cache {
    pub _address: u8,
}
extern "C" {
    #[link_name =
          "_ZSt17__verify_groupingPKcmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std___verify_grouping(__grouping: *const ::std::os::raw::c_char,
                                 __grouping_size: usize,
                                 __grouping_tmp: *const std_string) -> bool;
}
#[repr(C)]
#[derive(Debug)]
pub struct std___timepunct_cache<_CharT> {
    pub _base: std_locale_facet,
    pub _M_date_format: *mut _CharT,
    pub _M_date_era_format: *mut _CharT,
    pub _M_time_format: *mut _CharT,
    pub _M_time_era_format: *mut _CharT,
    pub _M_date_time_format: *mut _CharT,
    pub _M_date_time_era_format: *mut _CharT,
    pub _M_am: *mut _CharT,
    pub _M_pm: *mut _CharT,
    pub _M_am_pm_format: *mut _CharT,
    pub _M_day1: *mut _CharT,
    pub _M_day2: *mut _CharT,
    pub _M_day3: *mut _CharT,
    pub _M_day4: *mut _CharT,
    pub _M_day5: *mut _CharT,
    pub _M_day6: *mut _CharT,
    pub _M_day7: *mut _CharT,
    pub _M_aday1: *mut _CharT,
    pub _M_aday2: *mut _CharT,
    pub _M_aday3: *mut _CharT,
    pub _M_aday4: *mut _CharT,
    pub _M_aday5: *mut _CharT,
    pub _M_aday6: *mut _CharT,
    pub _M_aday7: *mut _CharT,
    pub _M_month01: *mut _CharT,
    pub _M_month02: *mut _CharT,
    pub _M_month03: *mut _CharT,
    pub _M_month04: *mut _CharT,
    pub _M_month05: *mut _CharT,
    pub _M_month06: *mut _CharT,
    pub _M_month07: *mut _CharT,
    pub _M_month08: *mut _CharT,
    pub _M_month09: *mut _CharT,
    pub _M_month10: *mut _CharT,
    pub _M_month11: *mut _CharT,
    pub _M_month12: *mut _CharT,
    pub _M_amonth01: *mut _CharT,
    pub _M_amonth02: *mut _CharT,
    pub _M_amonth03: *mut _CharT,
    pub _M_amonth04: *mut _CharT,
    pub _M_amonth05: *mut _CharT,
    pub _M_amonth06: *mut _CharT,
    pub _M_amonth07: *mut _CharT,
    pub _M_amonth08: *mut _CharT,
    pub _M_amonth09: *mut _CharT,
    pub _M_amonth10: *mut _CharT,
    pub _M_amonth11: *mut _CharT,
    pub _M_amonth12: *mut _CharT,
    pub _M_allocated: bool,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
extern "C" {
    #[link_name = "_ZNSt17__timepunct_cacheIcE12_S_timezonesE"]
    pub static mut std__S_timezones: [*const ::std::os::raw::c_char; 14usize];
}
#[repr(C)]
#[derive(Debug)]
pub struct std___timepunct<_CharT> {
    pub _base: std_locale_facet,
    pub _M_data: *mut std___timepunct___cache_type<_CharT>,
    pub _M_c_locale_timepunct: std___c_locale,
    pub _M_name_timepunct: *const ::std::os::raw::c_char,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type std___timepunct___char_type<_CharT> = _CharT;
pub type std___timepunct___cache_type<_CharT> = std___timepunct_cache<_CharT>;
#[repr(C)]
#[derive(Debug)]
pub struct std___codecvt_abstract_base {
    pub _base: std_locale_facet,
}
pub type std___codecvt_abstract_base_result = std_codecvt_base_result;
pub type std___codecvt_abstract_base_intern_type<_InternT> = _InternT;
pub type std___codecvt_abstract_base_extern_type<_ExternT> = _ExternT;
pub type std___codecvt_abstract_base_state_type<_StateT> = _StateT;
#[repr(C)]
pub struct std_wbuffer_convert<_Elem> {
    pub _base: std_basic_streambuf<_Elem>,
    pub _M_buf: *mut std_streambuf,
    pub _M_cvt: std_unique_ptr,
    pub _M_state: std_wbuffer_convert_state_type,
    pub _M_put_area: *mut _Elem,
    pub _M_get_area: *mut _Elem,
    pub _M_unconv: std_streamsize,
    pub _M_get_buf: *mut ::std::os::raw::c_char,
    pub _M_always_noconv: bool,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Elem>>,
}
pub type std_wbuffer_convert__Wide_streambuf<_Elem> =
    std_basic_streambuf<_Elem>;
pub type std_wbuffer_convert_state_type = [u8; 0usize];
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum std_codecvt_mode {
    consume_header = 4,
    generate_header = 2,
    little_endian = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___codecvt_utf8_base {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___codecvt_utf16_base {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___codecvt_utf8_utf16_base {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__Quoted_string<_String, _CharT> {
    pub _M_string: _String,
    pub _M_delim: _CharT,
    pub _M_escape: _CharT,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_String>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type __gnu_cxx___conditional_type___type<_Iftrue> = _Iftrue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___add_unsigned {
    pub _address: u8,
}
pub type __gnu_cxx___add_unsigned___if_type = u8;
pub type __gnu_cxx___add_unsigned___type = __gnu_cxx___add_unsigned___if_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___remove_unsigned {
    pub _address: u8,
}
pub type __gnu_cxx___remove_unsigned___if_type = u8;
pub type __gnu_cxx___remove_unsigned___type =
    __gnu_cxx___remove_unsigned___if_type;
pub type __gnu_cxx___promote___type = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___promote_2 {
    pub _address: u8,
}
pub type __gnu_cxx___promote_2___type<_Tp2> = _Tp2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___promote_3 {
    pub _address: u8,
}
pub type __gnu_cxx___promote_3___type<_Tp2> = _Tp2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___promote_4 {
    pub _address: u8,
}
pub type __gnu_cxx___promote_4___type<_Tp2> = _Tp2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___numeric_traits_integer {
    pub _address: u8,
}
extern "C" {
    #[link_name = "__min"]
    pub static __gnu_cxx___min: _Value;
}
extern "C" {
    #[link_name = "__max"]
    pub static __gnu_cxx___max: _Value;
}
extern "C" {
    #[link_name = "__is_signed"]
    pub static __gnu_cxx___is_signed: bool;
}
extern "C" {
    #[link_name = "__digits"]
    pub static __gnu_cxx___digits: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___numeric_traits_floating {
    pub _address: u8,
}
extern "C" {
    #[link_name = "__max_digits10"]
    pub static __gnu_cxx___max_digits10: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__digits10"]
    pub static __gnu_cxx___digits10: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__max_exponent10"]
    pub static __gnu_cxx___max_exponent10: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___numeric_traits {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___normal_iterator<_Iterator> {
    pub _M_current: _Iterator,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
}
pub type __gnu_cxx___normal_iterator___traits_type = std_iterator_traits;
pub type __gnu_cxx___normal_iterator_iterator_type<_Iterator> = _Iterator;
pub type __gnu_cxx___normal_iterator_iterator_category =
    __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_value_type =
    __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_difference_type =
    __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_reference =
    __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_pointer =
    __gnu_cxx___normal_iterator___traits_type;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __gnu_cxx___ops__Iter_less_iter {
    pub _address: u8,
}
impl Clone for __gnu_cxx___ops__Iter_less_iter {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __gnu_cxx___ops__Iter_less_val {
    pub _address: u8,
}
impl Clone for __gnu_cxx___ops__Iter_less_val {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __gnu_cxx___ops__Val_less_iter {
    pub _address: u8,
}
impl Clone for __gnu_cxx___ops__Val_less_iter {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __gnu_cxx___ops__Iter_equal_to_iter {
    pub _address: u8,
}
impl Clone for __gnu_cxx___ops__Iter_equal_to_iter {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __gnu_cxx___ops__Iter_equal_to_val {
    pub _address: u8,
}
impl Clone for __gnu_cxx___ops__Iter_equal_to_val {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_comp_iter<_Compare> {
    pub _M_comp: _Compare,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_comp_val<_Compare> {
    pub _M_comp: _Compare,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Val_comp_iter<_Compare> {
    pub _M_comp: _Compare,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_equals_val<_Value> {
    pub _M_value: *mut _Value,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Value>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_equals_iter<_Iterator1> {
    pub _M_it1: _Iterator1,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator1>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_pred<_Predicate> {
    pub _M_pred: _Predicate,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_comp_to_val<_Compare, _Value> {
    pub _M_comp: _Compare,
    pub _M_value: *mut _Value,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Value>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_comp_to_iter<_Compare, _Iterator1> {
    pub _M_comp: _Compare,
    pub _M_it1: _Iterator1,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator1>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_negate<_Predicate> {
    pub _M_pred: _Predicate,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
}
extern "C" {
    #[link_name = "_ZN9__gnu_cxx27__verbose_terminate_handlerEv"]
    pub fn __gnu_cxx___verbose_terminate_handler();
}
#[repr(C)]
#[derive(Debug)]
pub struct __gnu_cxx_new_allocator {
    pub _address: u8,
}
pub type __gnu_cxx_new_allocator_size_type = usize;
pub type __gnu_cxx_new_allocator_difference_type = isize;
pub type __gnu_cxx_new_allocator_pointer<_Tp> = *mut _Tp;
pub type __gnu_cxx_new_allocator_const_pointer<_Tp> = *mut _Tp;
pub type __gnu_cxx_new_allocator_reference<_Tp> = *mut _Tp;
pub type __gnu_cxx_new_allocator_const_reference<_Tp> = *mut _Tp;
pub type __gnu_cxx_new_allocator_value_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx_new_allocator_rebind {
    pub _address: u8,
}
pub type __gnu_cxx_new_allocator_rebind_other = __gnu_cxx_new_allocator;
pub type __gnu_cxx_new_allocator_propagate_on_container_move_assignment =
    std_true_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___alloc_traits {
    pub _address: u8,
}
pub type __gnu_cxx___alloc_traits_allocator_type<_Alloc> = _Alloc;
pub type __gnu_cxx___alloc_traits__Base_type = std_allocator_traits;
pub type __gnu_cxx___alloc_traits_value_type =
    __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_pointer =
    __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_const_pointer =
    __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_size_type =
    __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_difference_type =
    __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_reference =
    *mut __gnu_cxx___alloc_traits_value_type;
pub type __gnu_cxx___alloc_traits_const_reference =
    *const __gnu_cxx___alloc_traits_value_type;
pub type __gnu_cxx___alloc_traits___is_custom_pointer = std___and_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___alloc_traits_rebind {
    pub _address: u8,
}
pub type __gnu_cxx___alloc_traits_rebind_other =
    __gnu_cxx___alloc_traits__Base_type;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum __gnu_cxx__Lock_policy {
    _S_single = 0,
    _S_mutex = 1,
    _S_atomic = 2,
}
extern "C" {
    #[link_name = "_ZN9__gnu_cxxL21__default_lock_policyE"]
    pub static __gnu_cxx___default_lock_policy: __gnu_cxx__Lock_policy;
}
#[repr(C)]
#[derive(Debug)]
pub struct __gnu_cxx___concurrence_lock_error {
    pub _base: std_exception,
}
#[repr(C)]
#[derive(Debug)]
pub struct __gnu_cxx___concurrence_unlock_error {
    pub _base: std_exception,
}
#[repr(C)]
#[derive(Debug)]
pub struct __gnu_cxx___concurrence_broadcast_error {
    pub _base: std_exception,
}
#[repr(C)]
#[derive(Debug)]
pub struct __gnu_cxx___concurrence_wait_error {
    pub _base: std_exception,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __gnu_cxx___mutex {
    pub _M_mutex: __gthread_mutex_t,
}
impl Clone for __gnu_cxx___mutex {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __gnu_cxx___recursive_mutex {
    pub _M_mutex: __gthread_recursive_mutex_t,
}
impl Clone for __gnu_cxx___recursive_mutex {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug)]
pub struct __gnu_cxx___scoped_lock {
    pub _M_device: *mut __gnu_cxx___scoped_lock___mutex_type,
}
pub type __gnu_cxx___scoped_lock___mutex_type = __gnu_cxx___mutex;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __gnu_cxx___cond {
    pub _M_cond: __gthread_cond_t,
}
impl Clone for __gnu_cxx___cond {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx__Char_types {
    pub _address: u8,
}
pub type __gnu_cxx__Char_types_int_type = ::std::os::raw::c_ulong;
pub type __gnu_cxx__Char_types_pos_type = std_streampos;
pub type __gnu_cxx__Char_types_off_type = std_streamoff;
pub type __gnu_cxx__Char_types_state_type = mbstate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx_char_traits {
    pub _address: u8,
}
pub type __gnu_cxx_char_traits_char_type<_CharT> = _CharT;
pub type __gnu_cxx_char_traits_int_type = __gnu_cxx__Char_types;
pub type __gnu_cxx_char_traits_pos_type = __gnu_cxx__Char_types;
pub type __gnu_cxx_char_traits_off_type = __gnu_cxx__Char_types;
pub type __gnu_cxx_char_traits_state_type = __gnu_cxx__Char_types;
extern "C" {
    #[link_name = "__uselocale"]
    pub fn __gnu_cxx___uselocale(arg1: __locale_t) -> __locale_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___aligned_membuf {
    pub _M_storage: *mut ::std::os::raw::c_uchar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___aligned_membuf__Tp2<_Tp> {
    pub _M_t: _Tp,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___aligned_buffer {
    pub _M_storage: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __cxxabiv1___class_type_info {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct __cxxabiv1___forced_unwind__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct __cxxabiv1___forced_unwind {
    pub vtable_: *const __cxxabiv1___forced_unwind__bindgen_vtable,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
impl Clone for _IO_FILE {
    fn clone(&self) -> Self { *self }
}
pub type FILE = _IO_FILE;
pub type __FILE = _IO_FILE;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type wint_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __mbstate_t__bindgen_ty_1 {
    pub __wch: __BindgenUnionField<::std::os::raw::c_uint>,
    pub __wchb: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub bindgen_union_field: u32,
}
impl Clone for __mbstate_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
impl Clone for __mbstate_t {
    fn clone(&self) -> Self { *self }
}
pub type mbstate_t = __mbstate_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
impl Clone for tm {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn wcscpy(__dest: *mut u16, __src: *const u16) -> *mut u16;
}
extern "C" {
    pub fn wcsncpy(__dest: *mut u16, __src: *const u16, __n: usize)
     -> *mut u16;
}
extern "C" {
    pub fn wcscat(__dest: *mut u16, __src: *const u16) -> *mut u16;
}
extern "C" {
    pub fn wcsncat(__dest: *mut u16, __src: *const u16, __n: usize)
     -> *mut u16;
}
extern "C" {
    pub fn wcscmp(__s1: *const u16, __s2: *const u16)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncmp(__s1: *const u16, __s2: *const u16, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscasecmp(__s1: *const u16, __s2: *const u16)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp(__s1: *const u16, __s2: *const u16, __n: usize)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
impl Clone for __locale_struct {
    fn clone(&self) -> Self { *self }
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn wcscasecmp_l(__s1: *const u16, __s2: *const u16, __loc: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp_l(__s1: *const u16, __s2: *const u16, __n: usize,
                         __loc: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscoll(__s1: *const u16, __s2: *const u16)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsxfrm(__s1: *mut u16, __s2: *const u16, __n: usize) -> usize;
}
extern "C" {
    pub fn wcscoll_l(__s1: *const u16, __s2: *const u16, __loc: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsxfrm_l(__s1: *mut u16, __s2: *const u16, __n: usize,
                     __loc: __locale_t) -> usize;
}
extern "C" {
    pub fn wcsdup(__s: *const u16) -> *mut u16;
}
extern "C" {
    pub fn wcschr(__wcs: *const u16, __wc: u16) -> *mut u16;
}
extern "C" {
    pub fn wcsrchr(__wcs: *const u16, __wc: u16) -> *mut u16;
}
extern "C" {
    pub fn wcschrnul(__s: *const u16, __wc: u16) -> *mut u16;
}
extern "C" {
    pub fn wcscspn(__wcs: *const u16, __reject: *const u16) -> usize;
}
extern "C" {
    pub fn wcsspn(__wcs: *const u16, __accept: *const u16) -> usize;
}
extern "C" {
    pub fn wcspbrk(__wcs: *const u16, __accept: *const u16) -> *mut u16;
}
extern "C" {
    pub fn wcsstr(__haystack: *const u16, __needle: *const u16) -> *mut u16;
}
extern "C" {
    pub fn wcstok(__s: *mut u16, __delim: *const u16, __ptr: *mut *mut u16)
     -> *mut u16;
}
extern "C" {
    pub fn wcslen(__s: *const u16) -> usize;
}
extern "C" {
    pub fn wcswcs(__haystack: *const u16, __needle: *const u16) -> *mut u16;
}
extern "C" {
    pub fn wcsnlen(__s: *const u16, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn wmemchr(__s: *const u16, __c: u16, __n: usize) -> *mut u16;
}
extern "C" {
    pub fn wmemcmp(__s1: *const u16, __s2: *const u16, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcpy(__s1: *mut u16, __s2: *const u16, __n: usize) -> *mut u16;
}
extern "C" {
    pub fn wmemmove(__s1: *mut u16, __s2: *const u16, __n: usize) -> *mut u16;
}
extern "C" {
    pub fn wmemset(__s: *mut u16, __c: u16, __n: usize) -> *mut u16;
}
extern "C" {
    pub fn wmempcpy(__s1: *mut u16, __s2: *const u16, __n: usize) -> *mut u16;
}
extern "C" {
    pub fn btowc(__c: ::std::os::raw::c_int) -> wint_t;
}
extern "C" {
    pub fn wctob(__c: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbsinit(__ps: *const mbstate_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbrtowc(__pwc: *mut u16, __s: *const ::std::os::raw::c_char,
                   __n: usize, __p: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn wcrtomb(__s: *mut ::std::os::raw::c_char, __wc: u16,
                   __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn __mbrlen(__s: *const ::std::os::raw::c_char, __n: usize,
                    __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn mbrlen(__s: *const ::std::os::raw::c_char, __n: usize,
                  __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn mbsrtowcs(__dst: *mut u16,
                     __src: *mut *const ::std::os::raw::c_char, __len: usize,
                     __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn wcsrtombs(__dst: *mut ::std::os::raw::c_char,
                     __src: *mut *const u16, __len: usize,
                     __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn mbsnrtowcs(__dst: *mut u16,
                      __src: *mut *const ::std::os::raw::c_char, __nmc: usize,
                      __len: usize, __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn wcsnrtombs(__dst: *mut ::std::os::raw::c_char,
                      __src: *mut *const u16, __nwc: usize, __len: usize,
                      __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn wcwidth(__c: u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcswidth(__s: *const u16, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstod(__nptr: *const u16, __endptr: *mut *mut u16) -> f64;
}
extern "C" {
    pub fn wcstof(__nptr: *const u16, __endptr: *mut *mut u16) -> f32;
}
extern "C" {
    pub fn wcstold(__nptr: *const u16, __endptr: *mut *mut u16) -> f64;
}
extern "C" {
    pub fn wcstol(__nptr: *const u16, __endptr: *mut *mut u16,
                  __base: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul(__nptr: *const u16, __endptr: *mut *mut u16,
                   __base: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoll(__nptr: *const u16, __endptr: *mut *mut u16,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoull(__nptr: *const u16, __endptr: *mut *mut u16,
                    __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstoq(__nptr: *const u16, __endptr: *mut *mut u16,
                  __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstouq(__nptr: *const u16, __endptr: *mut *mut u16,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstol_l(__nptr: *const u16, __endptr: *mut *mut u16,
                    __base: ::std::os::raw::c_int, __loc: __locale_t)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul_l(__nptr: *const u16, __endptr: *mut *mut u16,
                     __base: ::std::os::raw::c_int, __loc: __locale_t)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoll_l(__nptr: *const u16, __endptr: *mut *mut u16,
                     __base: ::std::os::raw::c_int, __loc: __locale_t)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoull_l(__nptr: *const u16, __endptr: *mut *mut u16,
                      __base: ::std::os::raw::c_int, __loc: __locale_t)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstod_l(__nptr: *const u16, __endptr: *mut *mut u16,
                    __loc: __locale_t) -> f64;
}
extern "C" {
    pub fn wcstof_l(__nptr: *const u16, __endptr: *mut *mut u16,
                    __loc: __locale_t) -> f32;
}
extern "C" {
    pub fn wcstold_l(__nptr: *const u16, __endptr: *mut *mut u16,
                     __loc: __locale_t) -> f64;
}
extern "C" {
    pub fn wcpcpy(__dest: *mut u16, __src: *const u16) -> *mut u16;
}
extern "C" {
    pub fn wcpncpy(__dest: *mut u16, __src: *const u16, __n: usize)
     -> *mut u16;
}
extern "C" {
    pub fn open_wmemstream(__bufloc: *mut *mut u16, __sizeloc: *mut usize)
     -> *mut __FILE;
}
extern "C" {
    pub fn fwide(__fp: *mut __FILE, __mode: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwprintf(__stream: *mut __FILE, __format: *const u16, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wprintf(__format: *const u16, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swprintf(__s: *mut u16, __n: usize, __format: *const u16, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwprintf(__s: *mut __FILE, __format: *const u16,
                     __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwprintf(__format: *const u16, __arg: *mut __va_list_tag)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswprintf(__s: *mut u16, __n: usize, __format: *const u16,
                     __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwscanf(__stream: *mut __FILE, __format: *const u16, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscanf(__format: *const u16, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swscanf(__s: *const u16, __format: *const u16, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwscanf(__s: *mut __FILE, __format: *const u16,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwscanf(__format: *const u16, __arg: *mut __va_list_tag)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswscanf(__s: *const u16, __format: *const u16,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetwc(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwc(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(__wc: u16, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwc(__wc: u16, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(__wc: u16) -> wint_t;
}
extern "C" {
    pub fn fgetws(__ws: *mut u16, __n: ::std::os::raw::c_int,
                  __stream: *mut __FILE) -> *mut u16;
}
extern "C" {
    pub fn fputws(__ws: *const u16, __stream: *mut __FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(__wc: wint_t, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwc_unlocked(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar_unlocked() -> wint_t;
}
extern "C" {
    pub fn fgetwc_unlocked(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn fputwc_unlocked(__wc: u16, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwc_unlocked(__wc: u16, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar_unlocked(__wc: u16) -> wint_t;
}
extern "C" {
    pub fn fgetws_unlocked(__ws: *mut u16, __n: ::std::os::raw::c_int,
                           __stream: *mut __FILE) -> *mut u16;
}
extern "C" {
    pub fn fputws_unlocked(__ws: *const u16, __stream: *mut __FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsftime(__s: *mut u16, __maxsize: usize, __format: *const u16,
                    __tp: *const tm) -> usize;
}
extern "C" {
    pub fn wcsftime_l(__s: *mut u16, __maxsize: usize, __format: *const u16,
                      __tp: *const tm, __loc: __locale_t) -> usize;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
impl Clone for __fsid_t {
    fn clone(&self) -> Self { *self }
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl Clone for timespec {
    fn clone(&self) -> Self { *self }
}
pub type pid_t = __pid_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sched_param {
    pub __sched_priority: ::std::os::raw::c_int,
}
impl Clone for sched_param {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn clone(__fn:
                     ::std::option::Option<unsafe extern "C" fn(__arg:
                                                                    *mut ::std::os::raw::c_void)
                                               -> ::std::os::raw::c_int>,
                 __child_stack: *mut ::std::os::raw::c_void,
                 __flags: ::std::os::raw::c_int,
                 __arg: *mut ::std::os::raw::c_void, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unshare(__flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getcpu() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setns(__fd: ::std::os::raw::c_int, __nstype: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __sched_param {
    pub __sched_priority: ::std::os::raw::c_int,
}
impl Clone for __sched_param {
    fn clone(&self) -> Self { *self }
}
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 16usize],
}
impl Clone for cpu_set_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn __sched_cpucount(__setsize: usize, __setp: *const cpu_set_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sched_cpualloc(__count: usize) -> *mut cpu_set_t;
}
extern "C" {
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
}
extern "C" {
    pub fn sched_setparam(__pid: __pid_t, __param: *const sched_param)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getparam(__pid: __pid_t, __param: *mut sched_param)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setscheduler(__pid: __pid_t, __policy: ::std::os::raw::c_int,
                              __param: *const sched_param)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getscheduler(__pid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(__algorithm: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(__algorithm: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setaffinity(__pid: __pid_t, __cpusetsize: usize,
                             __cpuset: *const cpu_set_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getaffinity(__pid: __pid_t, __cpusetsize: usize,
                             __cpuset: *mut cpu_set_t)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl Clone for timeval {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timex {
    pub modes: ::std::os::raw::c_uint,
    pub offset: __syscall_slong_t,
    pub freq: __syscall_slong_t,
    pub maxerror: __syscall_slong_t,
    pub esterror: __syscall_slong_t,
    pub status: ::std::os::raw::c_int,
    pub constant: __syscall_slong_t,
    pub precision: __syscall_slong_t,
    pub tolerance: __syscall_slong_t,
    pub time: timeval,
    pub tick: __syscall_slong_t,
    pub ppsfreq: __syscall_slong_t,
    pub jitter: __syscall_slong_t,
    pub shift: ::std::os::raw::c_int,
    pub stabil: __syscall_slong_t,
    pub jitcnt: __syscall_slong_t,
    pub calcnt: __syscall_slong_t,
    pub errcnt: __syscall_slong_t,
    pub stbcnt: __syscall_slong_t,
    pub tai: ::std::os::raw::c_int,
    pub _bitfield_1: [u32; 11usize],
}
impl Clone for timex {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn clock_adjtime(__clock_id: __clockid_t, __utx: *mut timex)
     -> ::std::os::raw::c_int;
}
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
impl Clone for itimerspec {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(__s: *mut ::std::os::raw::c_char, __maxsize: usize,
                    __format: *const ::std::os::raw::c_char, __tp: *const tm)
     -> usize;
}
extern "C" {
    pub fn strptime(__s: *const ::std::os::raw::c_char,
                    __fmt: *const ::std::os::raw::c_char, __tp: *mut tm)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strftime_l(__s: *mut ::std::os::raw::c_char, __maxsize: usize,
                      __format: *const ::std::os::raw::c_char,
                      __tp: *const tm, __loc: __locale_t) -> usize;
}
extern "C" {
    pub fn strptime_l(__s: *const ::std::os::raw::c_char,
                      __fmt: *const ::std::os::raw::c_char, __tp: *mut tm,
                      __loc: __locale_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(__tp: *const tm, __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(__timer: *const time_t, __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "__tzname"]
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    #[link_name = "__daylight"]
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__timezone"]
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "tzname"]
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    #[link_name = "daylight"]
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "timezone"]
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(__requested_time: *const timespec,
                     __remaining: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(__clock_id: clockid_t,
                           __flags: ::std::os::raw::c_int,
                           __req: *const timespec, __rem: *mut timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(__clock_id: clockid_t, __evp: *mut sigevent,
                        __timerid: *mut timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(__timerid: timer_t, __flags: ::std::os::raw::c_int,
                         __value: *const itimerspec,
                         __ovalue: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(__ts: *mut timespec, __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "getdate_err"]
    pub static mut getdate_err: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdate(__string: *const ::std::os::raw::c_char) -> *mut tm;
}
extern "C" {
    pub fn getdate_r(__string: *const ::std::os::raw::c_char,
                     __resbufp: *mut tm) -> ::std::os::raw::c_int;
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_attr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 56usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 7usize],
}
impl Clone for pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
impl Clone for __pthread_internal_list {
    fn clone(&self) -> Self { *self }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_mutex_t {
    pub __data: __BindgenUnionField<pthread_mutex_t___pthread_mutex_s>,
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 40usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_mutex_t___pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
impl Clone for pthread_mutex_t___pthread_mutex_s {
    fn clone(&self) -> Self { *self }
}
impl Clone for pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_mutexattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_int>,
    pub bindgen_union_field: u32,
}
impl Clone for pthread_mutexattr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_cond_t {
    pub __data: __BindgenUnionField<pthread_cond_t__bindgen_ty_1>,
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 48usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_longlong>,
    pub bindgen_union_field: [u64; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_cond_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
impl Clone for pthread_cond_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
impl Clone for pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_condattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_int>,
    pub bindgen_union_field: u32,
}
impl Clone for pthread_condattr_t {
    fn clone(&self) -> Self { *self }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_rwlock_t {
    pub __data: __BindgenUnionField<pthread_rwlock_t__bindgen_ty_1>,
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 56usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_rwlock_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
impl Clone for pthread_rwlock_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
impl Clone for pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_rwlockattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 8usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: u64,
}
impl Clone for pthread_rwlockattr_t {
    fn clone(&self) -> Self { *self }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_barrier_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 32usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 4usize],
}
impl Clone for pthread_barrier_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_barrierattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_int>,
    pub bindgen_union_field: u32,
}
impl Clone for pthread_barrierattr_t {
    fn clone(&self) -> Self { *self }
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
pub const PTHREAD_CREATE_JOINABLE: _bindgen_ty_34 =
    _bindgen_ty_34::PTHREAD_CREATE_JOINABLE;
pub const PTHREAD_CREATE_DETACHED: _bindgen_ty_34 =
    _bindgen_ty_34::PTHREAD_CREATE_DETACHED;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_34 {
    PTHREAD_CREATE_JOINABLE = 0,
    PTHREAD_CREATE_DETACHED = 1,
}
pub const PTHREAD_MUTEX_TIMED_NP: _bindgen_ty_35 =
    _bindgen_ty_35::PTHREAD_MUTEX_TIMED_NP;
pub const PTHREAD_MUTEX_RECURSIVE_NP: _bindgen_ty_35 =
    _bindgen_ty_35::PTHREAD_MUTEX_RECURSIVE_NP;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: _bindgen_ty_35 =
    _bindgen_ty_35::PTHREAD_MUTEX_ERRORCHECK_NP;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: _bindgen_ty_35 =
    _bindgen_ty_35::PTHREAD_MUTEX_ADAPTIVE_NP;
pub const PTHREAD_MUTEX_NORMAL: _bindgen_ty_35 =
    _bindgen_ty_35::PTHREAD_MUTEX_TIMED_NP;
pub const PTHREAD_MUTEX_RECURSIVE: _bindgen_ty_35 =
    _bindgen_ty_35::PTHREAD_MUTEX_RECURSIVE_NP;
pub const PTHREAD_MUTEX_ERRORCHECK: _bindgen_ty_35 =
    _bindgen_ty_35::PTHREAD_MUTEX_ERRORCHECK_NP;
pub const PTHREAD_MUTEX_DEFAULT: _bindgen_ty_35 =
    _bindgen_ty_35::PTHREAD_MUTEX_TIMED_NP;
pub const PTHREAD_MUTEX_FAST_NP: _bindgen_ty_35 =
    _bindgen_ty_35::PTHREAD_MUTEX_TIMED_NP;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_35 {
    PTHREAD_MUTEX_TIMED_NP = 0,
    PTHREAD_MUTEX_RECURSIVE_NP = 1,
    PTHREAD_MUTEX_ERRORCHECK_NP = 2,
    PTHREAD_MUTEX_ADAPTIVE_NP = 3,
}
pub const PTHREAD_MUTEX_STALLED: _bindgen_ty_36 =
    _bindgen_ty_36::PTHREAD_MUTEX_STALLED;
pub const PTHREAD_MUTEX_STALLED_NP: _bindgen_ty_36 =
    _bindgen_ty_36::PTHREAD_MUTEX_STALLED;
pub const PTHREAD_MUTEX_ROBUST: _bindgen_ty_36 =
    _bindgen_ty_36::PTHREAD_MUTEX_ROBUST;
pub const PTHREAD_MUTEX_ROBUST_NP: _bindgen_ty_36 =
    _bindgen_ty_36::PTHREAD_MUTEX_ROBUST;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_36 {
    PTHREAD_MUTEX_STALLED = 0,
    PTHREAD_MUTEX_ROBUST = 1,
}
pub const PTHREAD_PRIO_NONE: _bindgen_ty_37 =
    _bindgen_ty_37::PTHREAD_PRIO_NONE;
pub const PTHREAD_PRIO_INHERIT: _bindgen_ty_37 =
    _bindgen_ty_37::PTHREAD_PRIO_INHERIT;
pub const PTHREAD_PRIO_PROTECT: _bindgen_ty_37 =
    _bindgen_ty_37::PTHREAD_PRIO_PROTECT;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_37 {
    PTHREAD_PRIO_NONE = 0,
    PTHREAD_PRIO_INHERIT = 1,
    PTHREAD_PRIO_PROTECT = 2,
}
pub const PTHREAD_RWLOCK_PREFER_READER_NP: _bindgen_ty_38 =
    _bindgen_ty_38::PTHREAD_RWLOCK_PREFER_READER_NP;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: _bindgen_ty_38 =
    _bindgen_ty_38::PTHREAD_RWLOCK_PREFER_WRITER_NP;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: _bindgen_ty_38 =
    _bindgen_ty_38::PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP;
pub const PTHREAD_RWLOCK_DEFAULT_NP: _bindgen_ty_38 =
    _bindgen_ty_38::PTHREAD_RWLOCK_PREFER_READER_NP;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_38 {
    PTHREAD_RWLOCK_PREFER_READER_NP = 0,
    PTHREAD_RWLOCK_PREFER_WRITER_NP = 1,
    PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2,
}
pub const PTHREAD_INHERIT_SCHED: _bindgen_ty_39 =
    _bindgen_ty_39::PTHREAD_INHERIT_SCHED;
pub const PTHREAD_EXPLICIT_SCHED: _bindgen_ty_39 =
    _bindgen_ty_39::PTHREAD_EXPLICIT_SCHED;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_39 {
    PTHREAD_INHERIT_SCHED = 0,
    PTHREAD_EXPLICIT_SCHED = 1,
}
pub const PTHREAD_SCOPE_SYSTEM: _bindgen_ty_40 =
    _bindgen_ty_40::PTHREAD_SCOPE_SYSTEM;
pub const PTHREAD_SCOPE_PROCESS: _bindgen_ty_40 =
    _bindgen_ty_40::PTHREAD_SCOPE_PROCESS;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_40 {
    PTHREAD_SCOPE_SYSTEM = 0,
    PTHREAD_SCOPE_PROCESS = 1,
}
pub const PTHREAD_PROCESS_PRIVATE: _bindgen_ty_41 =
    _bindgen_ty_41::PTHREAD_PROCESS_PRIVATE;
pub const PTHREAD_PROCESS_SHARED: _bindgen_ty_41 =
    _bindgen_ty_41::PTHREAD_PROCESS_SHARED;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_41 {
    PTHREAD_PROCESS_PRIVATE = 0,
    PTHREAD_PROCESS_SHARED = 1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _pthread_cleanup_buffer {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __canceltype: ::std::os::raw::c_int,
    pub __prev: *mut _pthread_cleanup_buffer,
}
impl Clone for _pthread_cleanup_buffer {
    fn clone(&self) -> Self { *self }
}
pub const PTHREAD_CANCEL_ENABLE: _bindgen_ty_42 =
    _bindgen_ty_42::PTHREAD_CANCEL_ENABLE;
pub const PTHREAD_CANCEL_DISABLE: _bindgen_ty_42 =
    _bindgen_ty_42::PTHREAD_CANCEL_DISABLE;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_42 {
    PTHREAD_CANCEL_ENABLE = 0,
    PTHREAD_CANCEL_DISABLE = 1,
}
pub const PTHREAD_CANCEL_DEFERRED: _bindgen_ty_43 =
    _bindgen_ty_43::PTHREAD_CANCEL_DEFERRED;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: _bindgen_ty_43 =
    _bindgen_ty_43::PTHREAD_CANCEL_ASYNCHRONOUS;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_43 {
    PTHREAD_CANCEL_DEFERRED = 0,
    PTHREAD_CANCEL_ASYNCHRONOUS = 1,
}
extern "C" {
    pub fn pthread_create(__newthread: *mut pthread_t,
                          __attr: *const pthread_attr_t,
                          __start_routine:
                              ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut ::std::os::raw::c_void)
                                                        ->
                                                            *mut ::std::os::raw::c_void>,
                          __arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_exit(__retval: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn pthread_join(__th: pthread_t,
                        __thread_return: *mut *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_tryjoin_np(__th: pthread_t,
                              __thread_return:
                                  *mut *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_timedjoin_np(__th: pthread_t,
                                __thread_return:
                                    *mut *mut ::std::os::raw::c_void,
                                __abstime: *const timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_detach(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(__attr: *const pthread_attr_t,
                                       __detachstate:
                                           *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(__attr: *mut pthread_attr_t,
                                       __detachstate: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(__attr: *const pthread_attr_t,
                                     __guardsize: *mut usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(__attr: *mut pthread_attr_t,
                                     __guardsize: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(__attr: *const pthread_attr_t,
                                      __param: *mut sched_param)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(__attr: *mut pthread_attr_t,
                                      __param: *const sched_param)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(__attr: *const pthread_attr_t,
                                       __policy: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(__attr: *mut pthread_attr_t,
                                       __policy: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(__attr: *const pthread_attr_t,
                                        __inherit: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(__attr: *mut pthread_attr_t,
                                        __inherit: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(__attr: *const pthread_attr_t,
                                 __scope: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(__attr: *mut pthread_attr_t,
                                 __scope: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(__attr: *const pthread_attr_t,
                                     __stackaddr:
                                         *mut *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(__attr: *mut pthread_attr_t,
                                     __stackaddr: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(__attr: *const pthread_attr_t,
                                     __stacksize: *mut usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(__attr: *mut pthread_attr_t,
                                     __stacksize: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(__attr: *const pthread_attr_t,
                                 __stackaddr:
                                     *mut *mut ::std::os::raw::c_void,
                                 __stacksize: *mut usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(__attr: *mut pthread_attr_t,
                                 __stackaddr: *mut ::std::os::raw::c_void,
                                 __stacksize: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setaffinity_np(__attr: *mut pthread_attr_t,
                                       __cpusetsize: usize,
                                       __cpuset: *const cpu_set_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getaffinity_np(__attr: *const pthread_attr_t,
                                       __cpusetsize: usize,
                                       __cpuset: *mut cpu_set_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getattr_default_np(__attr: *mut pthread_attr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setattr_default_np(__attr: *const pthread_attr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getattr_np(__th: pthread_t, __attr: *mut pthread_attr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(__target_thread: pthread_t,
                                 __policy: ::std::os::raw::c_int,
                                 __param: *const sched_param)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(__target_thread: pthread_t,
                                 __policy: *mut ::std::os::raw::c_int,
                                 __param: *mut sched_param)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedprio(__target_thread: pthread_t,
                                __prio: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getname_np(__target_thread: pthread_t,
                              __buf: *mut ::std::os::raw::c_char,
                              __buflen: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setname_np(__target_thread: pthread_t,
                              __name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getconcurrency() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setconcurrency(__level: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setaffinity_np(__th: pthread_t, __cpusetsize: usize,
                                  __cpuset: *const cpu_set_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getaffinity_np(__th: pthread_t, __cpusetsize: usize,
                                  __cpuset: *mut cpu_set_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_once(__once_control: *mut pthread_once_t,
                        __init_routine:
                            ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcancelstate(__state: ::std::os::raw::c_int,
                                  __oldstate: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(__type: ::std::os::raw::c_int,
                                 __oldtype: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cancel(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __pthread_unwind_buf_t {
    pub __cancel_jmp_buf: [__pthread_unwind_buf_t__bindgen_ty_1; 1usize],
    pub __pad: [*mut ::std::os::raw::c_void; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __pthread_unwind_buf_t__bindgen_ty_1 {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
}
impl Clone for __pthread_unwind_buf_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
impl Clone for __pthread_unwind_buf_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __pthread_cleanup_frame {
    pub __cancel_routine: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
impl Clone for __pthread_cleanup_frame {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug)]
pub struct __pthread_cleanup_class {
    pub __cancel_routine: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    _unused: [u8; 0],
}
extern "C" {
    pub fn __sigsetjmp(__env: *mut __jmp_buf_tag,
                       __savemask: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_init(__mutex: *mut pthread_mutex_t,
                              __mutexattr: *const pthread_mutexattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_timedlock(__mutex: *mut pthread_mutex_t,
                                   __abstime: *const timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_getprioceiling(__mutex: *const pthread_mutex_t,
                                        __prioceiling:
                                            *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_setprioceiling(__mutex: *mut pthread_mutex_t,
                                        __prioceiling: ::std::os::raw::c_int,
                                        __old_ceiling:
                                            *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_consistent(__mutex: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_consistent_np(__mutex: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(__attr: *const pthread_mutexattr_t,
                                        __pshared: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(__attr: *mut pthread_mutexattr_t,
                                        __pshared: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(__attr: *const pthread_mutexattr_t,
                                     __kind: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(__attr: *mut pthread_mutexattr_t,
                                     __kind: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(__attr: *const pthread_mutexattr_t,
                                         __protocol:
                                             *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(__attr: *mut pthread_mutexattr_t,
                                         __protocol: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprioceiling(__attr:
                                                *const pthread_mutexattr_t,
                                            __prioceiling:
                                                *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprioceiling(__attr: *mut pthread_mutexattr_t,
                                            __prioceiling:
                                                ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getrobust(__attr: *const pthread_mutexattr_t,
                                       __robustness:
                                           *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getrobust_np(__attr: *const pthread_mutexattr_t,
                                          __robustness:
                                              *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setrobust(__attr: *mut pthread_mutexattr_t,
                                       __robustness: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setrobust_np(__attr: *mut pthread_mutexattr_t,
                                          __robustness: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(__rwlock: *mut pthread_rwlock_t,
                               __attr: *const pthread_rwlockattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedrdlock(__rwlock: *mut pthread_rwlock_t,
                                      __abstime: *const timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedwrlock(__rwlock: *mut pthread_rwlock_t,
                                      __abstime: *const timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(__attr: *const pthread_rwlockattr_t,
                                         __pshared:
                                             *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(__attr: *mut pthread_rwlockattr_t,
                                         __pshared: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getkind_np(__attr: *const pthread_rwlockattr_t,
                                         __pref: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setkind_np(__attr: *mut pthread_rwlockattr_t,
                                         __pref: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_init(__cond: *mut pthread_cond_t,
                             __cond_attr: *const pthread_condattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(__cond: *mut pthread_cond_t,
                             __mutex: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(__cond: *mut pthread_cond_t,
                                  __mutex: *mut pthread_mutex_t,
                                  __abstime: *const timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(__attr: *const pthread_condattr_t,
                                       __pshared: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(__attr: *mut pthread_condattr_t,
                                       __pshared: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getclock(__attr: *const pthread_condattr_t,
                                     __clock_id: *mut __clockid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setclock(__attr: *mut pthread_condattr_t,
                                     __clock_id: __clockid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_init(__lock: *mut pthread_spinlock_t,
                             __pshared: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_destroy(__lock: *mut pthread_spinlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_lock(__lock: *mut pthread_spinlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_trylock(__lock: *mut pthread_spinlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_unlock(__lock: *mut pthread_spinlock_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_init(__barrier: *mut pthread_barrier_t,
                                __attr: *const pthread_barrierattr_t,
                                __count: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_getpshared(__attr:
                                              *const pthread_barrierattr_t,
                                          __pshared:
                                              *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_setpshared(__attr: *mut pthread_barrierattr_t,
                                          __pshared: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_create(__key: *mut pthread_key_t,
                              __destr_function:
                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut ::std::os::raw::c_void)>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_delete(__key: pthread_key_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getspecific(__key: pthread_key_t)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_setspecific(__key: pthread_key_t,
                               __pointer: *const ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getcpuclockid(__thread_id: pthread_t,
                                 __clock_id: *mut __clockid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_atfork(__prepare:
                              ::std::option::Option<unsafe extern "C" fn()>,
                          __parent:
                              ::std::option::Option<unsafe extern "C" fn()>,
                          __child:
                              ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
pub type __gthread_t = pthread_t;
pub type __gthread_key_t = pthread_key_t;
pub type __gthread_once_t = pthread_once_t;
pub type __gthread_mutex_t = pthread_mutex_t;
pub type __gthread_recursive_mutex_t = pthread_mutex_t;
pub type __gthread_cond_t = pthread_cond_t;
pub type __gthread_time_t = timespec;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct lconv {
    pub decimal_point: *mut ::std::os::raw::c_char,
    pub thousands_sep: *mut ::std::os::raw::c_char,
    pub grouping: *mut ::std::os::raw::c_char,
    pub int_curr_symbol: *mut ::std::os::raw::c_char,
    pub currency_symbol: *mut ::std::os::raw::c_char,
    pub mon_decimal_point: *mut ::std::os::raw::c_char,
    pub mon_thousands_sep: *mut ::std::os::raw::c_char,
    pub mon_grouping: *mut ::std::os::raw::c_char,
    pub positive_sign: *mut ::std::os::raw::c_char,
    pub negative_sign: *mut ::std::os::raw::c_char,
    pub int_frac_digits: ::std::os::raw::c_char,
    pub frac_digits: ::std::os::raw::c_char,
    pub p_cs_precedes: ::std::os::raw::c_char,
    pub p_sep_by_space: ::std::os::raw::c_char,
    pub n_cs_precedes: ::std::os::raw::c_char,
    pub n_sep_by_space: ::std::os::raw::c_char,
    pub p_sign_posn: ::std::os::raw::c_char,
    pub n_sign_posn: ::std::os::raw::c_char,
    pub int_p_cs_precedes: ::std::os::raw::c_char,
    pub int_p_sep_by_space: ::std::os::raw::c_char,
    pub int_n_cs_precedes: ::std::os::raw::c_char,
    pub int_n_sep_by_space: ::std::os::raw::c_char,
    pub int_p_sign_posn: ::std::os::raw::c_char,
    pub int_n_sign_posn: ::std::os::raw::c_char,
}
impl Clone for lconv {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn setlocale(__category: ::std::os::raw::c_int,
                     __locale: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn localeconv() -> *mut lconv;
}
extern "C" {
    pub fn newlocale(__category_mask: ::std::os::raw::c_int,
                     __locale: *const ::std::os::raw::c_char,
                     __base: __locale_t) -> __locale_t;
}
extern "C" {
    pub fn duplocale(__dataset: __locale_t) -> __locale_t;
}
extern "C" {
    pub fn freelocale(__dataset: __locale_t);
}
extern "C" {
    pub fn uselocale(__dataset: __locale_t) -> __locale_t;
}
pub const _ISupper: _bindgen_ty_44 = _bindgen_ty_44::_ISupper;
pub const _ISlower: _bindgen_ty_44 = _bindgen_ty_44::_ISlower;
pub const _ISalpha: _bindgen_ty_44 = _bindgen_ty_44::_ISalpha;
pub const _ISdigit: _bindgen_ty_44 = _bindgen_ty_44::_ISdigit;
pub const _ISxdigit: _bindgen_ty_44 = _bindgen_ty_44::_ISxdigit;
pub const _ISspace: _bindgen_ty_44 = _bindgen_ty_44::_ISspace;
pub const _ISprint: _bindgen_ty_44 = _bindgen_ty_44::_ISprint;
pub const _ISgraph: _bindgen_ty_44 = _bindgen_ty_44::_ISgraph;
pub const _ISblank: _bindgen_ty_44 = _bindgen_ty_44::_ISblank;
pub const _IScntrl: _bindgen_ty_44 = _bindgen_ty_44::_IScntrl;
pub const _ISpunct: _bindgen_ty_44 = _bindgen_ty_44::_ISpunct;
pub const _ISalnum: _bindgen_ty_44 = _bindgen_ty_44::_ISalnum;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_44 {
    _ISupper = 256,
    _ISlower = 512,
    _ISalpha = 1024,
    _ISdigit = 2048,
    _ISxdigit = 4096,
    _ISspace = 8192,
    _ISprint = 16384,
    _ISgraph = 32768,
    _ISblank = 1,
    _IScntrl = 2,
    _ISpunct = 4,
    _ISalnum = 8,
}
extern "C" {
    pub fn __ctype_b_loc() -> *mut *const ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __ctype_tolower_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn __ctype_toupper_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn isalnum(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isctype(__c: ::std::os::raw::c_int, __mask: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalnum_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __tolower_l(__c: ::std::os::raw::c_int, __l: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower_l(__c: ::std::os::raw::c_int, __l: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper_l(__c: ::std::os::raw::c_int, __l: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper_l(__c: ::std::os::raw::c_int, __l: __locale_t)
     -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum idtype_t { P_ALL = 0, P_PID = 1, P_PGID = 2, }
#[repr(C)]
#[derive(Debug, Copy)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
impl Clone for div_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
impl Clone for ldiv_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
impl Clone for lldiv_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn strtof(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn strtold(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn strtol(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(__nptr: *const ::std::os::raw::c_char,
                    __endptr: *mut *mut ::std::os::raw::c_char,
                    __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtol_l(__nptr: *const ::std::os::raw::c_char,
                    __endptr: *mut *mut ::std::os::raw::c_char,
                    __base: ::std::os::raw::c_int, __loc: __locale_t)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul_l(__nptr: *const ::std::os::raw::c_char,
                     __endptr: *mut *mut ::std::os::raw::c_char,
                     __base: ::std::os::raw::c_int, __loc: __locale_t)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoll_l(__nptr: *const ::std::os::raw::c_char,
                     __endptr: *mut *mut ::std::os::raw::c_char,
                     __base: ::std::os::raw::c_int, __loc: __locale_t)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull_l(__nptr: *const ::std::os::raw::c_char,
                      __endptr: *mut *mut ::std::os::raw::c_char,
                      __base: ::std::os::raw::c_int, __loc: __locale_t)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtod_l(__nptr: *const ::std::os::raw::c_char,
                    __endptr: *mut *mut ::std::os::raw::c_char,
                    __loc: __locale_t) -> f64;
}
extern "C" {
    pub fn strtof_l(__nptr: *const ::std::os::raw::c_char,
                    __endptr: *mut *mut ::std::os::raw::c_char,
                    __loc: __locale_t) -> f32;
}
extern "C" {
    pub fn strtold_l(__nptr: *const ::std::os::raw::c_char,
                     __endptr: *mut *mut ::std::os::raw::c_char,
                     __loc: __locale_t) -> f64;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type ino64_t = __ino64_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type off64_t = __off64_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type useconds_t = __useconds_t;
pub type suseconds_t = __suseconds_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
impl Clone for __sigset_t {
    fn clone(&self) -> Self { *self }
}
pub type sigset_t = __sigset_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct fd_set {
    pub fds_bits: [__fd_mask; 16usize],
}
impl Clone for fd_set {
    fn clone(&self) -> Self { *self }
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const timespec, __sigmask: *const __sigset_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(__major: ::std::os::raw::c_uint,
                           __minor: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_ulonglong;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type blkcnt64_t = __blkcnt64_t;
pub type fsblkcnt64_t = __fsblkcnt64_t;
pub type fsfilcnt64_t = __fsfilcnt64_t;
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(__seed: ::std::os::raw::c_uint,
                     __statebuf: *mut ::std::os::raw::c_char,
                     __statelen: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
impl Clone for random_data {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(__seed: ::std::os::raw::c_uint, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(__seed: ::std::os::raw::c_uint,
                       __statebuf: *mut ::std::os::raw::c_char,
                       __statelen: usize, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(__statebuf: *mut ::std::os::raw::c_char,
                      __buf: *mut random_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort)
     -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
impl Clone for drand48_data {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data, __result: *mut f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(__seedval: ::std::os::raw::c_long,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(__seed16v: *mut ::std::os::raw::c_ushort,
                    __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(__param: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(__nmemb: usize, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(__ptr: *mut ::std::os::raw::c_void, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn cfree(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(__memptr: *mut *mut ::std::os::raw::c_void,
                          __alignment: usize, __size: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(__func:
                             ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(__func:
                       ::std::option::Option<unsafe extern "C" fn(__status:
                                                                      ::std::os::raw::c_int,
                                                                  __arg:
                                                                      *mut ::std::os::raw::c_void)>,
                   __arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn secure_getenv(__name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(__name: *const ::std::os::raw::c_char,
                  __value: *const ::std::os::raw::c_char,
                  __replace: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp64(__template: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(__template: *mut ::std::os::raw::c_char,
                    __suffixlen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps64(__template: *mut ::std::os::raw::c_char,
                      __suffixlen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkostemp(__template: *mut ::std::os::raw::c_char,
                    __flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemp64(__template: *mut ::std::os::raw::c_char,
                      __flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps(__template: *mut ::std::os::raw::c_char,
                     __suffixlen: ::std::os::raw::c_int,
                     __flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps64(__template: *mut ::std::os::raw::c_char,
                       __suffixlen: ::std::os::raw::c_int,
                       __flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn canonicalize_file_name(__name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn realpath(__name: *const ::std::os::raw::c_char,
                    __resolved: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const ::std::os::raw::c_void,
                                               arg2:
                                                   *const ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type comparison_fn_t = __compar_fn_t;
pub type __compar_d_fn_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const ::std::os::raw::c_void,
                                               arg2:
                                                   *const ::std::os::raw::c_void,
                                               arg3:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
extern "C" {
    pub fn bsearch(__key: *const ::std::os::raw::c_void,
                   __base: *const ::std::os::raw::c_void, __nmemb: usize,
                   __size: usize, __compar: __compar_fn_t)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(__base: *mut ::std::os::raw::c_void, __nmemb: usize,
                 __size: usize, __compar: __compar_fn_t);
}
extern "C" {
    pub fn qsort_r(__base: *mut ::std::os::raw::c_void, __nmemb: usize,
                   __size: usize, __compar: __compar_d_fn_t,
                   __arg: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int)
     -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long,
                __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(__numer: ::std::os::raw::c_longlong,
                 __denom: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(__pwc: *mut u16, __s: *const ::std::os::raw::c_char,
                  __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: u16)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut u16, __s: *const ::std::os::raw::c_char,
                    __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const u16,
                    __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(__optionp: *mut *mut ::std::os::raw::c_char,
                     __tokens: *const *const ::std::os::raw::c_char,
                     __valuep: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setkey(__key: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn posix_openpt(__oflag: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grantpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlockpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(__fd: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(__fd: ::std::os::raw::c_int,
                     __buf: *mut ::std::os::raw::c_char, __buflen: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpt() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl Clone for _G_fpos_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl Clone for _G_fpos64_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_jump_t {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
impl Clone for _IO_marker {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum __codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE_plus {
    _unused: [u8; 0],
}
extern "C" {
    #[link_name = "_IO_2_1_stdin_"]
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "_IO_2_1_stdout_"]
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "_IO_2_1_stderr_"]
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
}
pub type __io_read_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *mut ::std::os::raw::c_char,
                                               __nbytes: usize) -> __ssize_t>;
pub type __io_write_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *const ::std::os::raw::c_char,
                                               __n: usize) -> __ssize_t>;
pub type __io_seek_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __pos: *mut __off64_t,
                                               __w: ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
pub type __io_close_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type cookie_read_function_t = __io_read_fn;
pub type cookie_write_function_t = __io_write_fn;
pub type cookie_seek_function_t = __io_seek_fn;
pub type cookie_close_function_t = __io_close_fn;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _IO_cookie_io_functions_t {
    pub read: __io_read_fn,
    pub write: __io_write_fn,
    pub seek: __io_seek_fn,
    pub close: __io_close_fn,
}
impl Clone for _IO_cookie_io_functions_t {
    fn clone(&self) -> Self { *self }
}
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_file {
    _unused: [u8; 0],
}
extern "C" {
    pub fn _IO_cookie_init(__cfile: *mut _IO_cookie_file,
                           __read_write: ::std::os::raw::c_int,
                           __cookie: *mut ::std::os::raw::c_void,
                           __fns: _IO_cookie_io_functions_t);
}
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE,
                       arg2: *const ::std::os::raw::c_char,
                       arg3: *mut __va_list_tag,
                       arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int,
                    arg3: __ssize_t) -> __ssize_t;
}
extern "C" {
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void,
                     arg3: usize) -> usize;
}
extern "C" {
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int,
                       arg4: ::std::os::raw::c_int) -> __off64_t;
}
extern "C" {
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int) -> __off64_t;
}
extern "C" {
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
}
pub type fpos_t = _G_fpos_t;
pub type fpos64_t = _G_fpos64_t;
extern "C" {
    #[link_name = "stdin"]
    pub static mut stdin: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "stdout"]
    pub static mut stdout: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "stderr"]
    pub static mut stderr: *mut _IO_FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(__old: *const ::std::os::raw::c_char,
                  __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(__oldfd: ::std::os::raw::c_int,
                    __old: *const ::std::os::raw::c_char,
                    __newfd: ::std::os::raw::c_int,
                    __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpfile64() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(__dir: *const ::std::os::raw::c_char,
                   __pfx: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(__filename: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn freopen(__filename: *const ::std::os::raw::c_char,
                   __modes: *const ::std::os::raw::c_char,
                   __stream: *mut FILE) -> *mut FILE;
}
extern "C" {
    pub fn fopen64(__filename: *const ::std::os::raw::c_char,
                   __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn freopen64(__filename: *const ::std::os::raw::c_char,
                     __modes: *const ::std::os::raw::c_char,
                     __stream: *mut FILE) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int,
                  __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fopencookie(__magic_cookie: *mut ::std::os::raw::c_void,
                       __modes: *const ::std::os::raw::c_char,
                       __io_funcs: _IO_cookie_io_functions_t) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(__s: *mut ::std::os::raw::c_void, __len: usize,
                    __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(__bufloc: *mut *mut ::std::os::raw::c_char,
                          __sizeloc: *mut usize) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                   __modes: ::std::os::raw::c_int, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                     __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(__s: *mut ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(__format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(__s: *mut ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(__s: *mut ::std::os::raw::c_char, __maxlen: usize,
                    __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(__s: *mut ::std::os::raw::c_char, __maxlen: usize,
                     __format: *const ::std::os::raw::c_char,
                     __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(__ptr: *mut *mut ::std::os::raw::c_char,
                     __f: *const ::std::os::raw::c_char,
                     __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __asprintf(__ptr: *mut *mut ::std::os::raw::c_char,
                      __fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asprintf(__ptr: *mut *mut ::std::os::raw::c_char,
                    __fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(__fd: ::std::os::raw::c_int,
                    __fmt: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(__fd: ::std::os::raw::c_int,
                   __fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(__stream: *mut FILE,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(__s: *const ::std::os::raw::c_char,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(__format: *const ::std::os::raw::c_char,
                  __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(__s: *mut ::std::os::raw::c_char, __n: ::std::os::raw::c_int,
                 __stream: *mut FILE) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgets_unlocked(__s: *mut ::std::os::raw::c_char,
                          __n: ::std::os::raw::c_int, __stream: *mut FILE)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                      __n: *mut usize, __delimiter: ::std::os::raw::c_int,
                      __stream: *mut FILE) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                    __n: *mut usize, __delimiter: ::std::os::raw::c_int,
                    __stream: *mut FILE) -> __ssize_t;
}
extern "C" {
    pub fn getline(__lineptr: *mut *mut ::std::os::raw::c_char,
                   __n: *mut usize, __stream: *mut FILE) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(__ptr: *mut ::std::os::raw::c_void, __size: usize,
                 __n: usize, __stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn fwrite(__ptr: *const ::std::os::raw::c_void, __size: usize,
                  __n: usize, __s: *mut FILE) -> usize;
}
extern "C" {
    pub fn fputs_unlocked(__s: *const ::std::os::raw::c_char,
                          __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread_unlocked(__ptr: *mut ::std::os::raw::c_void, __size: usize,
                          __n: usize, __stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(__ptr: *const ::std::os::raw::c_void,
                           __size: usize, __n: usize, __stream: *mut FILE)
     -> usize;
}
extern "C" {
    pub fn fseek(__stream: *mut FILE, __off: ::std::os::raw::c_long,
                 __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseeko64(__stream: *mut FILE, __off: __off64_t,
                    __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello64(__stream: *mut FILE) -> __off64_t;
}
extern "C" {
    pub fn fgetpos64(__stream: *mut FILE, __pos: *mut fpos64_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos64(__stream: *mut FILE, __pos: *const fpos64_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "sys_nerr"]
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sys_errlist"]
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    #[link_name = "_sys_nerr"]
    pub static mut _sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "_sys_errlist"]
    pub static mut _sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(__command: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cuserid(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct obstack {
    _unused: [u8; 0],
}
extern "C" {
    pub fn obstack_printf(__obstack: *mut obstack,
                          __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn obstack_vprintf(__obstack: *mut obstack,
                           __format: *const ::std::os::raw::c_char,
                           __args: *mut __va_list_tag)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "program_invocation_name"]
    pub static mut program_invocation_name: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "program_invocation_short_name"]
    pub static mut program_invocation_short_name: *mut ::std::os::raw::c_char;
}
pub type error_t = ::std::os::raw::c_int;
pub type wctype_t = ::std::os::raw::c_ulong;
pub const __ISwupper: _bindgen_ty_53 = _bindgen_ty_53::__ISwupper;
pub const __ISwlower: _bindgen_ty_53 = _bindgen_ty_53::__ISwlower;
pub const __ISwalpha: _bindgen_ty_53 = _bindgen_ty_53::__ISwalpha;
pub const __ISwdigit: _bindgen_ty_53 = _bindgen_ty_53::__ISwdigit;
pub const __ISwxdigit: _bindgen_ty_53 = _bindgen_ty_53::__ISwxdigit;
pub const __ISwspace: _bindgen_ty_53 = _bindgen_ty_53::__ISwspace;
pub const __ISwprint: _bindgen_ty_53 = _bindgen_ty_53::__ISwprint;
pub const __ISwgraph: _bindgen_ty_53 = _bindgen_ty_53::__ISwgraph;
pub const __ISwblank: _bindgen_ty_53 = _bindgen_ty_53::__ISwblank;
pub const __ISwcntrl: _bindgen_ty_53 = _bindgen_ty_53::__ISwcntrl;
pub const __ISwpunct: _bindgen_ty_53 = _bindgen_ty_53::__ISwpunct;
pub const __ISwalnum: _bindgen_ty_53 = _bindgen_ty_53::__ISwalnum;
pub const _ISwupper: _bindgen_ty_53 = _bindgen_ty_53::_ISwupper;
pub const _ISwlower: _bindgen_ty_53 = _bindgen_ty_53::_ISwlower;
pub const _ISwalpha: _bindgen_ty_53 = _bindgen_ty_53::_ISwalpha;
pub const _ISwdigit: _bindgen_ty_53 = _bindgen_ty_53::_ISwdigit;
pub const _ISwxdigit: _bindgen_ty_53 = _bindgen_ty_53::_ISwxdigit;
pub const _ISwspace: _bindgen_ty_53 = _bindgen_ty_53::_ISwspace;
pub const _ISwprint: _bindgen_ty_53 = _bindgen_ty_53::_ISwprint;
pub const _ISwgraph: _bindgen_ty_53 = _bindgen_ty_53::_ISwgraph;
pub const _ISwblank: _bindgen_ty_53 = _bindgen_ty_53::_ISwblank;
pub const _ISwcntrl: _bindgen_ty_53 = _bindgen_ty_53::_ISwcntrl;
pub const _ISwpunct: _bindgen_ty_53 = _bindgen_ty_53::_ISwpunct;
pub const _ISwalnum: _bindgen_ty_53 = _bindgen_ty_53::_ISwalnum;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_53 {
    __ISwupper = 0,
    __ISwlower = 1,
    __ISwalpha = 2,
    __ISwdigit = 3,
    __ISwxdigit = 4,
    __ISwspace = 5,
    __ISwprint = 6,
    __ISwgraph = 7,
    __ISwblank = 8,
    __ISwcntrl = 9,
    __ISwpunct = 10,
    __ISwalnum = 11,
    _ISwupper = 16777216,
    _ISwlower = 33554432,
    _ISwalpha = 67108864,
    _ISwdigit = 134217728,
    _ISwxdigit = 268435456,
    _ISwspace = 536870912,
    _ISwprint = 1073741824,
    _ISwgraph = -2147483648,
    _ISwblank = 65536,
    _ISwcntrl = 131072,
    _ISwpunct = 262144,
    _ISwalnum = 524288,
}
extern "C" {
    pub fn iswalnum(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswalpha(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswcntrl(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswdigit(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswgraph(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswlower(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswprint(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswpunct(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswspace(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswupper(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswxdigit(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswblank(__wc: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctype(__property: *const ::std::os::raw::c_char) -> wctype_t;
}
extern "C" {
    pub fn iswctype(__wc: wint_t, __desc: wctype_t) -> ::std::os::raw::c_int;
}
pub type wctrans_t = *const __int32_t;
extern "C" {
    pub fn towlower(__wc: wint_t) -> wint_t;
}
extern "C" {
    pub fn towupper(__wc: wint_t) -> wint_t;
}
extern "C" {
    pub fn wctrans(__property: *const ::std::os::raw::c_char) -> wctrans_t;
}
extern "C" {
    pub fn towctrans(__wc: wint_t, __desc: wctrans_t) -> wint_t;
}
extern "C" {
    pub fn iswalnum_l(__wc: wint_t, __locale: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswalpha_l(__wc: wint_t, __locale: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswcntrl_l(__wc: wint_t, __locale: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswdigit_l(__wc: wint_t, __locale: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswgraph_l(__wc: wint_t, __locale: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswlower_l(__wc: wint_t, __locale: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswprint_l(__wc: wint_t, __locale: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswpunct_l(__wc: wint_t, __locale: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswspace_l(__wc: wint_t, __locale: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswupper_l(__wc: wint_t, __locale: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswxdigit_l(__wc: wint_t, __locale: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswblank_l(__wc: wint_t, __locale: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctype_l(__property: *const ::std::os::raw::c_char,
                    __locale: __locale_t) -> wctype_t;
}
extern "C" {
    pub fn iswctype_l(__wc: wint_t, __desc: wctype_t, __locale: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn towlower_l(__wc: wint_t, __locale: __locale_t) -> wint_t;
}
extern "C" {
    pub fn towupper_l(__wc: wint_t, __locale: __locale_t) -> wint_t;
}
extern "C" {
    pub fn wctrans_l(__property: *const ::std::os::raw::c_char,
                     __locale: __locale_t) -> wctrans_t;
}
extern "C" {
    pub fn towctrans_l(__wc: wint_t, __desc: wctrans_t, __locale: __locale_t)
     -> wint_t;
}
extern "C" {
    pub fn gettext(__msgid: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dgettext(__domainname: *const ::std::os::raw::c_char,
                    __msgid: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __dgettext(__domainname: *const ::std::os::raw::c_char,
                      __msgid: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dcgettext(__domainname: *const ::std::os::raw::c_char,
                     __msgid: *const ::std::os::raw::c_char,
                     __category: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __dcgettext(__domainname: *const ::std::os::raw::c_char,
                       __msgid: *const ::std::os::raw::c_char,
                       __category: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngettext(__msgid1: *const ::std::os::raw::c_char,
                    __msgid2: *const ::std::os::raw::c_char,
                    __n: ::std::os::raw::c_ulong)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dngettext(__domainname: *const ::std::os::raw::c_char,
                     __msgid1: *const ::std::os::raw::c_char,
                     __msgid2: *const ::std::os::raw::c_char,
                     __n: ::std::os::raw::c_ulong)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dcngettext(__domainname: *const ::std::os::raw::c_char,
                      __msgid1: *const ::std::os::raw::c_char,
                      __msgid2: *const ::std::os::raw::c_char,
                      __n: ::std::os::raw::c_ulong,
                      __category: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn textdomain(__domainname: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bindtextdomain(__domainname: *const ::std::os::raw::c_char,
                          __dirname: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bind_textdomain_codeset(__domainname:
                                       *const ::std::os::raw::c_char,
                                   __codeset: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TypedFileKeystore {
    pub _address: u8,
}
impl Clone for TypedFileKeystore {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FileContainer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FileType {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StatusField {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct BLAKEKey {
    pub _address: u8,
}
impl Clone for BLAKEKey {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FileBucket {
    pub _address: u8,
}
pub type BLAKEBucket = FileBucket;
#[repr(C)]
#[derive(Debug)]
pub struct FileHostingSession {
    pub currentFileBuckets: std_vector,
}
extern "C" {
    #[link_name = "_ZN18FileHostingSession10uploadFileEv"]
    pub fn FileHostingSession_uploadFile(this: *mut FileHostingSession)
     -> StatusField;
}
impl FileHostingSession {
    #[inline]
    pub unsafe fn uploadFile(&mut self) -> StatusField {
        FileHostingSession_uploadFile(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_1 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_2 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_3 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_4 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_4 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_5 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_5 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_6 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_6 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_7 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_7 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_8 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_8 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_9 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_9 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_10 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_10 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_11 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_11 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_12 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_12 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_13 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_13 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_14 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_14 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_15 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_15 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_16 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_16 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_17 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_17 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_18 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_18 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_19 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_19 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_20 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_20 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_21 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_21 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_22 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_22 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_23 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_23 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_24 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_24 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_25 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_25 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_26 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_26 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_27 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_27 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_28 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_28 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_29 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_29 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_30 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_30 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_31 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_31 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_32 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_32 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_33 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_33 {
    fn clone(&self) -> Self { *self }
}
pub type size_type = usize;
pub type iterator = std__Bit_iterator;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl Clone for __va_list_tag {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __locale_data {
    pub _address: u8,
}
impl Clone for __locale_data {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_45 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_45 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_46 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_46 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_47 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_47 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_48 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_48 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_49 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_49 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_50 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_50 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_51 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_51 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_52 {
    pub _address: u8,
}
impl Clone for _bindgen_ty_52 {
    fn clone(&self) -> Self { *self }
}
pub type rep = ::std::os::raw::c_long;
pub type const_pointer = *const std_experimental_filesystem_path__Cmpt;
pub type char_type = ::std::os::raw::c_char;
pub type int_type = ::std::os::raw::c_int;
pub type char_type = u16;
pub type int_type = wint_t;
